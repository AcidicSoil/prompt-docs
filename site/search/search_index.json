{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Prompt Docs","text":"<p>A structured playbook for ideation \u2192 scaffold \u2192 implementation \u2192 refactor \u2192 testing \u2192 docs \u2192 release. Use the sidebar to explore, or jump straight into a workflow below.</p> <p>Get Started {: .md-button } Browse Sections {: .md-button } Contribute {: .md-button }</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>First time here?</p> <ul> <li>Skim the 3 lanes below (Plan / Build / Ship).</li> <li>Use the search in the top-right.</li> <li>Every page is Markdown\u2014click Edit this page to propose improvements.</li> </ul> PlanBuildShip <ul> <li>Write a quick PRD \u2192 PRD generator</li> <li>Pick an architecture approach \u2192 ADR \u2013 new \u2022 Modular architecture</li> <li>Define logging &amp; SLOs \u2192 Logging strategy \u2022 SLO setup</li> </ul> <ul> <li>Bootstrap env &amp; CI \u2192 Env setup \u2022 DevOps automation</li> <li>Start coding prompts \u2192 Generate \u2022 Feature flags</li> <li>Review &amp; tighten \u2192 PR description \u2022 Audit</li> </ul> <ul> <li>Test coverage \u2192 Coverage guide</li> <li>Prepare release notes \u2192 Release notes (prepare)</li> <li>Versioning \u2192 Version proposal</li> </ul>"},{"location":"#whats-inside","title":"What\u2019s inside","text":"<ul> <li>Temp Prompts (organized) \u2014 curated, step-by-step:</li> <li>00 \u00b7 Ideation \u2192 Architecture, Design, Requirements</li> <li>10 \u00b7 Scaffold \u2192 CI setup, Conventions, Scaffold</li> <li>20 \u00b7 Implementation \u2192 Impl, Review, Spec-oriented</li> <li>30 \u00b7 Refactor \u2192 Refactor file, Perf eval</li> <li>40 \u00b7 Testing \u2192 Integration test, Flake fixes</li> <li>50 \u00b7 Docs \u2192 API docs (local)</li> <li> <p>60 \u00b7 Release \u2192 Changelog from commits, Post-release checks</p> </li> <li> <p>Temp Prompts (refactored) \u2014 same ideas, reworked as single-file flows:</p> </li> <li>Jump in: Action diagram, Prompt Optimizer, Scaffold (full-stack)</li> <li> <p>Docs helpers: Generate README, Docs 100%</p> </li> <li> <p>Shared &amp; Templates</p> </li> <li><code>_Shared</code> \u2192 TM overview, Reset strategy</li> <li><code>_Templates</code> \u2192 Instruction file, Prompt sequence generator</li> </ul>"},{"location":"#common-tasks","title":"Common tasks","text":"Plan a change (ADR + PRD checklist) <ol> <li>Start an ADR \u2192 ADR \u2013 new</li> <li>Draft PRD \u2192 PRD generator</li> <li>Stakeholder review \u2192 Planning process</li> </ol> Spin up a project scaffold <ul> <li>CI &amp; secrets \u2192 Secrets manager</li> <li>Monitoring &amp; SLOs \u2192 Monitoring setup \u2022 SLO setup</li> </ul> Run a crisp PR review <p>Use the trio: - PR description helper - Cross-check - Evidence capture</p>"},{"location":"#search-like-a-pro","title":"Search like a pro","text":"<ul> <li>Use filters in the search box (e.g. <code>flag lang:impl</code>), or just keywords like \u201crelease notes prepare\u201d.</li> <li>Prefer relative links when you add content (keeps GitHub Pages happy under <code>/prompt-docs/</code>).</li> <li>Add a short front-matter description on new pages to improve search snippets.</li> </ul> <p>Helpful deep links</p> <ul> <li>Spec-oriented helpers: Explain code \u2022 Changed files \u2022 Grep</li> <li>Testing: Integration test \u2022 Regression guard</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Create a branch, add or edit Markdown under the appropriate section.</li> <li>Keep file names consistent with the existing pattern (e.g., <code>*.impl.md</code>, <code>*.review.md</code>).</li> <li>Submit a PR\u2014use the PR description helper.</li> <li>After merge, the site auto-deploys (using <code>mkdocs build</code> + Pages).</li> </ol> <p>Open a new issue {: .md-button } Propose a change {: .md-button }</p>"},{"location":"#release-versioning","title":"Release &amp; versioning","text":"<ul> <li>Draft notes \u2192 Release notes (prepare)</li> <li>Generate from commits \u2192 Changelog from commits</li> <li>Sanity pass \u2192 Verify</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Built with MkDocs Material and maintained in the prompt-docs repo.</p>"},{"location":"temp-prompts-organized/codebase/","title":"Prompt Docs","text":"<pre><code>Project Structure:\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 temp-prompts-organized\n\u2502   \u251c\u2500\u2500 00-ideation\n\u2502   \u2502   \u251c\u2500\u2500 architecture\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 adr-new.architecture.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 logging-strategy.architecture.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 modular-architecture.architecture.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 stack-evaluation.architecture.md\n\u2502   \u2502   \u251c\u2500\u2500 design\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 action-diagram.design.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api-contract.design.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 design-assets.design.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ui-screenshots.design.md\n\u2502   \u2502   \u2514\u2500\u2500 requirements\n\u2502   \u2502       \u251c\u2500\u2500 plan-delta.requirements.md\n\u2502   \u2502       \u251c\u2500\u2500 planning-process.requirements.md\n\u2502   \u2502       \u251c\u2500\u2500 prd-generator.requirements.md\n\u2502   \u2502       \u2514\u2500\u2500 scope-control.requirements.md\n\u2502   \u251c\u2500\u2500 10-scaffold\n\u2502   \u2502   \u251c\u2500\u2500 ci-setup\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 devops-automation.ci-setup.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 env-setup.ci-setup.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 monitoring-setup.ci-setup.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 secrets-manager-setup.ci-setup.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 slo-setup.ci-setup.md\n\u2502   \u2502   \u251c\u2500\u2500 conventions\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 version-control-guide.conventions.md\n\u2502   \u2502   \u2514\u2500\u2500 scaffold\n\u2502   \u2502       \u251c\u2500\u2500 auth.scaffold.md\n\u2502   \u2502       \u251c\u2500\u2500 db-bootstrap.scaffold.md\n\u2502   \u2502       \u251c\u2500\u2500 fullstack.scaffold.md\n\u2502   \u2502       \u2514\u2500\u2500 iac-bootstrap.scaffold.md\n\u2502   \u251c\u2500\u2500 20-implementation\n\u2502   \u2502   \u251c\u2500\u2500 impl\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 commit.impl.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 content-generation.impl.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 feature-flags.impl.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fix.impl.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 generate.impl.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 prototype-feature.impl.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 todos.impl.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 voice-input.impl.md\n\u2502   \u2502   \u251c\u2500\u2500 review\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 audit.review.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cross-check.review.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 evidence-capture.review.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pr-desc.review.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 review-branch.review.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 review.review.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 todo-report.review.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tsconfig-review.review.md\n\u2502   \u2502   \u2514\u2500\u2500 spec-orient\n\u2502   \u2502       \u251c\u2500\u2500 blame-summary.spec-orient.md\n\u2502   \u2502       \u251c\u2500\u2500 changed-files.spec-orient.md\n\u2502   \u2502       \u251c\u2500\u2500 explain-code.spec-orient.md\n\u2502   \u2502       \u251c\u2500\u2500 explain-symbol.spec-orient.md\n\u2502   \u2502       \u251c\u2500\u2500 grep.spec-orient.md\n\u2502   \u2502       \u251c\u2500\u2500 research-batch.spec-orient.md\n\u2502   \u2502       \u2514\u2500\u2500 research-item.spec-orient.md\n\u2502   \u251c\u2500\u2500 30-refactor\n\u2502   \u2502   \u251c\u2500\u2500 perf\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 compare-outputs.perf.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 model-evaluation.perf.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 model-strengths.perf.md\n\u2502   \u2502   \u251c\u2500\u2500 refactor\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 adr-new.refactor.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 file-modularity.refactor.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 prettier-adopt-migration-report.refactor.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 refactor-file.refactor.md\n\u2502   \u2502   \u2514\u2500\u2500 refactor-candidates\n\u2502   \u2502       \u251c\u2500\u2500 dead-code-scan.refactor-candidates.md\n\u2502   \u2502       \u251c\u2500\u2500 migration-plan.refactor-candidates.md\n\u2502   \u2502       \u2514\u2500\u2500 refactor-suggestions.refactor-candidates.md\n\u2502   \u251c\u2500\u2500 40-testing\n\u2502   \u2502   \u251c\u2500\u2500 coverage\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 guide.coverage.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 regression-guard.coverage.md\n\u2502   \u2502   \u251c\u2500\u2500 fix-flakes\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 error-analysis.fix-flakes.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 explain-failures.fix-flakes.md\n\u2502   \u2502   \u251c\u2500\u2500 gen-tests\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 check.gen-tests.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 integration-test.gen-tests.md\n\u2502   \u2502   \u2514\u2500\u2500 test-plan\n\u2502   \u2502       \u251c\u2500\u2500 e2e-runner-setup.test-plan.md\n\u2502   \u2502       \u251c\u2500\u2500 query-set.test-plan.md\n\u2502   \u2502       \u2514\u2500\u2500 secrets-scan.test-plan.md\n\u2502   \u251c\u2500\u2500 50-docs\n\u2502   \u2502   \u251c\u2500\u2500 api-docs\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api-docs-local.api-docs.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 openapi-generate.api-docs.md\n\u2502   \u2502   \u251c\u2500\u2500 doc-plan\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 gemini-map.doc-plan.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 owners.doc-plan.md\n\u2502   \u2502   \u251c\u2500\u2500 examples\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api-usage.examples.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 reference-implementation.examples.md\n\u2502   \u2502   \u2514\u2500\u2500 site-sync\n\u2502   \u251c\u2500\u2500 60-release\n\u2502   \u2502   \u251c\u2500\u2500 changelog\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 from-commits.changelog.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 project.changelog.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 release-notes-prepare.changelog.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 release-notes.changelog.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 update.changelog.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 verify.changelog.md\n\u2502   \u2502   \u251c\u2500\u2500 pack-publish\n\u2502   \u2502   \u251c\u2500\u2500 post-release-checks\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cleanup-branches.post-release-checks.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 license-report.post-release-checks.md\n\u2502   \u2502   \u2514\u2500\u2500 versioning\n\u2502   \u2502       \u2514\u2500\u2500 version-proposal.versioning.md\n\u2502   \u251c\u2500\u2500 _archive\n\u2502   \u251c\u2500\u2500 _experimental\n\u2502   \u251c\u2500\u2500 _shared\n\u2502   \u2502   \u251c\u2500\u2500 rank-root-prompts.shared.md\n\u2502   \u2502   \u251c\u2500\u2500 reset-strategy.shared.md\n\u2502   \u2502   \u251c\u2500\u2500 roll-up.shared.md\n\u2502   \u2502   \u251c\u2500\u2500 summary.shared.md\n\u2502   \u2502   \u251c\u2500\u2500 switch-model.shared.md\n\u2502   \u2502   \u2514\u2500\u2500 tm\n\u2502   \u2502       \u251c\u2500\u2500 advance.tm.md\n\u2502   \u2502       \u251c\u2500\u2500 blockers.tm.md\n\u2502   \u2502       \u251c\u2500\u2500 ci.tm.md\n\u2502   \u2502       \u251c\u2500\u2500 delta.tm.md\n\u2502   \u2502       \u251c\u2500\u2500 docs.tm.md\n\u2502   \u2502       \u251c\u2500\u2500 next.tm.md\n\u2502   \u2502       \u251c\u2500\u2500 overview.tm.md\n\u2502   \u2502       \u2514\u2500\u2500 refine.tm.md\n\u2502   \u251c\u2500\u2500 _templates\n\u2502   \u2502   \u251c\u2500\u2500 instruction-file.templates.md\n\u2502   \u2502   \u251c\u2500\u2500 prompt-sequence-generator.templates.md\n\u2502   \u2502   \u2514\u2500\u2500 system-level-instruction-editor.templates.md\n\u2502   \u251c\u2500\u2500 codefetch\n\u2502   \u2502   \u2514\u2500\u2500 codebase.md\n\u2502   \u2514\u2500\u2500 prompt-front-matter\n\u2502       \u251c\u2500\u2500 00-ideation__architecture__adr-new.architecture.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__architecture__logging-strategy.architecture.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__architecture__modular-architecture.architecture.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__architecture__stack-evaluation.architecture.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__design__action-diagram.design.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__design__api-contract.design.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__design__design-assets.design.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__design__ui-screenshots.design.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__requirements__plan-delta.requirements.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__requirements__planning-process.requirements.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__requirements__prd-generator.requirements.refactor.md\n\u2502       \u251c\u2500\u2500 00-ideation__requirements__scope-control.requirements.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__ci-setup__devops-automation.ci-setup.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__ci-setup__env-setup.ci-setup.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__ci-setup__slo-setup.ci-setup.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__conventions__version-control-guide.conventions.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__scaffold__auth.scaffold.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__scaffold__db-bootstrap.scaffold.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__scaffold__fullstack.scaffold.refactor.md\n\u2502       \u251c\u2500\u2500 10-scaffold__scaffold__iac-bootstrap.scaffold.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__commit.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__content-generation.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__feature-flags.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__fix.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__generate.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__prototype-feature.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__todos.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__impl__voice-input.impl.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__audit.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__cross-check.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__evidence-capture.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__pr-desc.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__review-branch.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__review.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__todo-report.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__review__tsconfig-review.review.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__spec-orient__blame-summary.spec-orient.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__spec-orient__changed-files.spec-orient.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__spec-orient__explain-code.spec-orient.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__spec-orient__explain-symbol.spec-orient.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__spec-orient__grep.spec-orient.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__spec-orient__research-batch.spec-orient.refactor.md\n\u2502       \u251c\u2500\u2500 20-implementation__spec-orient__research-item.spec-orient.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__perf__compare-outputs.perf.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__perf__model-evaluation.perf.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__perf__model-strengths.perf.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__refactor__adr-new.refactor.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__refactor__file-modularity.refactor.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor.md\n\u2502       \u251c\u2500\u2500 30-refactor__refactor__refactor-file.refactor.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__coverage__guide.coverage.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__coverage__regression-guard.coverage.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__fix-flakes__error-analysis.fix-flakes.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__fix-flakes__explain-failures.fix-flakes.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__gen-tests__check.gen-tests.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__gen-tests__integration-test.gen-tests.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__test-plan__e2e-runner-setup.test-plan.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__test-plan__query-set.test-plan.refactor.md\n\u2502       \u251c\u2500\u2500 40-testing__test-plan__secrets-scan.test-plan.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__api-docs__api-docs-local.api-docs.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__api-docs__openapi-generate.api-docs.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__doc-plan__gemini-map.doc-plan.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__doc-plan__owners.doc-plan.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__examples__api-usage.examples.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__examples__reference-implementation.examples.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__project-contributing.docs.refactor.md\n\u2502       \u251c\u2500\u2500 50-docs__project-readme.docs.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__changelog__from-commits.changelog.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__changelog__project.changelog.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__changelog__release-notes-prepare.changelog.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__changelog__release-notes.changelog.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__changelog__update.changelog.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__changelog__verify.changelog.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__post-release-checks__cleanup-branches.post-release-checks.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__post-release-checks__license-report.post-release-checks.refactor.md\n\u2502       \u251c\u2500\u2500 60-release__versioning__version-proposal.versioning.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__rank-root-prompts.shared.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__reset-strategy.shared.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__roll-up.shared.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__summary.shared.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__switch-model.shared.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__advance.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__blockers.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__ci.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__delta.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__docs.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__next.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__overview.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _shared__tm__refine.tm.refactor.md\n\u2502       \u251c\u2500\u2500 _templates__instruction-file.templates.refactor.md\n\u2502       \u251c\u2500\u2500 _templates__prompt-sequence-generator.templates.refactor.md\n\u2502       \u2514\u2500\u2500 _templates__system-level-instruction-editor.templates.refactor.md\n\u2514\u2500\u2500 temp-prompts-refactored\n    \u251c\u2500\u2500 3-step-process-b4-refactoring.md\n    \u251c\u2500\u2500 Prompt-Optimizer.md\n    \u251c\u2500\u2500 action-diagram.md\n    \u251c\u2500\u2500 adr-new.md\n    \u251c\u2500\u2500 adr-new.refactor.md\n    \u251c\u2500\u2500 api-contract.md\n    \u251c\u2500\u2500 api-docs-local.md\n    \u251c\u2500\u2500 api-usage.md\n    \u251c\u2500\u2500 audit.md\n    \u251c\u2500\u2500 auth-scaffold.md\n    \u251c\u2500\u2500 blame-summary.md\n    \u251c\u2500\u2500 changed-files.md\n    \u251c\u2500\u2500 changelog-from-commits.md\n    \u251c\u2500\u2500 changelog-verify.md\n    \u251c\u2500\u2500 check.md\n    \u251c\u2500\u2500 cleanup-branches.md\n    \u251c\u2500\u2500 commit-msg.md\n    \u251c\u2500\u2500 commit.md\n    \u251c\u2500\u2500 compare-outputs.md\n    \u251c\u2500\u2500 content-generation.md\n    \u251c\u2500\u2500 coverage-guide.md\n    \u251c\u2500\u2500 cross-check.md\n    \u251c\u2500\u2500 db-bootstrap.md\n    \u251c\u2500\u2500 dead-code-scan.md\n    \u251c\u2500\u2500 design-assets.md\n    \u251c\u2500\u2500 devops-automation.md\n    \u251c\u2500\u2500 docs-fulfilled-100.md\n    \u251c\u2500\u2500 e2e-runner-setup.md\n    \u251c\u2500\u2500 env-setup.md\n    \u251c\u2500\u2500 error-analysis.md\n    \u251c\u2500\u2500 eslint-review.md\n    \u251c\u2500\u2500 evidence-capture.md\n    \u251c\u2500\u2500 explain-code.md\n    \u251c\u2500\u2500 explain-failures.md\n    \u251c\u2500\u2500 explain-symbol.md\n    \u251c\u2500\u2500 feature-flags.md\n    \u251c\u2500\u2500 file-modularity.md\n    \u251c\u2500\u2500 fix.md\n    \u251c\u2500\u2500 gemini-map.md\n    \u251c\u2500\u2500 generate-readme.md\n    \u251c\u2500\u2500 generate.md\n    \u251c\u2500\u2500 grep.md\n    \u251c\u2500\u2500 iac-bootstrap.md\n    \u251c\u2500\u2500 instruction-file.md\n    \u251c\u2500\u2500 integration-test.md\n    \u251c\u2500\u2500 license-report.md\n    \u251c\u2500\u2500 logging-strategy.md\n    \u251c\u2500\u2500 migration-plan.md\n    \u251c\u2500\u2500 missing-docs.md\n    \u251c\u2500\u2500 model-evaluation.md\n    \u251c\u2500\u2500 model-strengths.md\n    \u251c\u2500\u2500 modular-architecture.md\n    \u251c\u2500\u2500 monitoring-setup.md\n    \u251c\u2500\u2500 openapi-generate.md\n    \u251c\u2500\u2500 owners.md\n    \u251c\u2500\u2500 plan-delta.md\n    \u251c\u2500\u2500 planning-process.md\n    \u251c\u2500\u2500 pr-desc.md\n    \u251c\u2500\u2500 prd-generator.md\n    \u251c\u2500\u2500 prettier-adopt_Migration_report.md\n    \u251c\u2500\u2500 problem-analyzer.md\n    \u251c\u2500\u2500 prompt-sequence-generator.md\n    \u251c\u2500\u2500 prototype-feature.md\n    \u251c\u2500\u2500 query-set.md\n    \u251c\u2500\u2500 rank-root-prompts.md\n    \u251c\u2500\u2500 refactor-file.md\n    \u251c\u2500\u2500 refactor-suggestions.md\n    \u251c\u2500\u2500 reference-implementation.md\n    \u251c\u2500\u2500 regression-guard.md\n    \u251c\u2500\u2500 release-notes-prepare.md\n    \u251c\u2500\u2500 release-notes.md\n    \u251c\u2500\u2500 research-batch.md\n    \u251c\u2500\u2500 research-item.md\n    \u251c\u2500\u2500 reset-strategy.md\n    \u251c\u2500\u2500 review-branch.md\n    \u251c\u2500\u2500 review.md\n    \u251c\u2500\u2500 roll-up.md\n    \u251c\u2500\u2500 scaffold-fullstack.md\n    \u251c\u2500\u2500 scope-control.md\n    \u251c\u2500\u2500 secrets-manager-setup.md\n    \u251c\u2500\u2500 secrets-scan.md\n    \u251c\u2500\u2500 slo-setup.md\n    \u251c\u2500\u2500 stack-evaluation.md\n    \u251c\u2500\u2500 stop-guessing.md\n    \u251c\u2500\u2500 summary-1.md\n    \u251c\u2500\u2500 summary-2.md\n    \u251c\u2500\u2500 summary.md\n    \u251c\u2500\u2500 switch-model.md\n    \u251c\u2500\u2500 system-level-instruction-editor.md\n    \u251c\u2500\u2500 tm-advance.md\n    \u251c\u2500\u2500 tm-blockers.md\n    \u251c\u2500\u2500 tm-ci.md\n    \u251c\u2500\u2500 tm-delta.md\n    \u251c\u2500\u2500 tm-docs.md\n    \u251c\u2500\u2500 tm-next.md\n    \u251c\u2500\u2500 tm-overview.md\n    \u251c\u2500\u2500 tm-refine.md\n    \u251c\u2500\u2500 todo-report.md\n    \u251c\u2500\u2500 todos.md\n    \u251c\u2500\u2500 tsconfig-review.md\n    \u251c\u2500\u2500 ui-screenshots.md\n    \u251c\u2500\u2500 update-changelog.md\n    \u251c\u2500\u2500 version-control-guide.md\n    \u251c\u2500\u2500 version-proposal.md\n    \u2514\u2500\u2500 voice-input.md\n</code></pre>"},{"location":"temp-prompts-organized/00-ideation/architecture/adr-new.architecture/","title":"ADR \u2013 new","text":"<p>You are a CLI assistant focused on helping contributors with the task: Draft an Architecture Decision Record with pros/cons.</p> <ol> <li>Gather context by inspecting <code>README.md</code> for the project context.</li> <li>Draft a concise ADR including Context, Decision, Status, Consequences. Title: . <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Draft an Architecture Decision Record with pros/cons.</li> <li>Highlight workflow triggers, failing jobs, and proposed fixes.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: src/example.ts</p> <p>Expected Output:</p> <ul> <li>Actionable summary aligned with the output section.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/architecture/logging-strategy.architecture/","title":"Logging strategy","text":"<ul> <li>\"/monitoring-setup\"</li> <li>\"/slo-setup\" next:</li> <li>\"/audit\"</li> <li>\"/error-analysis\"</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/architecture/logging-strategy.architecture/#logging-strategy","title":"Logging Strategy","text":"<p>Trigger: /logging-strategy</p> <p>Purpose: Add or remove diagnostic logging cleanly with levels and privacy in mind.</p>"},{"location":"temp-prompts-organized/00-ideation/architecture/logging-strategy.architecture/#steps","title":"Steps","text":"<ol> <li>Identify hotspots from recent failures.</li> <li>Insert structured logs with contexts and correlation IDs.</li> <li>Remove noisy or PII-leaking logs.</li> <li>Document log levels and sampling in <code>OBSERVABILITY.md</code>.</li> </ol>"},{"location":"temp-prompts-organized/00-ideation/architecture/logging-strategy.architecture/#output-format","title":"Output format","text":"<ul> <li>Diff hunks and a short guideline section.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/architecture/modular-architecture.architecture/","title":"Modular architecture","text":"<ul> <li>\"/openapi-generate\" next:</li> <li>\"/db-bootstrap\"</li> <li>\"/ui-screenshots\"</li> <li>\"/design-assets\"</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/architecture/modular-architecture.architecture/#modular-architecture","title":"Modular Architecture","text":"<p>Trigger: /modular-architecture</p> <p>Purpose: Enforce modular boundaries and clear external interfaces.</p>"},{"location":"temp-prompts-organized/00-ideation/architecture/modular-architecture.architecture/#steps","title":"Steps","text":"<ol> <li>Identify services/modules and their public contracts.</li> <li>Flag cross-module imports and circular deps.</li> <li>Propose boundaries, facades, and internal folders.</li> <li>Add \"contract tests\" for public APIs.</li> </ol>"},{"location":"temp-prompts-organized/00-ideation/architecture/modular-architecture.architecture/#output-format","title":"Output format","text":"<ul> <li>Diagram-ready list of modules and edges, plus diffs.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/architecture/stack-evaluation.architecture/","title":"Stack Evaluation","text":"<p>Trigger: /stack-evaluation</p> <p>Purpose: Evaluate language/framework choices relative to AI familiarity and repo goals.</p>"},{"location":"temp-prompts-organized/00-ideation/architecture/stack-evaluation.architecture/#steps","title":"Steps","text":"<ol> <li>Detect current stack and conventions.</li> <li>List tradeoffs: maturity, tooling, available examples, hiring, and AI training coverage.</li> <li>Recommend stay-or-switch with migration outline if switching.</li> </ol>"},{"location":"temp-prompts-organized/00-ideation/architecture/stack-evaluation.architecture/#output-format","title":"Output format","text":"<ul> <li>Decision memo with pros/cons and next steps.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/design/action-diagram.design/","title":"Action diagram","text":"<p>You are a CLI assistant focused on helping contributors with the task: Explain workflow triggers and dependencies as a diagram\u2011ready outline.</p> <ol> <li>Gather context by inspecting <code>.github/workflows</code>.</li> <li>Explain workflow triggers and dependencies as a diagram\u2011ready outline.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Explain workflow triggers and dependencies as a diagram\u2011ready outline.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>List nodes and edges to make diagram creation straightforward.</li> <li>Highlight workflow triggers, failing jobs, and proposed fixes.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p>"},{"location":"temp-prompts-organized/00-ideation/design/action-diagram.design/#nodes","title":"Nodes","text":"<ul> <li>build</li> <li>deploy</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/design/action-diagram.design/#edges","title":"Edges","text":"<ul> <li>push -&gt; build</li> <li>build -&gt; deploy</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/design/api-contract.design/","title":"API Contract","text":"<p>Trigger: /api-contract \"\" <p>Purpose: Author an initial OpenAPI 3.1 or GraphQL SDL contract from requirements.</p> <p>Steps:</p> <ol> <li>Parse inputs and existing docs. If REST, prefer OpenAPI 3.1 YAML; if GraphQL, produce SDL.</li> <li>Define resources, operations, request/response schemas, error model, auth, and rate limit headers.</li> <li>Add examples for each endpoint or type. Include pagination and filtering conventions.</li> <li>Save to <code>apis/&lt;domain&gt;/openapi.yaml</code> or <code>apis/&lt;domain&gt;/schema.graphql</code>.</li> <li>Emit changelog entry <code>docs/api/CHANGELOG.md</code> with rationale and breaking-change flags.</li> </ol> <p>Output format:</p> <ul> <li><code>Contract Path</code>, <code>Design Notes</code>, and a fenced code block with the spec body.</li> </ul> <p>Examples:</p> <ul> <li><code>/api-contract \"accounts &amp; auth\"</code> \u2192 <code>apis/auth/openapi.yaml</code> with OAuth 2.1 flows.</li> </ul> <p>Notes:</p> <ul> <li>Follow JSON:API style for REST unless caller specifies otherwise. Include <code>429</code> and <code>5xx</code> models.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/design/design-assets.design/","title":"Design Assets","text":"<p>Trigger: /design-assets</p> <p>Purpose: Generate favicons and small design snippets from product brand.</p>"},{"location":"temp-prompts-organized/00-ideation/design/design-assets.design/#steps","title":"Steps","text":"<ol> <li>Extract brand colors and name from README or config.</li> <li>Produce favicon set, social preview, and basic UI tokens.</li> <li>Document asset locations and references.</li> </ol>"},{"location":"temp-prompts-organized/00-ideation/design/design-assets.design/#output-format","title":"Output format","text":"<ul> <li>Asset checklist and generation commands.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/design/ui-screenshots.design/","title":"UI Screenshots","text":"<p>Trigger: /ui-screenshots</p> <p>Purpose: Analyze screenshots for UI bugs or inspiration and propose actionable UI changes.</p>"},{"location":"temp-prompts-organized/00-ideation/design/ui-screenshots.design/#steps","title":"Steps","text":"<ol> <li>Accept screenshot paths or links.</li> <li>Describe visual hierarchy, spacing, contrast, and alignment issues.</li> <li>Output concrete CSS or component changes.</li> </ol>"},{"location":"temp-prompts-organized/00-ideation/design/ui-screenshots.design/#output-format","title":"Output format","text":"<ul> <li>Issue list and code snippets to fix visuals.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/plan-delta.requirements/","title":"plan-delta","text":"<p>Trigger: /plan-delta</p> <p>Purpose: Orchestrate mid-project planning deltas on an existing task graph with history preservation, lineage, and readiness recalculation.</p> <p>Steps:</p> <ol> <li>Discover repository context:</li> <li>Detect tasks file path: prefer <code>tasks.json</code>; else search <code>**/tasks.json</code>.</li> <li>Detect latest plan doc: prefer <code>PRD.md</code> or <code>docs/PRD.md</code>; else <code>**/*(prd|spec|plan)*.md</code>.</li> <li>Snapshot:</li> <li>Create <code>./artifacts/</code> if missing.</li> <li>Copy the current tasks file to <code>./artifacts/tasks-$(date +%Y%m%d-%H%M%S).json</code> using: <code>cp -f &lt;tasks.json&gt; ./artifacts/tasks-$(date +%Y%m%d-%H%M%S).json</code>.</li> <li>Input collection:</li> <li>Read new objectives, constraints, and findings from the user input or provided delta text.</li> <li>Parse selection rules to choose mode: Continue, Hybrid Rebaseline, or Full Rebaseline.</li> <li>Delta Doc generation:</li> <li>Create <code>./artifacts/delta-$(date +%Y%m%d-%H%M%S).md</code> containing sections:<ul> <li>Objectives (new)</li> <li>Constraints (new)</li> <li>Impacts</li> <li>Decisions</li> <li>Evidence log (sources, dates, links)</li> </ul> </li> <li>Task graph update:</li> <li>Never alter historical states <code>done|in_progress|blocked</code> of existing tasks.</li> <li>Do not reuse IDs. For any replaced task, set <code>superseded_by</code> on the old task and include its ID in the new task's <code>supersedes[]</code>.</li> <li>Add <code>source_doc</code>, <code>lineage[]</code> on all new or changed tasks.</li> <li>Create new tasks only for new or changed work. Link predecessors via <code>dependencies</code> or <code>relations</code>.</li> <li>Keep deprecated tasks in graph with <code>status: \"deprecated\"</code> and a <code>reason</code>.</li> <li>Graph maintenance:</li> <li>Recompute dependency order and validate acyclicity.</li> <li>Flag contradictions or invalidated edges as <code>blocked</code> with a machine-readable <code>blocked_reason</code>.</li> <li>Bubble critical-path tasks to the active frontier by recomputing earliest-start and slack.</li> <li>Readiness and selection:</li> <li>Implement <code>ready/next()</code> over the graph: select tasks with all dependencies <code>done</code> and not <code>blocked</code>.</li> <li>Produce a short readiness report grouped by <code>ready | blocked | deprecated</code>.</li> <li>Outputs:</li> <li>Write the updated tasks file in-place, preserving formatting where possible.</li> <li>Persist the Delta Doc under <code>./artifacts/</code>.</li> <li>Emit decision hooks: one line per change stating what it enables.</li> <li>Termination:</li> <li>Stop when all deltas are merged and readiness recalculated, or when a prerequisite cannot be resolved with available evidence.</li> </ol> <p>Output format:</p> <ul> <li>Produce three artifacts:</li> <li>Updated tasks file: valid JSON. Preserve existing fields. Append only the new or changed tasks and relations. Do not mutate historical statuses.</li> <li>Delta document: Markdown with the exact headings <code># Delta</code>, <code>## Objectives</code>, <code>## Constraints</code>, <code>## Impacts</code>, <code>## Decisions</code>, <code>## Evidence</code>.</li> <li>Readiness report: Plain text with sections <code>READY</code>, <code>BLOCKED</code>, <code>DEPRECATED</code>. Each item as <code>- &lt;id&gt; &lt;title&gt;</code>; blocked items add <code>[reason=&lt;code&gt;]</code>.</li> <li>Print Decision hooks as lines starting with <code>HOOK: &lt;id&gt; enables &lt;capability&gt;</code>.</li> </ul> <p>Examples:</p> <ul> <li>Input \u2192</li> </ul> <pre><code>Mode: Continue\nNew objectives: add offline export for tasks\nConstraints: no DB migrations\nFindings: existing export lib supports JSON only\n</code></pre> <p>Output \u2192   - Updated <code>tasks.json</code> with new task <code>T-342</code> { title: \"Add CSV export\", dependencies: [\"T-120\"], source_doc: \"delta-20250921.md\", lineage: [\"T-120\"], supersedes: [] }.   - <code>artifacts/delta-20250921-160500.md</code> populated with objectives, constraints, impacts, decisions, evidence.   - Readiness report lists <code>T-342</code> under READY if deps done.</p> <ul> <li>Input \u2192</li> </ul> <pre><code>Mode: Hybrid Rebaseline\nChanges: ~30% of scope affected by auth provider swap\n</code></pre> <p>Output \u2192   - Minor-plan version bump recorded in Delta Doc.   - New tasks added for provider swap; prior tasks kept with <code>deprecated</code> or <code>blocked</code> and lineage links.</p> <p>Notes:</p> <ul> <li>Never write outside the repo. Keep artifacts in <code>./artifacts/</code>.</li> <li>Evidence log entries include <code>source</code>, <code>date</code>, <code>summary</code>, and optional <code>link</code>.</li> <li>Selection rules: Continue (&lt;20% change), Hybrid (20\u201340%), Full (&gt;40% or goals/KPIs/architecture pivot).</li> <li>If inputs are insufficient, emit a TERMINATION note with missing evidence keys.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/planning-process.requirements/","title":"Planning Process","text":"<p>Trigger: /planning-process</p> <p>Purpose: Draft, refine, and execute a feature plan with strict scope control and progress tracking.</p>"},{"location":"temp-prompts-organized/00-ideation/requirements/planning-process.requirements/#steps","title":"Steps","text":"<ol> <li>If no plan file exists, create <code>PLAN.md</code>. If it exists, load it.</li> <li>Draft sections: Goal, User Story, Milestones, Tasks, Won't do, Ideas for later, Validation, Risks.</li> <li>Trim bloat. Convert vague bullets into testable tasks with acceptance criteria.</li> <li>Tag each task with an owner and estimate. Link to files or paths that will change.</li> <li>Maintain two backlogs: Won't do (explicit non-goals) and Ideas for later (deferrable work).</li> <li>Mark tasks done after tests pass. Append commit SHAs next to completed items.</li> <li>After each milestone: run tests, update Validation, then commit <code>PLAN.md</code>.</li> </ol>"},{"location":"temp-prompts-organized/00-ideation/requirements/planning-process.requirements/#output-format","title":"Output format","text":"<ul> <li>Update or create <code>PLAN.md</code> with the sections above.</li> <li>Include a checklist for Tasks. Keep lines under 100 chars.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/planning-process.requirements/#examples","title":"Examples","text":"<p>Input: \"Add OAuth login\"</p> <p>Output:</p> <ul> <li>Goal: Let users sign in with Google.</li> <li>Tasks: [ ] add Google client, [ ] callback route, [ ] session, [ ] E2E test.</li> <li>Won't do: org SSO.</li> <li>Ideas for later: Apple login.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/planning-process.requirements/#notes","title":"Notes","text":"<ul> <li>Planning only. No code edits.</li> <li>Assume a Git repo with test runner available.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/","title":"PRD Generator","text":"<p>Trigger: /prd-generate Purpose: Produce a complete <code>prd.txt</code> in the exact section order, headers, and tone of the inline example PRD using only the repository README and visible link texts. Steps:</p> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream 1. Read <code>README.md</code> at repo root; do not fetch external links. 2. Extract: product name, problem, target users, value, scope, constraints, features, flows, integrations, data, non-functional needs, risks. 3. If links exist, include their visible text or titles only as contextual hints. 4. Fill gaps with conservative assumptions to keep the PRD complete; collect assumptions for the Appendix. 5. Enforce strict structure identical to the example PRD\u2019s top-level headers and order. 6. For each core feature, include What, Why, High-level How, and Acceptance criteria. 7. In Technical Architecture, document optional platform-specific features and required fallbacks; mirror related risks. 8. In Development Roadmap, group by phases (MVP and later); include acceptance criteria; exclude timelines. 9. In Logical Dependency Chain, order from foundations to visible value; keep items atomic. 10. Run an internal consistency check: features appear in roadmap; risks reflect platform and data concerns; all sections non-empty. 11. Output only the final <code>prd.txt</code> content starting with <code># Overview</code> and ending with <code># Appendix</code>. Output format:</p> <ul> <li>Plain text PRD starting with <code># Overview</code> and ending with <code># Appendix</code>.</li> <li>No preamble, no postscript, no meta commentary. Notes:</li> <li>Reject generation if <code>README.md</code> is missing.</li> <li>Do not browse external sources.</li> <li> </li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#derived-from-example_prdtxt-extracted-summaries-only-secrets-redacted","title":"Derived from example_prd.txt, extracted summaries only; secrets redacted.","text":"Output a plain-text file named <code>prd.txt</code> containing only these sections in this order (separated by one blank line):"},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#overview","title":"Overview","text":""},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#core-features","title":"Core Features","text":""},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#user-experience","title":"User Experience","text":""},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#technical-architecture","title":"Technical Architecture","text":""},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#development-roadmap","title":"Development Roadmap","text":""},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#logical-dependency-chain","title":"Logical Dependency Chain","text":""},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#risks-and-mitigations","title":"Risks and Mitigations","text":""},{"location":"temp-prompts-organized/00-ideation/requirements/prd-generator.requirements/#appendix","title":"Appendix","text":"<p>Output Format</p> <ul> <li><code># Overview</code>: $3</li> <li><code># Core Features</code>: Each includes What, Why, High-level How, and BDD criteria:   <code>Given ...</code> <code>When ...</code> <code>Then ...</code></li> <li><code># User Experience</code>: Personas, key flows, UI/UX, accessibility</li> <li><code># Technical Architecture</code>: Components, data models, APIs/integrations, infrastructure, NFRs</li> <li><code># Development Roadmap</code>: MVP and Future Enhancements with acceptance criteria (no dates)</li> <li><code># Logical Dependency Chain</code>: Work ordering for foundations, earliest front end, extensible units</li> <li><code># Risks and Mitigations</code>: Each includes Description, Likelihood, Impact, Mitigation</li> <li><code># Appendix</code>:   \u2022 Assumptions (bulleted)   \u2022 Research findings from $1   \u2022 Context notes (<code>- &lt;visible text&gt; \u2014 inferred topic</code>)   \u2022 Technical specs</li> </ul> <p>Validation Checks</p> <ul> <li>Headers present and ordered</li> <li>All BDD criteria included for features/fallbacks</li> <li>Risks include likelihood and impact</li> <li>No URLs/secrets; exactly one blank line between sections</li> <li>$1 contains only visible link text (no external browsing) <p>Stashed changes</p> </li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/scope-control.requirements/","title":"Scope Control","text":"<p>Trigger: /scope-control</p> <p>Purpose: Enforce explicit scope boundaries and maintain \"won't do\" and \"ideas for later\" lists.</p>"},{"location":"temp-prompts-organized/00-ideation/requirements/scope-control.requirements/#steps","title":"Steps","text":"<ol> <li>Parse <code>PLAN.md</code> or create it if absent.</li> <li>For each open task, confirm linkage to the current milestone.</li> <li>Detect off-scope items and move them to Won't do or Ideas for later with rationale.</li> <li>Add a \"Scope Gate\" checklist before merging.</li> </ol>"},{"location":"temp-prompts-organized/00-ideation/requirements/scope-control.requirements/#output-format","title":"Output format","text":"<ul> <li>Patch to <code>PLAN.md</code> showing changes in sections and checklists.</li> </ul>"},{"location":"temp-prompts-organized/00-ideation/requirements/scope-control.requirements/#examples","title":"Examples","text":"<p>Input: off-scope request \"Add email templates\" during OAuth feature. Output: Move to Ideas for later with reason \"Not needed for OAuth MVP\".</p>"},{"location":"temp-prompts-organized/00-ideation/requirements/scope-control.requirements/#notes","title":"Notes","text":"<ul> <li>Never add new scope without recording tradeoffs.</li> </ul>"},{"location":"temp-prompts-organized/10-scaffold/ci-setup/devops-automation.ci-setup/","title":"DevOps Automation","text":"<p>Trigger: /devops-automation</p> <p>Purpose: Configure servers, DNS, SSL, CI/CD at a pragmatic level.</p>"},{"location":"temp-prompts-organized/10-scaffold/ci-setup/devops-automation.ci-setup/#steps","title":"Steps","text":"<ol> <li>Inspect repo for IaC or deploy scripts.</li> <li>Generate Terraform or Docker Compose templates if missing.</li> <li>Propose CI workflows for tests, builds, and deploys.</li> <li>Provide runbooks for rollback.</li> </ol>"},{"location":"temp-prompts-organized/10-scaffold/ci-setup/devops-automation.ci-setup/#output-format","title":"Output format","text":"<ul> <li>Infra plan with checkpoints and secrets placeholders.</li> </ul>"},{"location":"temp-prompts-organized/10-scaffold/ci-setup/env-setup.ci-setup/","title":"Env Setup","text":"<p>Trigger: /env-setup</p> <p>Purpose: Create .env.example, runtime schema validation, and per-env overrides.</p> <p>Steps:</p> <ol> <li>Scan repo for <code>process.env</code> usage and collected keys.</li> <li>Emit <code>.env.example</code> with comments and safe defaults.</li> <li>Add runtime validation via <code>zod</code> or <code>envsafe</code> in <code>packages/config</code>.</li> <li>Document <code>development</code>, <code>staging</code>, <code>production</code> precedence and loading order.</li> </ol> <p>Output format: <code>.env.example</code> content block and <code>config/env.ts</code> snippet.</p> <p>Examples: <code>/env-setup</code>.</p> <p>Notes: Do not include real credentials. Enforce <code>STRICT_ENV=true</code> in CI.</p>"},{"location":"temp-prompts-organized/10-scaffold/ci-setup/monitoring-setup.ci-setup/","title":"Monitoring Setup","text":"<p>Trigger: /monitoring-setup</p> <p>Purpose: Bootstrap logs, metrics, and traces with dashboards per domain.</p> <p>Steps:</p> <ol> <li>Choose stack: OpenTelemetry \u2192 Prometheus/Grafana, or vendor.</li> <li>Instrument web and api for request latency, error rate, throughput, and core domain metrics.</li> <li>Provide default dashboards JSON and alert examples.</li> </ol> <p>Output format: instrumentation checklist and dashboard links/paths.</p> <p>Examples: <code>/monitoring-setup</code>.</p> <p>Notes: Avoid high\u2011cardinality labels. Sample traces selectively in prod.</p>"},{"location":"temp-prompts-organized/10-scaffold/ci-setup/secrets-manager-setup.ci-setup/","title":"Secrets Manager Setup","text":"<p>Trigger: /secrets-manager-setup  <p>Purpose: Provision a secrets store and map application variables to it.</p> <p>Steps:</p> <ol> <li>Choose provider: 1Password, Doppler, AWS Secrets Manager, GCP Secret Manager, Vault.</li> <li>Define secret names and scopes. Generate read paths for web and api.</li> <li>Add dev bootstrap instructions and CI access policy docs.</li> </ol> <p>Output format: mapping table <code>ENV_VAR \u2192 provider path</code> and bootstrap steps.</p> <p>Examples: <code>/secrets-manager-setup doppler</code>.</p> <p>Notes: Never echo secret values. Include rotation policy.</p>"},{"location":"temp-prompts-organized/10-scaffold/ci-setup/slo-setup.ci-setup/","title":"SLO Setup","text":"<p>Trigger: /slo-setup</p> <p>Purpose: Define Service Level Objectives, burn alerts, and runbooks.</p> <p>Steps:</p> <ol> <li>Choose SLI/metrics per user journey. Define SLO targets and error budgets.</li> <li>Create burn alerts (fast/slow) and link to runbooks.</li> <li>Add <code>SLO.md</code> with rationale and review cadence.</li> </ol> <p>Output format: SLO table and alert rules snippet.</p> <p>Examples: <code>/slo-setup</code>.</p> <p>Notes: Tie SLOs to deploy gates and incident severity.</p>"},{"location":"temp-prompts-organized/10-scaffold/conventions/version-control-guide.conventions/","title":"Version Control Guide","text":"<p>Trigger: /version-control-guide</p> <p>Purpose: Enforce clean incremental commits and clean-room re-implementation when finalizing.</p>"},{"location":"temp-prompts-organized/10-scaffold/conventions/version-control-guide.conventions/#steps","title":"Steps","text":"<ol> <li>Start each feature from a clean branch: <code>git switch -c &lt;feat&gt;</code>.</li> <li>Commit in vertical slices with passing tests: <code>git add -p &amp;&amp; git commit</code>.</li> <li>When solution is proven, recreate a minimal clean diff: stash or copy results, reset, then apply only the final changes.</li> <li>Use <code>git revert</code> for bad commits instead of force-pushing shared branches.</li> </ol>"},{"location":"temp-prompts-organized/10-scaffold/conventions/version-control-guide.conventions/#output-format","title":"Output format","text":"<ul> <li>Checklist plus suggested commands for the current repo state.</li> </ul>"},{"location":"temp-prompts-organized/10-scaffold/conventions/version-control-guide.conventions/#examples","title":"Examples","text":"<ul> <li>Convert messy spike into three commits: setup, feature, tests.</li> </ul>"},{"location":"temp-prompts-organized/10-scaffold/conventions/version-control-guide.conventions/#notes","title":"Notes","text":"<ul> <li>Never modify remote branches without confirmation.</li> </ul>"},{"location":"temp-prompts-organized/10-scaffold/scaffold/auth.scaffold/","title":"Auth Scaffold","text":"<p>Trigger: /auth-scaffold  <p>Purpose: Scaffold auth flows, routes, storage, and a basic threat model.</p> <p>Steps:</p> <ol> <li>Select provider (OAuth/OIDC/email) and persistence for sessions.</li> <li>Generate routes: login, callback, logout, session refresh.</li> <li>Add CSRF, state, PKCE where applicable. Include secure cookie flags.</li> <li>Document threat model: replay, fixation, token leakage, SSRF on callbacks.</li> <li>Wire to frontend with protected routes and user context.</li> </ol> <p>Output format: route list, config keys, and mitigations table.</p> <p>Examples: <code>/auth-scaffold oauth</code> \u2192 NextAuth/Passport/Custom adapter plan.</p> <p>Notes: Never print real secrets. Use placeholders in <code>.env.example</code>.</p>"},{"location":"temp-prompts-organized/10-scaffold/scaffold/db-bootstrap.scaffold/","title":"DB Bootstrap","text":"<p>Trigger: /db-bootstrap  <p>Purpose: Pick a database, initialize migrations, local compose, and seed scripts.</p> <p>Steps:</p> <ol> <li>Create <code>db/compose.yaml</code> for local dev (skip for sqlite).</li> <li>Choose ORM/driver (Prisma or Drizzle for SQL). Add migration config.</li> <li>Create <code>prisma/schema.prisma</code> or <code>drizzle/*.ts</code> with baseline tables (users, sessions, audit_log).</li> <li>Add <code>pnpm db:migrate</code>, <code>db:reset</code>, <code>db:seed</code> scripts. Write seed data for local admin user.</li> <li>Update <code>.env.example</code> with <code>DATABASE_URL</code> and test connection script.</li> </ol> <p>Output format: Migration plan list and generated file paths.</p> <p>Examples: <code>/db-bootstrap postgres</code> \u2192 Prisma + Postgres docker-compose.</p> <p>Notes: Avoid destructive defaults; provide <code>--preview-feature</code> warnings if relevant.</p>"},{"location":"temp-prompts-organized/10-scaffold/scaffold/fullstack.scaffold/","title":"Scaffold Full\u2011Stack App","text":"<p>Trigger: /scaffold-fullstack  <p>Purpose: Create a minimal, production-ready monorepo template with app, API, tests, CI seeds, and infra stubs.</p> <p>Steps:</p> <ol> <li>Read repository context: <code>git rev-parse --is-inside-work-tree</code>.</li> <li>If repo is empty, initialize: <code>git init -b main</code> and create <code>.editorconfig</code>, <code>.gitignore</code>, <code>README.md</code>.</li> <li>For <code>&lt;stack&gt;</code> derive presets (examples):</li> <li><code>ts-next-express-pg</code>: Next.js app, Express API, Prisma + PostgreSQL, Playwright, pnpm workspaces.</li> <li><code>ts-vite-fastify-sqlite</code>: Vite + React app, Fastify API, Drizzle + SQLite.</li> <li>Create workspace layout:</li> <li>root: <code>package.json</code> with <code>pnpm</code> workspaces, <code>tsconfig.base.json</code>, <code>eslint</code>, <code>prettier</code>.</li> <li>apps/web, apps/api, packages/ui, packages/config.</li> <li>Add scripts:</li> <li>root: <code>dev</code>, <code>build</code>, <code>lint</code>, <code>typecheck</code>, <code>test</code>, <code>e2e</code>, <code>format</code>.</li> <li>web: Next/Vite scripts. api: dev with ts-node or tsx.</li> <li>Seed CI files: <code>.github/workflows/ci.yml</code> with jobs [lint, typecheck, test, build, e2e] and artifact uploads.</li> <li>Add example routes:</li> <li>web: <code>/health</code> page. api: <code>GET /health</code> returning <code>{ ok: true }</code>.</li> <li>Write docs to <code>README.md</code>: how to run dev, test, build, and env variables.</li> <li>Stage files, but do not commit. Output a tree and next commands.</li> </ol> <p>Output format:</p> <ul> <li>Title line: <code>Scaffold created: &lt;stack&gt;</code></li> <li>Sections: <code>Repo Tree</code>, <code>Next Steps</code>, <code>CI Seeds</code>.</li> <li>Include a fenced code block of the <code>tree</code> and sample scripts.</li> </ul> <p>Examples:</p> <ul> <li>Input: <code>/scaffold-fullstack ts-next-express-pg</code> Output: Summary + tree with <code>apps/web</code>, <code>apps/api</code>, <code>packages/ui</code>.</li> <li>Input: <code>/scaffold-fullstack ts-vite-fastify-sqlite</code> Output: Summary + tree + Drizzle config.</li> </ul> <p>Notes:</p> <ul> <li>Assume pnpm and Node 20+. Do not run package installs automatically; propose commands instead.</li> <li>Respect existing files; avoid overwriting without explicit confirmation.</li> </ul>"},{"location":"temp-prompts-organized/10-scaffold/scaffold/iac-bootstrap.scaffold/","title":"IaC Bootstrap","text":"<p>Trigger: /iac-bootstrap  <p>Purpose: Create minimal Infrastructure-as-Code for the chosen platform plus CI hooks.</p> <p>Steps:</p> <ol> <li>Select tool (Terraform, Pulumi). Initialize backend and state.</li> <li>Define stacks for <code>preview</code>, <code>staging</code>, <code>prod</code>. Add outputs (URLs, connection strings).</li> <li>Add CI jobs: plan on PR, apply on main with manual approval.</li> <li>Document rollback and drift detection.</li> </ol> <p>Output format: stack diagram, file list, CI snippets.</p> <p>Examples: <code>/iac-bootstrap aws</code>.</p> <p>Notes: Prefer least privilege IAM and remote state with locking.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/commit.impl/","title":"Commit Message Assistant","text":"<p>Trigger: <code>commit</code></p> <p>Purpose: Generate a conventional, review-ready commit message from the currently staged changes.</p> <p>Output: A finalized commit message with a 50\u201372 character imperative subject line, optional scope, and supporting body lines describing the rationale, evidence, and tests.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/commit.impl/#steps","title":"Steps","text":"<ol> <li>Verify there is staged work with <code>git status --short</code> and stop with guidance if nothing is staged.</li> <li>Inspect the staged diff with <code>git diff --staged</code> and identify the primary change type (feat, fix, chore, docs, refactor, etc.) and optional scope (e.g., package or module).</li> <li>Draft a concise subject line in the form <code>&lt;type&gt;(&lt;scope&gt;): &lt;imperative summary&gt;</code> or <code>&lt;type&gt;: &lt;imperative summary&gt;</code> when no scope applies. Keep the line under 73 characters.</li> <li>Capture essential details in the body as wrapped bullet points or paragraphs: what changed, why it was necessary, and any follow-up actions.</li> <li>Document validation in a trailing section (e.g., <code>Tests:</code>) noting commands executed or why tests were skipped.</li> </ol>"},{"location":"temp-prompts-organized/20-implementation/impl/commit.impl/#example-output","title":"Example Output","text":"<pre><code>fix(auth): prevent session expiration loop\n\n- guard refresh flow against repeated 401 responses\n- add regression coverage for expired refresh tokens\n\nTests: npm test -- auth/session.test.ts\n</code></pre>"},{"location":"temp-prompts-organized/20-implementation/impl/content-generation.impl/","title":"Content Generation","text":"<p>Trigger: /content-generation</p> <p>Purpose: Draft docs, blog posts, or marketing copy aligned with the codebase.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/content-generation.impl/#steps","title":"Steps","text":"<ol> <li>Read repo README and recent CHANGELOG or commits.</li> <li>Propose outlines for docs and posts.</li> <li>Generate content with code snippets and usage examples.</li> </ol>"},{"location":"temp-prompts-organized/20-implementation/impl/content-generation.impl/#output-format","title":"Output format","text":"<ul> <li>Markdown files with frontmatter and section headings.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/impl/feature-flags.impl/","title":"Feature Flags","text":"<p>Trigger: /feature-flags  <p>Purpose: Integrate a flag provider, wire the SDK, and enforce guardrails.</p> <p>Steps:</p> <ol> <li>Select provider (LaunchDarkly, Unleash, Flagsmith, custom).</li> <li>Add SDK init in web/api with bootstrap values and offline mode for dev.</li> <li>Define flag naming and ownership. Add kill\u2011switch pattern and monitoring.</li> </ol> <p>Output format: SDK snippet, example usage, and guardrail checklist.</p> <p>Examples: <code>/feature-flags launchdarkly</code>.</p> <p>Notes: Ensure flags are typed and expire with tickets.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/fix.impl/","title":"Fix","text":"<p>Trigger: /fix \"\" <p>Purpose: Propose a minimal, correct fix with diff-style patches.</p> <p>You are a CLI assistant focused on helping contributors with the task: Propose a minimal, correct fix with patch hunks.</p> <ol> <li>Gather context by running <code>git log --pretty='- %h %s' -n 20</code> for the recent commits; running <code>git ls-files | sed -n '1,400p'</code> for the repo map (first 400 files).</li> <li>Bug summary: . Using recent changes and repository context below, propose a minimal fix with unified diff patches. <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Propose a minimal, correct fix with patch hunks.</li> <li>Provide unified diff-style patches when recommending code changes.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> </ul> <p>Example Input: Authentication failure after password reset</p> <p>Expected Output:</p> <pre><code>diff\n- if (!user) return error;\n+ if (!user) return { status: 401 };\n</code></pre> <p>Regression test: add case for missing user.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/generate.impl/","title":"Generate Unit Tests","text":"<p>Trigger: /generate  <p>Purpose: Generate unit tests for a given source file.</p> <p>You are a CLI assistant focused on helping contributors with the task: Generate unit tests for a given source file.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/generate.impl/#steps","title":"Steps","text":"<ol> <li>Inspect <code>package.json</code> to identify the unit test framework, runner scripts, and any helper utilities required for the suite.</li> <li>Review the target source file with <code>sed -n '1,400p' {{args}}</code> to catalog exported members, branching logic, and error handling paths that must be exercised.</li> <li>Outline the test file structure (location, naming, setup/teardown) and propose arrange/act/assert cases that cover happy paths, edge cases, and failure scenarios.</li> <li>Provide guidance on implementing the tests and how to validate them locally (e.g., <code>npm test -- &lt;pattern&gt;</code> or framework-specific commands).</li> </ol>"},{"location":"temp-prompts-organized/20-implementation/impl/generate.impl/#output","title":"Output","text":"<ul> <li>Begin with a concise summary that restates the goal: Generate unit tests for a given source file.</li> <li>List the recommended test files, describe each test case, and highlight coverage gaps they close.</li> <li>Call out the command(s) to run the new tests and any fixtures or mocks required.</li> <li>Document the evidence you used (e.g., <code>package.json</code>, specific functions/branches in the source file) so maintainers can trust the conclusion.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/impl/generate.impl/#example","title":"Example","text":"<p>Input</p> <pre><code>src/components/Button.tsx\n</code></pre> <p>Output</p> <ul> <li>Summary: Author React Testing Library unit tests for <code>Button</code> to cover rendering, disabled behavior, and click handling.</li> <li>Create <code>src/components/__tests__/Button.test.tsx</code> that:</li> <li>Renders the button label and asserts it matches <code>props.children</code>.</li> <li>Verifies <code>onClick</code> fires once when the button is enabled and is skipped when <code>disabled</code> is true.</li> <li>Confirms the <code>variant=\"primary\"</code> branch applies the <code>btn-primary</code> class.</li> <li>Validation: Run <code>npm test -- Button.test.tsx</code> to execute the suite.</li> <li>Evidence: <code>package.json</code> (scripts.test uses Jest + RTL), component branches in <code>src/components/Button.tsx</code> (disabled guard, variant styling).</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/impl/prototype-feature.impl/","title":"Prototype Feature","text":"<p>Trigger: /prototype-feature</p> <p>Purpose: Spin up a standalone prototype in a clean repo before merging into main.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/prototype-feature.impl/#steps","title":"Steps","text":"<ol> <li>Create a scratch directory name suggestion and scaffolding commands.</li> <li>Generate minimal app with only the feature and hardcoded data.</li> <li>Add E2E test covering the prototype flow.</li> <li>When validated, list the minimal patches to port back.</li> </ol>"},{"location":"temp-prompts-organized/20-implementation/impl/prototype-feature.impl/#output-format","title":"Output format","text":"<ul> <li>Scaffold plan and migration notes.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/impl/todos.impl/","title":"TODOs","text":"<p>You are a CLI assistant focused on helping contributors with the task: Find and group TODO/FIXME annotations.</p> <ol> <li>Gather context by running <code>rg -n \"TODO|FIXME\" -g '!node_modules' . || grep -RInE 'TODO|FIXME' .</code>.</li> <li>Find and group TODO/FIXME annotations.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Find and group TODO/FIXME annotations.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Group: Platform backlog \u2014 4 TODOs referencing auth migration (owner: @platform).</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/impl/voice-input.impl/","title":"Voice Input","text":"<p>Trigger: /voice-input</p> <p>Purpose: Support interaction from voice capture and convert to structured prompts.</p>"},{"location":"temp-prompts-organized/20-implementation/impl/voice-input.impl/#steps","title":"Steps","text":"<ol> <li>Accept transcript text.</li> <li>Normalize to tasks or commands for other prompts.</li> <li>Preserve speaker intents and important entities.</li> </ol>"},{"location":"temp-prompts-organized/20-implementation/impl/voice-input.impl/#output-format","title":"Output format","text":"<ul> <li>Cleaned command list ready to execute.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/audit.review/","title":"Audit","text":"<p>Trigger: /audit</p> <p>Purpose: Audit repository hygiene and suggest improvements.</p>"},{"location":"temp-prompts-organized/20-implementation/review/audit.review/#steps","title":"Steps","text":"<ol> <li>Gather context by running <code>ls -la</code> for the top-level listing. Inspect <code>.editorconfig</code>, <code>.gitignore</code>, <code>.geminiignore</code>, <code>.eslintrc.cjs</code>, <code>.eslintrc.js</code>, <code>tsconfig.json</code>, and <code>pyproject.toml</code> if present to understand shared conventions.</li> <li>Assess repository hygiene across documentation, testing, CI, linting, and security. Highlight gaps and existing automation.</li> <li>Synthesize the findings into a prioritized checklist with recommended next steps.</li> </ol>"},{"location":"temp-prompts-organized/20-implementation/review/audit.review/#output-format","title":"Output format","text":"<ul> <li>Begin with a concise summary that restates the goal: Audit repository hygiene and suggest improvements.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Call out test coverage gaps and validation steps.</li> <li>Highlight workflow triggers, failing jobs, and proposed fixes.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/audit.review/#example-input","title":"Example input","text":"<p>(none \u2013 command runs without arguments)</p>"},{"location":"temp-prompts-organized/20-implementation/review/audit.review/#expected-output","title":"Expected output","text":"<ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/cross-check.review/","title":"Conflict Resolver","text":"<p>Trigger: /cross-check</p> <p>Purpose: Compare conflicting findings and decide which source prevails with rationale.</p> <p>Steps:</p> <ol> <li>Accept a list of SourceIDs or URLs with short findings.</li> <li>Evaluate publisher authority, recency, directness to primary data.</li> <li>Select the prevailing source; note contradictions and rationale.</li> </ol> <p>Output format:</p> <pre><code>### Contradictions\n- {S2 vs S5 \u2192 rationale}\n\n### Prevails\n- {SourceID} because {reason}\n</code></pre> <p>Examples:</p> <ul> <li>Input: <code>/cross-check S2: blog vs S5: RFC</code></li> <li>Output: RFC prevails due to primary standard.</li> </ul> <p>Notes:</p> <ul> <li>Always explain why one source prevails.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/evidence-capture.review/","title":"Evidence Logger","text":"<p>Trigger: /evidence-capture</p> <p>Purpose: Capture sources for a specified claim with dates, \u226425-word quotes, findings, relevance, and confidence.</p> <p>Steps:</p> <ol> <li>Read the claim text and optional URLs provided.</li> <li>For each source, record metadata and a \u226425-word quote.</li> <li>Add a brief Finding, Relevance (H/M/L), and Confidence (0.0\u20131.0).</li> </ol> <p>Output format:</p> <pre><code>### Evidence Log\n| SourceID | Title | Publisher | URL | PubDate | Accessed | Quote (\u226425w) | Finding | Rel | Conf |\n|---|---|---|---|---|---|---|---|---|---|\n</code></pre> <p>Examples:</p> <ul> <li>Input: <code>/evidence-capture \"Next.js 15 requires React 19 RC\"</code> with official links.</li> <li>Output: Evidence table entries with dates.</li> </ul> <p>Notes:</p> <ul> <li>Mark missing PubDate as n/a. Prefer official documentation.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/pr-desc.review/","title":"PR Description","text":"<p>Trigger: /pr-desc  <p>Purpose: Draft a PR description from the branch diff.</p> <p>You are a CLI assistant focused on helping contributors with the task: Draft a PR description from the branch diff.</p> <ol> <li>Gather context by running <code>git diff --name-status origin/main...HEAD</code> for the changed files (name + status); running <code>git diff --shortstat origin/main...HEAD</code> for the high\u2011level stats.</li> <li>Create a crisp PR description following this structure: Summary, Context, Changes, Screenshots (if applicable), Risk, Test Plan, Rollback, Release Notes (if user\u2011facing). Base branch: origin/main User context: . <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Draft a PR description from the branch diff.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Call out test coverage gaps and validation steps.</li> <li>Highlight workflow triggers, failing jobs, and proposed fixes.</li> </ul> <p>Example Input: src/example.ts</p> <p>Expected Output:</p> <ul> <li>Actionable summary aligned with the output section.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/review-branch.review/","title":"Review Branch","text":"<p>Trigger: /review-branch</p> <p>Purpose: Provide a high-level review of the current branch versus origin/main.</p> <p>You are a CLI assistant focused on helping contributors with the task: Provide a high\u2011level review of the current branch vs origin/main.</p> <ol> <li>Gather context by running <code>git diff --stat origin/main...HEAD</code> for the diff stats; running <code>git diff origin/main...HEAD | sed -n '1,200p'</code> for the ```diff.</li> <li>Provide a reviewer\u2011friendly overview: goals, scope, risky areas, test impact.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Provide a high\u2011level review of the current branch vs origin/main.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>Call out test coverage gaps and validation steps.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/review.review/","title":"Review","text":"<p>Trigger: /review  <p>Purpose: Review code matching a pattern and deliver actionable feedback.</p> <p>You are a CLI assistant focused on helping contributors with the task: Review code matching a pattern and give actionable feedback.</p> <ol> <li>Gather context by running <code>rg -n {{args}} . || grep -RIn {{args}} .</code> for the search results for {{args}} (filename or regex).</li> <li>Perform a thorough code review. Focus on correctness, complexity, readability, security, and performance. Provide concrete patch suggestions.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Review code matching a pattern and give actionable feedback.</li> <li>Provide unified diff-style patches when recommending code changes.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> </ul> <p>Example Input: HttpClient</p> <p>Expected Output:</p> <ul> <li>Usage cluster in src/network/* with note on inconsistent error handling.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/todo-report.review/","title":"TODO report","text":"<p>You are a CLI assistant focused on helping contributors with the task: Summarize TODO/FIXME/XXX annotations across the codebase.</p> <ol> <li>Gather context by running <code>rg -n \"TODO|FIXME|XXX\" -g '!node_modules' . || grep -RInE 'TODO|FIXME|XXX' .</code>.</li> <li>Aggregate and group TODO/FIXME/XXX by area and priority. Propose a triage plan.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Summarize TODO/FIXME/XXX annotations across the codebase.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Group: Platform backlog \u2014 4 TODOs referencing auth migration (owner: @platform).</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/review/tsconfig-review.review/","title":"TSConfig review","text":"<p>You are a CLI assistant focused on helping contributors with the task: Review tsconfig for correctness and DX.</p> <ol> <li>Gather context by inspecting <code>tsconfig.json</code>.</li> <li>Provide recommendations for module/target, strictness, paths, incremental builds.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Review tsconfig for correctness and DX.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/blame-summary.spec-orient/","title":"Blame summary","text":"<p>You are a CLI assistant focused on helping contributors with the task: Summarize authorship hotspots for a file using git blame.</p> <ol> <li>Gather context by running <code>git blame -w --line-porcelain {{args}} | sed -n 's/^author //p' | sort | uniq -c | sort -nr | sed -n '1,25p'</code> for the blame authors (top contributors first).</li> <li>Given the blame summary below, identify ownership hotspots and potential reviewers.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Summarize authorship hotspots for a file using git blame.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>Reference evidence from CODEOWNERS or git history for each owner suggestion.</li> </ul> <p>Example Input: src/components/Button.tsx</p> <p>Expected Output:</p> <ul> <li>Refactor proposal extracting shared styling hook with before/after snippet.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/changed-files.spec-orient/","title":"Changed files","text":"<p>You are a CLI assistant focused on helping contributors with the task: Summarize changed files between HEAD and origin/main.</p> <ol> <li>Gather context by running <code>git diff --name-status origin/main...HEAD</code>.</li> <li>List and categorize changed files: added/modified/renamed/deleted. Call out risky changes.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Summarize changed files between HEAD and origin/main.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/explain-code.spec-orient/","title":"Explain Code","text":"<p>Trigger: /explain-code</p> <p>Purpose: Provide line-by-line explanations for a given file or diff.</p>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/explain-code.spec-orient/#steps","title":"Steps","text":"<ol> <li>Accept a file path or apply to staged diff.</li> <li>Explain blocks with comments on purpose, inputs, outputs, and caveats.</li> <li>Highlight risky assumptions and complexity hot spots.</li> </ol>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/explain-code.spec-orient/#output-format","title":"Output format","text":"<ul> <li>Annotated markdown with code fences and callouts.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/explain-symbol.spec-orient/","title":"Explain symbol","text":"<p>You are a CLI assistant focused on helping contributors with the task: Explain where and how a symbol is defined and used.</p> <ol> <li>Gather context by running <code>rg -n {{args}} . || grep -RIn {{args}} .</code> for the results.</li> <li>Explain where and how a symbol is defined and used.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Explain where and how a symbol is defined and used.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: HttpClient</p> <p>Expected Output:</p> <ul> <li>Definition: src/network/httpClient.ts line 42</li> <li>Key usages: services/userService.ts, hooks/useRequest.ts</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/grep.spec-orient/","title":"Grep","text":"<p>You are a CLI assistant focused on helping contributors with the task: Recursive text search with ripgrep/grep injection.</p> <ol> <li>Gather context by running <code>rg -n {{args}} . || grep -RIn {{args}} .</code>.</li> <li>Show matched lines with file paths and line numbers.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Recursive text search with ripgrep/grep injection.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: HttpClient</p> <p>Expected Output:</p> <ul> <li>Usage cluster in src/network/* with note on inconsistent error handling.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/research-batch.spec-orient/","title":"Conversation-Aware Research \u2014 Batch WBRO","text":"<p>Trigger: /research-batch</p> <p>Purpose: Process a numbered work-breakdown list of objectives with carry-forward context across items and produce a roll-up summary.</p> <p>Steps:</p> <ol> <li>Parse numbered WBRO items from the input after the trigger.</li> <li>Before Item 1: list \u22645 bullets of starting context.</li> <li>For each item i: execute the per-item workflow and include a Conversation State Update.</li> <li>If blocked by prior gaps, emit Dependency Blocked with a minimal micro-query.</li> <li>After all items: emit a Roll-up Summary with per-item status, enabled decisions, unresolved risks, and a domain-type count of sources.</li> </ol> <p>Output format:</p> <ul> <li>Repeat the single-item format per item.</li> <li>End with:</li> </ul> <pre><code>## Roll-up Summary\n- Item {n}: {status} \u2014 decision enabled: {\u2026}; risks: {\u2026}\n- Sources by domain type: {gov, org, docs, blog, news}\n</code></pre> <p>Examples:</p> <ul> <li>Input: <code>/research-batch 1) Validate Next.js 15 stability. 2) Compare Bun vs Node for CI. 3) Licensing risks for MIT vs Apache-2.0.</code></li> <li>Output: Per-item sections plus roll-up.</li> </ul> <p>Notes:</p> <ul> <li>Keep quotes \u226425 words. Prefer primary docs.</li> </ul>"},{"location":"temp-prompts-organized/20-implementation/spec-orient/research-item.spec-orient/","title":"Conversation-Aware Research \u2014 Single Item","text":"<p>Trigger: /research-item</p> <p>Purpose: Run the full per-item research workflow for one objective and return queries, evidence, synthesis, contradictions, gaps, decision hook, plus a conversation state update.</p> <p>Steps:</p> <ol> <li>Read the objective text following the trigger.</li> <li>Capture starting context if provided.</li> <li>Apply the Process (per item): Goal, Assumptions, Query Set (4\u20138), Search Plan, Run &amp; Capture, Cross-check, Synthesis, Gaps &amp; Next, Decision Hook.</li> <li>Track PubDate and Accessed (ISO) for every source; prefer primary docs.</li> <li>Enforce quotes \u226425 words; mark inferences as \"Inference\".</li> </ol> <p>Output format:</p> <pre><code>## Item 1: {short title}\n\n### Goal\n{1 sentence}\n\n### Assumptions\n- {only if needed}\n\n### Query Set\n- {Q1}\n- {Q2}\n- {Q3}\n- {Q4\u2013Q8}\n\n### Evidence Log\n| SourceID | Title | Publisher | URL | PubDate | Accessed | Quote (\u226425w) | Finding | Rel | Conf |\n|---|---|---|---|---|---|---|---|---|---|\n\n### Synthesis\n- {claim with [S1,S3]}\n- {finding with [S2]}\n- {risk/edge with [S4]}\n\n### Contradictions\n- {S2 vs S5 \u2192 rationale}\n\n### Gaps &amp; Next\n- {follow-up or test}\n\n### Decision Hook\n{one line}\n\n### Conversation State Update\n- New facts: {bullets}\n- Constraints learned: {bullets}\n- Entities normalized: {canonical forms}\n</code></pre> <p>Examples:</p> <ul> <li>Input: <code>/research-item Compare OpenAPI 3.1 tooling for Python clients in 2024; budget $0; prefer official docs.</code></li> <li>Output: As per format with SourceIDs and dates.</li> </ul> <p>Notes:</p> <ul> <li>Safety: No personal data. Do not fabricate sources.</li> <li>Provenance: Cite reputable sources; record n/a for missing PubDate.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/perf/compare-outputs.perf/","title":"Compare Outputs","text":"<p>Trigger: /compare-outputs</p> <p>Purpose: Run multiple models or tools on the same prompt and summarize best output.</p>"},{"location":"temp-prompts-organized/30-refactor/perf/compare-outputs.perf/#steps","title":"Steps","text":"<ol> <li>Define evaluation prompts and expected properties.</li> <li>Record outputs from each model/tool with metadata.</li> <li>Score using a rubric: correctness, compile/run success, edits required.</li> <li>Recommend a winner and suggested settings.</li> </ol>"},{"location":"temp-prompts-organized/30-refactor/perf/compare-outputs.perf/#output-format","title":"Output format","text":"<ul> <li>Matrix comparison and a one-paragraph decision.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/perf/model-evaluation.perf/","title":"Model Evaluation","text":"<p>Trigger: /model-evaluation</p> <p>Purpose: Try a new model and compare outputs against a baseline.</p>"},{"location":"temp-prompts-organized/30-refactor/perf/model-evaluation.perf/#steps","title":"Steps","text":"<ol> <li>Define a benchmark set from recent tasks.</li> <li>Run candidates and collect outputs and metrics.</li> <li>Analyze failures and summarize where each model excels.</li> </ol>"},{"location":"temp-prompts-organized/30-refactor/perf/model-evaluation.perf/#output-format","title":"Output format","text":"<ul> <li>Summary table and recommendations to adopt or not.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/perf/model-strengths.perf/","title":"Model Strengths","text":"<p>Trigger: /model-strengths</p> <p>Purpose: Choose model per task type.</p>"},{"location":"temp-prompts-organized/30-refactor/perf/model-strengths.perf/#steps","title":"Steps","text":"<ol> <li>Classify task: UI, API, data, testing, docs, refactor.</li> <li>Map historical success by model.</li> <li>Recommend routing rules and temperatures.</li> </ol>"},{"location":"temp-prompts-organized/30-refactor/perf/model-strengths.perf/#output-format","title":"Output format","text":"<ul> <li>Routing guide with examples.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/refactor/adr-new.refactor/","title":"ADR \u2013 new","text":"<p>{$2 or Inferred Name}</p> <p>You are a CLI assistant to draft an Architecture Decision Record with pros/cons using the following inputs:</p> <ol> <li>Analyze project context from $1.</li> <li>Generate a concise ADR with Context, Decision, Status, Consequences. Title: $3.</li> <li>Synthesize insights into the output format with clear priorities and next steps.</li> </ol> <p>Output Requirements: - Provide a summary restating the goal. - Highlight $4, $5, and $6. - Document $7 to ensure maintainability.</p> <p>Example Input: $2</p> <p>Expected Output: Actionable summary aligned with output requirements.</p>"},{"location":"temp-prompts-organized/30-refactor/refactor/file-modularity.refactor/","title":"File Modularity","text":"<p>Trigger: /file-modularity</p> <p>Purpose: Enforce smaller files and propose safe splits for giant files.</p>"},{"location":"temp-prompts-organized/30-refactor/refactor/file-modularity.refactor/#steps","title":"Steps","text":"<ol> <li>Find files over thresholds (e.g., &gt;500 lines).</li> <li>Suggest extraction targets: components, hooks, utilities, schemas.</li> <li>Provide before/after examples and import updates.</li> </ol>"},{"location":"temp-prompts-organized/30-refactor/refactor/file-modularity.refactor/#output-format","title":"Output format","text":"<ul> <li>Refactor plan with patches for file splits.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/refactor/prettier-adopt-migration-report.refactor/","title":"Prettier adopt migration","text":"<p>You are a CLI assistant focused on helping contributors with the task: Plan a Prettier adoption or migration with minimal churn.</p> <ol> <li>Gather context by inspecting <code>package.json</code>; running <code>git ls-files '*.*' | sed -n '1,400p'</code>.</li> <li>Given the files and package.json, propose a rollout plan and ignore patterns.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Plan a Prettier adoption or migration with minimal churn.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/refactor/refactor-file.refactor/","title":"Refactor file","text":"<p>You are a CLI assistant focused on helping contributors with the task: Suggest targeted refactors for a single file.</p> <ol> <li>Gather context by running <code>sed -n '1,400p' {{args}}</code> for the first 400 lines of the file.</li> <li>Suggest refactors that reduce complexity and improve readability without changing behavior. Provide before/after snippets.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Suggest targeted refactors for a single file.</li> <li>Include before/after snippets or diffs with commentary.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: src/components/Button.tsx</p> <p>Expected Output:</p> <ul> <li>Refactor proposal extracting shared styling hook with before/after snippet.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/refactor-candidates/dead-code-scan.refactor-candidates/","title":"Dead Code Scan","text":"<p>Trigger: /dead-code-scan</p> <p>Purpose: Identify likely dead or unused files and exports using static signals.</p> <p>You are a CLI assistant focused on helping contributors with the task: List likely dead or unused files and exports (static signals).</p> <ol> <li>Gather context by running <code>rg -n \"export |module.exports|exports\\.|require\\(|import \" -g '!node_modules' .</code> for the file reference graph (best\u2011effort).</li> <li>From the search results, hypothesize dead code candidates and how to safely remove them.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: List likely dead or unused files and exports (static signals).</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/30-refactor/refactor-candidates/migration-plan.refactor-candidates/","title":"Migration Plan","text":"<p>Trigger: /migration-plan \"\" <p>Purpose: Produce safe up/down migration steps with checks and rollback notes.</p> <p>Steps:</p> <ol> <li>Describe current vs target schema, include data volume and lock risk.</li> <li>Plan: deploy empty columns, backfill, dual-write, cutover, cleanup.</li> <li>Provide SQL snippets and PR checklist. Add <code>can_rollback: true|false</code> flag.</li> </ol> <p>Output format: <code>Plan</code>, <code>SQL</code>, <code>Rollback</code>, <code>Checks</code> sections.</p> <p>Examples: <code>/migration-plan \"orders add status enum\"</code>.</p> <p>Notes: Include online migration strategies for large tables.</p>"},{"location":"temp-prompts-organized/30-refactor/refactor-candidates/refactor-suggestions.refactor-candidates/","title":"Refactor Suggestions","text":"<p>Trigger: /refactor-suggestions</p> <p>Purpose: Propose repo-wide refactoring opportunities after tests exist.</p>"},{"location":"temp-prompts-organized/30-refactor/refactor-candidates/refactor-suggestions.refactor-candidates/#steps","title":"Steps","text":"<ol> <li>Map directory structure and large files.</li> <li>Identify duplication, data clumps, and god objects.</li> <li>Suggest phased refactors with safety checks and tests.</li> </ol>"},{"location":"temp-prompts-organized/30-refactor/refactor-candidates/refactor-suggestions.refactor-candidates/#output-format","title":"Output format","text":"<ul> <li>Ranked list with owners and effort estimates.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/coverage/guide.coverage/","title":"Coverage Guide","text":"<p>Trigger: /coverage-guide</p> <p>Purpose: Propose high-ROI tests to raise coverage using uncovered areas.</p> <p>You are a CLI assistant focused on helping contributors with the task: Suggest a plan to raise coverage based on uncovered areas.</p> <ol> <li>Gather context by running <code>find . -name 'coverage*' -type f -maxdepth 3 -print -exec head -n 40 {} \\; 2&gt;/dev/null</code> for the coverage hints; running <code>git ls-files | sed -n '1,400p'</code> for the repo map.</li> <li>Using coverage artifacts (if available) and repository map, propose the highest\u2011ROI tests to add.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Suggest a plan to raise coverage based on uncovered areas.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Call out test coverage gaps and validation steps.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Focus on src/auth/login.ts \u2014 0% branch coverage; add error path test.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/coverage/regression-guard.coverage/","title":"Regression Guard","text":"<p>Trigger: /regression-guard</p> <p>Purpose: Detect unrelated changes and add tests to prevent regressions.</p>"},{"location":"temp-prompts-organized/40-testing/coverage/regression-guard.coverage/#steps","title":"Steps","text":"<ol> <li>Run <code>git diff --name-status origin/main...HEAD</code> and highlight unrelated files.</li> <li>Propose test cases that lock current behavior for touched modules.</li> <li>Suggest CI checks to block large unrelated diffs.</li> </ol>"},{"location":"temp-prompts-organized/40-testing/coverage/regression-guard.coverage/#output-format","title":"Output format","text":"<ul> <li>Report with file groups, risk notes, and test additions.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/coverage/regression-guard.coverage/#notes","title":"Notes","text":"<ul> <li>Keep proposed tests minimal and focused.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/fix-flakes/error-analysis.fix-flakes/","title":"Error Analysis","text":"<p>Trigger: /error-analysis</p> <p>Purpose: Analyze error logs and enumerate likely root causes with fixes.</p>"},{"location":"temp-prompts-organized/40-testing/fix-flakes/error-analysis.fix-flakes/#steps","title":"Steps","text":"<ol> <li>Collect last test logs or application stack traces if present.</li> <li>Cluster errors by symptom. For each cluster list 2\u20133 plausible causes.</li> <li>Propose instrumentation or inputs to disambiguate.</li> <li>Provide minimal patch suggestions and validation steps.</li> </ol>"},{"location":"temp-prompts-organized/40-testing/fix-flakes/error-analysis.fix-flakes/#output-format","title":"Output format","text":"<ul> <li>Table: error \u2192 likely causes \u2192 next checks \u2192 candidate fix.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/fix-flakes/error-analysis.fix-flakes/#examples","title":"Examples","text":"<ul> <li>\"TypeError: x is not a function\" \u2192 wrong import, circular dep, stale build.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/fix-flakes/explain-failures.fix-flakes/","title":"Explain failures","text":"<p>You are a CLI assistant focused on helping contributors with the task: Analyze recent test failures and propose fixes.</p> <ol> <li>Gather context by running <code>ls -1 test-results 2&gt;/dev/null || echo 'no test-results/ directory'</code> for the recent test output (if present); running <code>find . -maxdepth 2 -name 'junit*.xml' -o -name 'TEST-*.xml' -o -name 'last-test.log' -print -exec tail -n 200 {} \\; 2&gt;/dev/null</code> for the recent test output (if present).</li> <li>From the following logs, identify root causes and propose concrete fixes.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Analyze recent test failures and propose fixes.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/gen-tests/check.gen-tests/","title":"Check","text":"<p>You are a CLI assistant focused on helping contributors with the task: Check adherence to .editorconfig across the repo.</p> <ol> <li>Gather context by inspecting <code>.editorconfig</code>; running <code>git ls-files | sed -n '1,400p'</code>.</li> <li>From the listing and config, point out inconsistencies and propose fixes.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Check adherence to .editorconfig across the repo.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Highlight workflow triggers, failing jobs, and proposed fixes.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/gen-tests/integration-test.gen-tests/","title":"Integration Test","text":"<p>Trigger: /integration-test</p> <p>Purpose: Generate E2E tests that simulate real user flows.</p>"},{"location":"temp-prompts-organized/40-testing/gen-tests/integration-test.gen-tests/#steps","title":"Steps","text":"<ol> <li>Detect framework from <code>package.json</code> or repo (Playwright/Cypress/Vitest).</li> <li>Identify critical path scenarios from <code>PLAN.md</code>.</li> <li>Produce test files under <code>e2e/</code> with arrange/act/assert and selectors resilient to DOM changes.</li> <li>Include login helpers and data setup. Add CI commands.</li> </ol>"},{"location":"temp-prompts-organized/40-testing/gen-tests/integration-test.gen-tests/#output-format","title":"Output format","text":"<ul> <li>Test files with comments and a README snippet on how to run them.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/gen-tests/integration-test.gen-tests/#examples","title":"Examples","text":"<ul> <li>Login, navigate to dashboard, create record, assert toast.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/gen-tests/integration-test.gen-tests/#notes","title":"Notes","text":"<ul> <li>Prefer data-test-id attributes. Avoid brittle CSS selectors.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/test-plan/e2e-runner-setup.test-plan/","title":"E2E Runner Setup","text":"<p>Trigger: /e2e-runner-setup  <p>Purpose: Configure an end-to-end test runner with fixtures and a data sandbox.</p> <p>Steps:</p> <ol> <li>Install runner and add config with baseURL, retries, trace/videos on retry only.</li> <li>Create fixtures for auth, db reset, and network stubs. Add <code>test:serve</code> script.</li> <li>Provide CI job that boots services, runs E2E, uploads artifacts.</li> </ol> <p>Output format: file list, scripts, and CI snippet fenced code block.</p> <p>Examples: <code>/e2e-runner-setup playwright</code>.</p> <p>Notes: Keep runs under 10 minutes locally; parallelize spec files.</p>"},{"location":"temp-prompts-organized/40-testing/test-plan/query-set.test-plan/","title":"High-Yield Query Generator","text":"<p>Trigger: /query-set</p> <p>Purpose: Generate 4\u20138 targeted web search queries with operators, entity variants, and recency filters for a given objective.</p> <p>Steps:</p> <ol> <li>Restate the goal with entities and time window.</li> <li>Produce queries using operators: site:, filetype:, inurl:, quotes, OR, date filters.</li> <li>Include synonyms and common misspellings.</li> <li>Mix intents: define, compare, integrate, configure, limitations, pricing, API, case study.</li> </ol> <p>Output format:</p> <pre><code>### Goal\n{1 sentence}\n\n### Query Set\n- {Q1}\n- {Q2}\n- \u2026 up to 8\n</code></pre> <p>Examples:</p> <ul> <li>Input: <code>/query-set \"OpenAI Responses API streaming server-sent events\" past year</code></li> <li>Output: Goal + 6\u20138 queries with operators.</li> </ul> <p>Notes:</p> <ul> <li>No evidence logging here. Use /research-item to execute.</li> </ul>"},{"location":"temp-prompts-organized/40-testing/test-plan/secrets-scan.test-plan/","title":"Secrets scan","text":"<p>You are a CLI assistant focused on helping contributors with the task: Review secret scan output and highlight real leaks.</p> <ol> <li>Gather context by running <code>gitleaks detect --no-banner --redact 2&gt;/dev/null || echo 'gitleaks not installed'</code> for the if gitleaks is available, output will appear below.</li> <li>Interpret the scanner results, de\u2011dupe false positives, and propose rotations/remediation.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Review secret scan output and highlight real leaks.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/50-docs/api-docs/api-docs-local.api-docs/","title":"API Docs Local","text":"<p>Trigger: /api-docs-local</p> <p>Purpose: Fetch API docs and store locally for offline, deterministic reference.</p>"},{"location":"temp-prompts-organized/50-docs/api-docs/api-docs-local.api-docs/#steps","title":"Steps","text":"<ol> <li>Create <code>docs/apis/</code> directory.</li> <li>For each provided URL or package, write retrieval commands (curl or <code>npm view</code> docs links). Do not fetch automatically without confirmation.</li> <li>Add <code>DOCS.md</code> index linking local copies.</li> </ol>"},{"location":"temp-prompts-organized/50-docs/api-docs/api-docs-local.api-docs/#output-format","title":"Output format","text":"<ul> <li>Command list and file paths to place docs under <code>docs/apis/</code>.</li> </ul>"},{"location":"temp-prompts-organized/50-docs/api-docs/openapi-generate.api-docs/","title":"OpenAPI Generate","text":"<p>Trigger: /openapi-generate  <p>Purpose: Generate server stubs or typed clients from an OpenAPI spec.</p> <p>Steps:</p> <ol> <li>Validate <code>&lt;spec-path&gt;</code>; fail with actionable errors.</li> <li>For <code>server</code>, generate controllers, routers, validation, and error middleware into <code>apps/api</code>.</li> <li>For <code>client</code>, generate a typed SDK into <code>packages/sdk</code> with fetch wrapper and retry/backoff.</li> <li>Add <code>make generate-api</code> or <code>pnpm sdk:gen</code> scripts and CI step to verify no drift.</li> <li>Produce a diff summary and TODO list for unimplemented handlers.</li> </ol> <p>Output format: summary table of generated paths, scripts to add, and next actions.</p> <p>Examples: <code>/openapi-generate client ts apis/auth/openapi.yaml</code>.</p> <p>Notes: Prefer openapi-typescript + zod for TS clients when possible.</p>"},{"location":"temp-prompts-organized/50-docs/doc-plan/gemini-map.doc-plan/","title":"Gemini map","text":"<p>You are a translator that converts a Gemini CLI TOML command into a Codex prompt file.</p> <p>Steps:</p> <p>1) Read TOML with <code>description</code> and <code>prompt</code>. 2) Extract the task, inputs, and outputs implied by the TOML. 3) Write a Codex prompt file \u2264 300 words:</p> <pre><code>- Role line `You are ...`\n- Numbered steps\n- Output section\n- Example input and expected output\n- `Usage: /&lt;command&gt;` line\n- YAML-like metadata at top\n</code></pre> <p>4) Choose a short, hyphenated filename \u2264 32 chars. 5) Emit a ready-to-run bash snippet: <code>cat &gt; ~/.codex/prompts/&lt;filename&gt;.md &lt;&lt; 'EOF'</code> \u2026 <code>EOF</code>. 6) Do not include destructive commands or secrets.</p> <p>Example input:</p> <p>```toml description = \"Draft a PR description\" prompt = \"Create sections Summary, Context, Changes from diff stats\" Expected output:</p> <p>A pr-desc.md file with the structure above and a bash cat &gt; block.</p> <p>Usage: /gemini-map</p>"},{"location":"temp-prompts-organized/50-docs/doc-plan/owners.doc-plan/","title":"Owners","text":"<p>Trigger: /owners  <p>Purpose: Suggest likely owners or reviewers for the specified path.</p> <p>You are a CLI assistant focused on helping contributors with the task: Suggest likely owners/reviewers for a path.</p> <ol> <li>Gather context by inspecting <code>.github/CODEOWNERS</code> for the codeowners (if present); running <code>git log --pretty='- %an %ae: %s' -- {{args}} | sed -n '1,50p'</code> for the recent authors for the path.</li> <li>Based on CODEOWNERS and git history, suggest owners.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Suggest likely owners/reviewers for a path.</li> <li>Reference evidence from CODEOWNERS or git history for each owner suggestion.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: src/components/Button.tsx</p> <p>Expected Output:</p> <ul> <li>Likely reviewers: @frontend-team (CODEOWNERS), @jane (last 5 commits).</li> </ul>"},{"location":"temp-prompts-organized/50-docs/examples/api-usage.examples/","title":"API usage","text":"<p>You are a CLI assistant focused on helping contributors with the task: Show how an internal API is used across the codebase.</p> <ol> <li>Gather context by running <code>rg -n {{args}} . || grep -RIn {{args}} .</code>.</li> <li>Summarize common usage patterns and potential misuses for the symbol.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Show how an internal API is used across the codebase.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: HttpClient</p> <p>Expected Output:</p> <ul> <li>Definition: src/network/httpClient.ts line 42</li> <li>Key usages: services/userService.ts, hooks/useRequest.ts</li> </ul>"},{"location":"temp-prompts-organized/50-docs/examples/reference-implementation.examples/","title":"Reference Implementation","text":"<p>Trigger: /reference-implementation</p> <p>Purpose: Mimic the style and API of a known working example.</p>"},{"location":"temp-prompts-organized/50-docs/examples/reference-implementation.examples/#steps","title":"Steps","text":"<ol> <li>Accept a path or URL to an example. Extract its public API and patterns.</li> <li>Map target module\u2019s API to the reference.</li> <li>Generate diffs that adopt the same structure and naming.</li> </ol>"},{"location":"temp-prompts-organized/50-docs/examples/reference-implementation.examples/#output-format","title":"Output format","text":"<ul> <li>Side-by-side API table and patch suggestions.</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/from-commits.changelog/","title":"Draft CHANGELOG From Commits","text":"<p>Trigger: /changelog-from-commits</p> <p>Purpose: Produce a first-draft six-section CHANGELOG block from commit messages and PR titles between two refs.</p> <p>Steps:</p> <ol> <li>Inputs: <code>since=&lt;ref or tag&gt;</code> optional, <code>until=&lt;ref&gt;</code> default HEAD, <code>include_prs=true|false</code> default true.</li> <li>Gather data with:</li> <li><code>git log --pretty=%H%x09%s%x09%b &lt;since&gt;.. &lt;until&gt;</code></li> <li>If available, <code>gh pr view</code> for merged PR titles by commit SHA; else rely on merge commit subjects.</li> <li>Heuristics:</li> <li>Map types: <code>feat|add</code>\u2192Added, <code>fix|bug</code>\u2192Fixed, <code>perf|refactor|opt</code>\u2192Changed, <code>deprecate</code>\u2192Deprecated, <code>remove|drop</code>\u2192Removed, <code>sec|cve|security</code>\u2192Security.</li> <li>Shorten to 12\u201380 chars. Strip scope parentheses.</li> <li>Emit Markdown with only non-empty sections and a short preface noting the range.</li> </ol> <p>Output format:</p> <ul> <li>Range preface line</li> <li>Six-section Markdown block</li> </ul> <p>Examples: Input \u2192 <code>/changelog-from-commits since=v2.0.0 until=HEAD</code> Output \u2192</p> <pre><code>Range: v2.0.0..HEAD\n\n### Added\n- Import data from XLSX (#612)\n\n### Fixed\n- Correct null check in OAuth callback (#615)\n</code></pre> <p>Notes:</p> <ul> <li>This is a draft; run <code>/update-changelog</code> to finalize and create links.</li> <li>Keep bullets user-facing; avoid internal refactor noise.</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning when applicable.</p>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#added","title":"Added","text":"<ul> <li>Introduce interactive <code>prompts scaffold &lt;slug&gt;</code> command for creating and managing prompt metadata</li> <li>Add prompt scaffolding workflow and metadata guardrails</li> <li>Add task enrichment pipeline to augment task data during ingestion</li> <li>Add local script execution tools (<code>workflow_run_script</code>, <code>workflow_run_task_action</code>, <code>workflow_run_tests</code>, <code>workflow_run_build</code>, <code>workflow_run_lint</code>; originally published with <code>workflow/</code> prefixes)</li> <li>Add abstraction layer for LLM providers</li> <li>Add <code>--verbose</code> and <code>--unsafe-logs</code> flags to CLI and MCP server for improved observability</li> <li>Add <code>docs/client_setup.md</code> and <code>docs/observability.md</code></li> <li>Add new <code>@prompts/tools</code> package to expose core task management logic</li> <li>Implement a stateful workflow engine with a dedicated CLI and MCP server</li> <li>Introduce structured research and planning workflow with new prompt tools</li> <li>Add a comprehensive CLI and MCP server guide</li> <li>Introduce Task-Master CLI and MCP server</li> <li>Implement Task-Master ingest adapter with schema validation and status normalization</li> <li>Implement Jest testing framework and define a canonical JSON schema for tasks</li> <li>Rebaseline project with a new Product Requirements Document (PRDv2) for Task-Master interoperability</li> <li>Introduce Task-Master state engine and a suite of <code>/tm-*</code> slash commands</li> <li>Add <code>/plan-delta</code> prompt for mid-project planning changes</li> <li>Prepare for initial npm publish by updating <code>package.json</code> and adding a release runbook</li> <li>Complete and verify the CLI distribution workflow</li> <li>Introduce <code>prompts</code> CLI for workflow management</li> <li>Add <code>/docfetch-check</code> prompt to enforce documentation freshness</li> <li>Implement a graph-based workflow planner and state management engine</li> <li>Dynamically register prompts from YAML as executable MCP tools</li> <li>Implement a robust <code>StateStore</code> for managing project state</li> <li>Implement a dynamic, stateful prompt workflow and automation engine</li> <li>Initialize project tasks from a Product Requirements Document (PRD)</li> <li>Add initial Product Requirements Document (PRD) for the prompt pack</li> <li>Add research report for building a proactive workflow assistant</li> <li>Automate README table generation from the prompt catalog</li> <li>Add a script to build the prompt catalog</li> <li>Add trigger and purpose metadata to prompts</li> <li>Add a guide for converting prompt libraries into MCP servers</li> <li>Document <code>actions.json</code> mapping format for <code>workflow_run_task_action</code> (formerly <code>workflow/run_task_action</code>) and add sample file under <code>examples/actions.json</code>. Clarifies default lookup, <code>actionsPath</code> override, and execution gating via <code>--exec-enabled</code> + allowlist.</li> <li>CI: add pack contents check to ensure <code>schemas/</code> and <code>dist/mcp/server.js</code> are included in the npm package (GitHub Actions + verify-pack-contains.mjs).</li> <li>Add <code>workflow_run_lint</code> tool paralleling test/build wrappers (initially published as <code>workflow/run_lint</code>); register on server; document in docs/mcp-cli.md; add integration tests for dry-run and exec-gate behaviour.</li> <li>Tests: add live execution test for <code>workflow_run_script</code> with <code>PROMPTS_EXEC_ALLOW=1</code> using allowlisted <code>noop</code> script.</li> <li>Introduce the MCP workflow assistant concept</li> <li>Add lifecycle metadata front matter to prompts and a validator script</li> <li>Implement a dynamic router for documentation MCP servers</li> <li>Add a future enhancements roadmap</li> <li>Add <code>/prd-generate</code> prompt to create a PRD from a README</li> <li>Introduce a self-contained MCP server for managing and serving prompts</li> <li>Add <code>/pr-desc</code> prompt for generating pull request descriptions</li> <li>Integrate Task Master AI for managing agentic workflows</li> <li>Implement a structured instruction and execution framework for the agent</li> <li>Add a comprehensive set of prompts for building an application from scratch</li> <li>Introduce a comprehensive end-to-end development workflow guide</li> <li>Define an end-to-end application development workflow document</li> <li>Add full reference implementation documentation for a Prompts MCP server</li> <li>Add <code>GEMINI.md</code> and <code>AGENTS.md</code> for project context</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#changed","title":"Changed","text":"<ul> <li>Update <code>package.json</code> for public publishing and modernize <code>tsconfig.json</code> to use <code>NodeNext</code> module resolution</li> <li>Rename workflow execution tools to use underscores (e.g. <code>workflow_run_script</code>) for compatibility with OpenAI tool name validation.</li> <li><code>workflow_run_task_action</code> (formerly <code>workflow/run_task_action</code>) now resolves actions from a new <code>actions.json</code> file</li> <li>Centralize state management into a new <code>TaskService</code></li> <li>Implement batched memory updates for the agent, synchronized with Task Master status</li> <li>Update README with usage examples and server launch instructions</li> <li>Update <code>AGENTS.md</code> with Task Master integration guides</li> <li>Formalize PRD in Markdown and refactor research log</li> <li>Implement a more efficient batched memory update system for the agent</li> <li>Improve prompt metadata validation with <code>zod</code> and <code>glob</code></li> <li>Automate workflow phase synchronization</li> <li>Describe catalog maintenance workflow in documentation</li> <li>Align <code>generate</code> prompt with unit test workflow</li> <li>Clarify commit assistant workflow in documentation</li> <li>Update README to clarify <code>/gemini-map</code> usage</li> <li>Update <code>/audit</code> prompt for direct slash command usage</li> <li>Align prompts with the gated lifecycle workflow</li> <li>Refactor agent's instructional context and planning artifacts with a formal PRD</li> <li>Overhaul and categorize the prompt catalog in the README</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Deprecate previous prompt-authoring workstream as part of PRDv2 rebaseline</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#removed","title":"Removed","text":"<ul> <li>Revert prompt scaffolding workflow and metadata guardrails</li> <li>Remove the automated documentation maintenance flow in favor of a dynamic router</li> <li>Remove obsolete workflow and PRD documentation</li> <li>Remove duplicate <code>/pr-desc</code> prompt</li> <li>Delete old <code>PRD-v2.txt</code> file</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#fixed","title":"Fixed","text":"<ul> <li>Correct the Zod schema for the <code>advance_state</code> tool's <code>outputs</code> field to prevent JSON schema generation errors</li> <li>Make schema path resolution more robust</li> <li>Consolidate and fix the test suite to run via Jest</li> <li>Correct test limit for multi-byte character truncation</li> <li>Improve payload capping logic for UTF-8 character boundaries and edge cases</li> <li>Correct Mermaid syntax in workflow diagrams</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#security","title":"Security","text":"<ul> <li>Placeholder for upcoming changes.</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#010-2025-09-22","title":"[0.1.0] - 2025-09-22","text":""},{"location":"temp-prompts-organized/60-release/changelog/project.changelog/#added_1","title":"Added","text":"<ul> <li>MCP/acidic_soil_prompts_integration_rollup_2025_09_21_america_chicago.md</li> <li>cross-check.md</li> <li>evidence-capture.md</li> <li>query-set.md</li> <li>research-batch.md</li> <li>research-item.md</li> <li>roll-up.md</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/release-notes-prepare.changelog/","title":"Prepare Release Notes From CHANGELOG","text":"<p>Trigger: /release-notes-prepare</p> <p>Purpose: Convert the latest CHANGELOG section into release notes suitable for GitHub Releases with the six-section layout.</p> <p>Steps:</p> <ol> <li>Detect latest version heading and extract its section.</li> <li>Normalize bullets to sentence fragments without trailing periods.</li> <li>Add short highlights at top (3 bullets max) derived from Added/Changed.</li> <li>Emit a \"copy-ready\" Markdown body.</li> </ol> <p>Output format:</p> <ul> <li>Title line: <code>Release X.Y.Z \u2014 YYYY-MM-DD</code></li> <li>Highlights list</li> <li>Six sections with bullets</li> </ul> <p>Examples: Input \u2192 <code>/release-notes-prepare</code> Output \u2192</p> <pre><code>Release 1.6.0 \u2014 2025-09-22\n\n**Highlights**\n- Custom roles and permissions\n- Faster cold starts\n\n### Added\n- Role-based access control\n</code></pre> <p>Notes:</p> <ul> <li>Strictly derived from <code>CHANGELOG.md</code>. Do not invent content.</li> <li>If no version is found, fall back to Unreleased with a warning.</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/release-notes.changelog/","title":"Release Notes","text":"<p>Trigger: /release-notes  <p>Purpose: Generate human-readable release notes from recent commits.</p> <p>You are a CLI assistant focused on helping contributors with the task: Generate human\u2011readable release notes from recent commits.</p> <ol> <li>Gather context by running <code>git log --pretty='* %s (%h) \u2014 %an' --no-merges {{args}}</code> for the commit log (no merges).</li> <li>Produce release notes grouped by type (feat, fix, perf, docs, refactor, chore). Include a Highlights section and a full changelog list.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Generate human\u2011readable release notes from recent commits.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: src/example.ts</p> <p>Expected Output:</p>"},{"location":"temp-prompts-organized/60-release/changelog/release-notes.changelog/#features","title":"Features","text":"<ul> <li>Add SSO login flow (PR #42)</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/release-notes.changelog/#fixes","title":"Fixes","text":"<ul> <li>Resolve logout crash (PR #57)</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/update.changelog/","title":"Update CHANGELOG","text":"<p>Trigger: /update-changelog</p> <p>Purpose: Generate a user-facing CHANGELOG entry for the latest merge range and insert under the correct version or Unreleased with the six standard sections.</p> <p>Steps:</p> <ol> <li>Inspect repo state:</li> <li>Detect current branch and latest tag: <code>git describe --tags --abbrev=0</code>.</li> <li>Identify range: <code>${SINCE:-&lt;latest-tag&gt;}..HEAD</code>. If a merge commit hash or tag is provided, use that.</li> <li>Collect changes:</li> <li>Prefer Conventional Commits in <code>git log --pretty=%s %b</code> over the range.</li> <li>Map commit types to sections: feat\u2192Added, perf/refactor\u2192Changed, deprecate\u2192Deprecated, remove\u2192Removed, fix\u2192Fixed, security\u2192Security.</li> <li>Merge PR titles: <code>git log --merges --pretty=%s</code> and include PR numbers.</li> <li>De-dupe and rewrite:</li> <li>Collapse internal-only chatter. Use terse, user-facing wording. No file paths unless end-user relevant.</li> <li>Keep bullets short. One line each. Present tense. No trailing periods.</li> <li>Emit Markdown snippet with the six sections. Omit empty sections.</li> <li>Decide placement:</li> <li>If a release tag was created in this merge, use <code>## [X.Y.Z] - YYYY-MM-DD</code>.</li> <li>Else place under <code>## [Unreleased]</code>.</li> <li>Provide a unified diff showing insertion into <code>CHANGELOG.md</code>. Do not run it; just output the patch.</li> </ol> <p>Output format:</p> <ul> <li>Heading line with target section (Unreleased or version)</li> <li>Six-section block in Markdown with only non-empty sections in order: Added, Changed, Deprecated, Removed, Fixed, Security</li> <li>A short \"Link references\" block suggestion for <code>[Unreleased]</code> and new version comparison links</li> <li>A unified diff (context 3) for <code>CHANGELOG.md</code></li> </ul> <p>Examples: Input \u2192</p> <pre><code>/update-changelog since=v1.4.2 notes=include-prs\n</code></pre> <p>Output \u2192</p> <pre><code>## [Unreleased]\n### Added\n- Export CSV from reports page (#482)\n\n### Changed\n- Speed up dashboard load times on first visit (#479)\n\n### Fixed\n- Resolve 500 error when saving profile with empty bio (#481)\n\n[Unreleased]: https://github.com/OWNER/REPO/compare/v1.4.2...HEAD\n</code></pre> <p>Notes:</p> <ul> <li>Assumes git repository is available and tags follow SemVer.</li> <li>Keep content end-user focused. Avoid internal file names and refactor notes.</li> <li>If no Conventional Commits, infer section from message heuristics.</li> <li>Do not include secrets or internal ticket links.</li> </ul>"},{"location":"temp-prompts-organized/60-release/changelog/verify.changelog/","title":"Verify CHANGELOG Completeness","text":"<p>Trigger: /changelog-verify</p> <p>Purpose: Check that the latest merge introduced a CHANGELOG entry with the six-section policy and that sections are concise and non-empty where applicable.</p> <p>Steps:</p> <ol> <li>Parse <code>CHANGELOG.md</code> and locate <code>## [Unreleased]</code> or the latest version heading.</li> <li>Validate presence and order of sections: Added, Changed, Deprecated, Removed, Fixed, Security.</li> <li>Flag anti-patterns: paragraphs longer than 2 lines, trailing periods, internal-only jargon, file paths, or empty sections left in place.</li> <li>Cross-check against commits since last tag to detect missing items.</li> <li>Emit a diagnostic report and a suggested patch to fix ordering and brevity issues.</li> </ol> <p>Output format:</p> <ul> <li>\"Status: PASS|FAIL\"</li> <li>Table of findings with line numbers and reasons</li> <li>Suggested normalized Markdown block</li> <li>Unified diff to apply</li> </ul> <p>Examples: Input \u2192 <code>/changelog-verify</code> Output \u2192</p> <pre><code>Status: FAIL\n- L42: Section order incorrect (Found Fixed before Removed)\n- Missing Security section stub\n\nSuggested block:\n### Added\n- Bulk upload for SKUs\n\n### Security\n- Bump OpenSSL to 3.0.14\n</code></pre> <p>Notes:</p> <ul> <li>Static analysis only; no network calls.</li> <li>Treat any section with 0 bullets as removable unless policy requires stubs.</li> </ul>"},{"location":"temp-prompts-organized/60-release/post-release-checks/cleanup-branches.post-release-checks/","title":"Cleanup Branches","text":"<p>Trigger: /cleanup-branches</p> <p>Purpose: Recommend which local branches are safe to delete and which to keep.</p> <p>You are a CLI assistant focused on helping contributors with the task: Suggest safe local branch cleanup (merged/stale).</p> <ol> <li>Gather context by running <code>git branch --merged</code> for the merged into current upstream; running <code>git branch --no-merged</code> for the branches not merged; running <code>git for-each-ref --sort=-authordate --format='%(refname:short) \u2014 %(authordate:relative)' refs/heads</code> for the recently updated (last author dates).</li> <li>Using the lists below, suggest local branches safe to delete and which to keep. Include commands to remove them if desired (DO NOT execute).</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Suggest safe local branch cleanup (merged/stale).</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/60-release/post-release-checks/license-report.post-release-checks/","title":"License report","text":"<p>You are a CLI assistant focused on helping contributors with the task: Summarize third\u2011party licenses and risk flags.</p> <ol> <li>Gather context by running <code>npx --yes license-checker --summary 2&gt;/dev/null || echo 'license-checker not available'</code> for the if license tools are present, their outputs; inspecting <code>package.json</code> for the if license tools are present, their outputs.</li> <li>Create a license inventory with notices of copyleft/unknown licenses.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Summarize third\u2011party licenses and risk flags.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>Flag copyleft or unknown licenses and suggest remediation timelines.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>MIT (12) \u2014 low risk</li> <li>GPL-3.0 (1) \u2014 requires legal review</li> </ul>"},{"location":"temp-prompts-organized/60-release/versioning/version-proposal.versioning/","title":"Version Proposal","text":"<p>Trigger: /version-proposal</p> <p>Purpose: Propose the next semantic version based on commit history.</p> <p>You are a CLI assistant focused on helping contributors with the task: Propose next version (major/minor/patch) from commit history.</p> <ol> <li>Gather context by running <code>git describe --tags --abbrev=0</code> for the last tag; running <code>git log --pretty='%s' --no-merges $(git describe --tags --abbrev=0)..HEAD</code> for the commits since last tag (no merges).</li> <li>Given the Conventional Commit history since the last tag, propose the next SemVer and justify why.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Propose next version (major/minor/patch) from commit history.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/_shared/rank-root-prompts.shared/","title":"Rank root prompts","text":""},{"location":"temp-prompts-organized/_shared/rank-root-prompts.shared/#context-aware-prompt-ranking-command","title":"{Context-Aware Prompt Ranking Command}","text":"<pre><code># Command: $1\n\n# Usage: $1 \"$2\" \"$3\" \"$4\" \"$5\"\n\n# Args:\n\n# - {{query}}: $2\n# - {{project_path}}: $3\n# - {{prompt_path}}: $4\n# - {{threshold}}: $5\n\nprompt = \"\"\"\nTask:\nGiven a user inquiry ({{query}}) and the context of a software project located at {{project_path}}, your goal is to identify the most relevant prompt-definition file from the directory {{prompt_path}}.\n\nDefaults:\n* If {{project_path}} is missing or blank, use the current working directory.\n* If {{prompt_path}} is missing or blank, use \"~/.codex/prompts\".\n\nDo the following:\n1) **Analyze Project Context**: Recursively scan {{project_path}} to understand its structure, languages, and purpose. Create a concise summary of the project context.\n2) **Scan Prompts**: List all candidate prompt files in {{prompt_path}} (non-recursively).\n3) **Evaluate Prompts**: For each candidate prompt file:\n    a) Read its content.\n    b) Create a one-sentence summary of its purpose and domain.\n    c) Compute a relevance score from 0 to 1. This score must measure how well the prompt's purpose aligns with the user's {{query}}, considering the project context summary. A higher score means the prompt is a better fit for solving the query within the given project.\n4) **Rank and Filter**: Order the prompts by their relevance score in descending order.\n5) **Generate Output**: Emit a compact markdown table with the columns: `filename | description | match_score` (rounded to 2 decimals).\n\nRules:\n* The description must be 1\u20132 sentences capturing the prompt's purpose and domain.\n* Only include prompts in the table where `match_score` is greater than or equal to {{threshold}}.\n* If no prompts meet the threshold, output a single line: \"No prompt exceeds threshold {{threshold}} \u2014 recommend creating a new prompt.\"\n\nAcceptance:\n* If one or more matches meet the {{threshold}}, a markdown table sorted by descending `match_score` is produced.\n* Otherwise, the single-line fallback message is produced.\n\n!{echo \"Scanning project: ${PROJECT_PATH_ARG:-.}\"}\n!{echo \"Searching for prompts in: ${PROMPT_PATH_ARG:-~/.codex/prompts}\"}\n\"\"\"\n</code></pre>"},{"location":"temp-prompts-organized/_shared/rank-root-prompts.shared/#output-format","title":"Output format","text":"<ul> <li>Preferred: a markdown table with columns <code>filename | description | match_score</code> sorted by <code>match_score</code> (desc) and filtered by <code>{{threshold}}</code>.</li> <li>Fallback: the exact one-line message when no entries meet <code>{{threshold}}</code>.</li> </ul>"},{"location":"temp-prompts-organized/_shared/reset-strategy.shared/","title":"Reset Strategy","text":"<p>Trigger: /reset-strategy</p> <p>Purpose: Decide when to hard reset and start clean to avoid layered bad diffs.</p>"},{"location":"temp-prompts-organized/_shared/reset-strategy.shared/#steps","title":"Steps","text":"<ol> <li>Run: <code>git status -sb</code> and <code>git diff --stat</code> to assess churn.</li> <li>If many unrelated edits or failing builds, propose: <code>git reset --hard HEAD</code> to discard working tree.</li> <li>Save any valuable snippets to <code>scratch/</code> before reset.</li> <li>Re-implement the minimal correct fix from a clean state.</li> </ol>"},{"location":"temp-prompts-organized/_shared/reset-strategy.shared/#output-format","title":"Output format","text":"<ul> <li>A short decision note and exact commands. Never execute resets automatically.</li> </ul>"},{"location":"temp-prompts-organized/_shared/reset-strategy.shared/#examples","title":"Examples","text":"<ul> <li>Recommend reset after repeated failing refactors touching 15+ files.</li> </ul>"},{"location":"temp-prompts-organized/_shared/reset-strategy.shared/#notes","title":"Notes","text":"<ul> <li>Warn about destructive nature. Require user confirmation.</li> </ul>"},{"location":"temp-prompts-organized/_shared/roll-up.shared/","title":"Research Roll-up Summary","text":"<p>Trigger: /roll-up</p> <p>Purpose: Summarize per-item statuses, enabled decisions, unresolved risks, and count sources by domain type.</p> <p>Steps:</p> <ol> <li>Aggregate Conversation State Updates from prior items.</li> <li>Produce per-item status lines and decisions.</li> <li>Tally sources by domain type: gov, org, docs, blog, news, academic.</li> </ol> <p>Output format:</p> <pre><code>## Roll-up Summary\n- Item {n}: {status} \u2014 decision enabled: {\u2026}; risks: {\u2026}\n- Sources by domain type: {gov:X, org:Y, docs:Z, blog:A, news:B, academic:C}\n</code></pre> <p>Examples:</p> <ul> <li>Input: <code>/roll-up from items 1\u20133</code></li> <li>Output: Summary block as above.</li> </ul> <p>Notes:</p> <ul> <li>Use counts derived from the Evidence Logs.</li> </ul>"},{"location":"temp-prompts-organized/_shared/summary.shared/","title":"Summary","text":"<p>You are a CLI assistant focused on helping contributors with the task: Produce a README\u2011level summary of the repo.</p> <ol> <li>Gather context by running <code>git ls-files | sed -n '1,400p'</code> for the repo map (first 400 files); inspecting <code>README.md</code> for the key docs if present; inspecting <code>docs</code> for the key docs if present.</li> <li>Generate a high\u2011level summary (What, Why, How, Getting Started).</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Produce a README\u2011level summary of the repo.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/_shared/switch-model.shared/","title":"Switch Model","text":"<p>Trigger: /switch-model</p> <p>Purpose: Decide when to try a different AI backend and how to compare.</p>"},{"location":"temp-prompts-organized/_shared/switch-model.shared/#steps","title":"Steps","text":"<ol> <li>Define task type: frontend codegen, backend reasoning, test writing, refactor.</li> <li>Select candidate models and temperature/tooling options.</li> <li>Run a fixed input suite and measure latency, compile success, and edits needed.</li> <li>Recommend a model per task with rationale.</li> </ol>"},{"location":"temp-prompts-organized/_shared/switch-model.shared/#output-format","title":"Output format","text":"<ul> <li>Table: task \u2192 model \u2192 settings \u2192 win reason.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/advance.tm/","title":"Advance Task(s)","text":"<p>Trigger: /tm-advance</p> <p>Purpose: For given task id(s), produce a concrete work plan, acceptance criteria, tests, and a Conventional Commits message to move status toward done.</p> <p>Steps:</p> <ol> <li>Read tasks.json; resolve each provided id. If none provided, pick the top item from /tm-next.</li> <li>For each task: restate title, goals, and related dependencies.</li> <li>Draft a step-by-step plan with file touch-points and test hooks.</li> <li>Provide a minimal commit plan and a Conventional Commits message with scope and short body.</li> <li>List measurable acceptance criteria.</li> </ol> <p>Output format:</p> <ul> <li>One section per task: \"##  \u2014 \" <li>Subsections: Plan, Files, Tests, Acceptance, Commit Message (fenced), Risks.</li> <p>Examples:</p> <ul> <li>Input: /tm-advance TM-42 TM-43</li> <li>Output: structured sections with a commit message like <code>feat(parser): implement rule X</code>.</li> </ul> <p>Notes:</p> <ul> <li>Do not mutate tasks.json. Emit proposed changes only.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/blockers.tm/","title":"Blocker Diagnosis","text":"<p>Trigger: /tm-blockers</p> <p>Purpose: Diagnose why a task is blocked and propose the shortest path to unblock it.</p> <p>Steps:</p> <ol> <li>Load tasks.json and the target id.</li> <li>Enumerate unmet dependencies and missing artifacts (tests, docs, approvals).</li> <li>Classify each blocker: dependency, ambiguity, environment, CI, external.</li> <li>Propose 1\u20133 minimal unblocking actions, each with owner, effort, and success check.</li> </ol> <p>Output format:</p> <ul> <li>\"# Blocker Report: \" <li>Tables: blockers (type | item | evidence), actions (step | owner | effort | success_criteria).</li> <p>Examples:</p> <ul> <li>Input: /tm-blockers TM-17</li> <li>Output: two tables and a short narrative under \"Findings\".</li> </ul> <p>Notes:</p> <ul> <li>If the task is not actually blocked, state why and redirect to /tm-advance.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/ci.tm/","title":"CI/Test Checklist from Tasks","text":"<p>Trigger: /tm-ci</p> <p>Purpose: Derive a near-term CI and test checklist from ready and in-progress tasks.</p> <p>Steps:</p> <ol> <li>Compute ready tasks (see /tm-next) and collect any testStrategy fields.</li> <li>Group by component or tag if available; otherwise by path keywords in titles.</li> <li>Propose CI jobs and test commands with approximate runtimes and gating rules.</li> <li>Include a smoke-test matrix and minimal code coverage targets if relevant.</li> </ol> <p>Output format:</p> <ul> <li>\"# CI Plan\"</li> <li>Tables: jobs (name | trigger | commands | est_time) and tests (scope | command | expected_artifacts).</li> <li>\"## Risk Areas\" bullets and \"## Follow-ups\".</li> </ul> <p>Examples:</p> <ul> <li>Input: /tm-ci</li> <li>Output: one CI plan with 3\u20138 jobs and a test table.</li> </ul> <p>Notes:</p> <ul> <li>Non-binding guidance. Adapt to the repo\u2019s actual CI system.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/delta.tm/","title":"PRD \u2192 Tasks Delta","text":"<p>Trigger: /tm-delta</p> <p>Purpose: Compare a PRD text against tasks.json and propose add/update/remove operations.</p> <p>Steps:</p> <ol> <li>Accept PRD content pasted by the user or a path like ./prd.txt. If absent, output a short template asking for PRD input.</li> <li>Extract objectives, constraints, deliverables, and milestones from the PRD.</li> <li>Map them to existing tasks by fuzzy match on title and keywords; detect gaps.</li> <li>Propose: new tasks, updates to titles/descriptions/priority, and deprecations.</li> </ol> <p>Output format:</p> <ul> <li>\"# Delta Summary\"</li> <li>Tables: adds | updates | removals.</li> <li>\"## JSON Patch\" with an ordered list of operations: add/replace/remove.</li> <li>\"## Assumptions\" and \"## Open Questions\".</li> </ul> <p>Examples:</p> <ul> <li>Input: /tm-delta ./prd.txt</li> <li>Output: tables with a small JSON Patch block.</li> </ul> <p>Notes:</p> <ul> <li>Keep patches minimal and reversible. Flag any destructive changes explicitly.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/docs.tm/","title":"Generate Status Docs","text":"<p>Trigger: /tm-docs</p> <p>Purpose: Emit a project status document from tasks.json for README or STATUS.md.</p> <p>Steps:</p> <ol> <li>Parse tasks.json; collect done, in_progress, blocked, and ready_next (per /tm-next logic).</li> <li>Compose a concise narrative: current focus, recent wins, top risks.</li> <li>Produce status boards for each status with id, title, and owner if present.</li> <li>Add a 7-day changelog if timestamps exist; otherwise, summarize recent done items.</li> </ol> <p>Output format:</p> <ul> <li>\"# Project Status \u2014 \" <li>Sections: Summary, Ready Next, In Progress, Blocked, Done, Changelog.</li> <p>Examples:</p> <ul> <li>Input: /tm-docs</li> <li>Output: a single Markdown document suitable for commit as STATUS.md.</li> </ul> <p>Notes:</p> <ul> <li>Avoid leaking secrets. Do not invent owners; omit unknown fields.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/next.tm/","title":"Next Ready Tasks","text":"<p>Trigger: /tm-next</p> <p>Purpose: List tasks that are ready to start now (no unmet dependencies), ordered by priority and dependency depth.</p> <p>Steps:</p> <ol> <li>Load tasks.json and build a map of id \u2192 task.</li> <li>A task is ready if status \u2208 {pending, blocked} AND all dependencies are done.</li> <li>Order by: priority desc, then shortest path length to completion, then title.</li> <li>For each ready task, include why it is ready and the prerequisites satisfied.</li> </ol> <p>Output format:</p> <ul> <li>\"# Ready Now\"</li> <li>Table: id | title | priority | why_ready | prereqs</li> <li>\"## Notes\" for tie-break rules and data gaps.</li> </ul> <p>Examples:</p> <ul> <li>Input: /tm-next</li> <li>Output: a table of 5\u201320 items. If none, say \"No ready tasks\" and list nearest-unblock candidates.</li> </ul> <p>Notes:</p> <ul> <li>Treat missing or null priority as 0. If custom scales exist, describe them in Notes.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/overview.tm/","title":"TaskMaster Overview","text":"<p>Trigger: /tm-overview</p> <p>Purpose: Summarize the current TaskMaster tasks.json by status, priority, dependency health, and critical path to orient work.</p> <p>Steps:</p> <ol> <li>Locate the active tasks.json at repo root or the path supplied in the user message. Do not modify it.</li> <li>Parse fields: id, title, description, status, priority, dependencies, subtasks.</li> <li>Compute counts per status and a table of top pending items by priority.</li> <li>Detect dependency issues: cycles, missing ids, orphans (no deps and not depended on).</li> <li>Approximate a critical path: longest dependency chain among pending\u2192in_progress tasks.</li> </ol> <p>Output format:</p> <ul> <li>\"# Overview\" then a bullets summary.</li> <li>\"## Totals\" as a 4-column table: status | count | percent | notes.</li> <li>\"## Top Pending\" table: id | title | priority | unblockers.</li> <li>\"## Critical Path\" as an ordered list of ids with short titles.</li> <li>\"## Issues\" list for cycles, missing references, duplicates.</li> </ul> <p>Examples:</p> <ul> <li>Input (Codex TUI): /tm-overview</li> <li>Output: tables and lists as specified. Keep to &lt;= 200 lines.</li> </ul> <p>Notes:</p> <ul> <li>Read-only. Assume statuses: pending | in_progress | blocked | done.</li> <li>If tasks.json is missing or invalid, output an \"## Errors\" section with a concise diagnosis.</li> </ul>"},{"location":"temp-prompts-organized/_shared/tm/refine.tm/","title":"Refine Task into Subtasks","text":"<p>Trigger: /tm-refine</p> <p>Purpose: Expand a vague or large task into actionable subtasks with clear acceptance criteria.</p> <p>Steps:</p> <ol> <li>Load the task by id and analyze description for ambiguity and scope.</li> <li>Propose 3\u20138 subtasks with titles, brief descriptions, and dependencies between them.</li> <li>Define acceptance criteria per subtask using Given/When/Then or bullet checks.</li> <li>Suggest test coverage and doc updates triggered by completion.</li> </ol> <p>Output format:</p> <ul> <li>\"# Refinement: \" <li>Subtasks as a Markdown table: id_suggested | title | depends_on | acceptance.</li> <li>\"## JSON Patch\" fenced code of suggested additions suitable for tasks.json editing.</li> <p>Examples:</p> <ul> <li>Input: /tm-refine TM-09</li> <li>Output: table plus a minimal JSON Patch array.</li> </ul> <p>Notes:</p> <ul> <li>Do not assume authority to change files; provide patches the user can apply.</li> </ul>"},{"location":"temp-prompts-organized/_templates/instruction-file.templates/","title":"Instruction File","text":"<p>Trigger: /instruction-file</p> <p>Purpose: Generate or update <code>cursor.rules</code>, <code>windsurf.rules</code>, or <code>claude.md</code> with project-specific instructions.</p>"},{"location":"temp-prompts-organized/_templates/instruction-file.templates/#steps","title":"Steps","text":"<ol> <li>Scan repo for existing instruction files.</li> <li>Compose sections: Context, Coding Standards, Review Rituals, Testing, Security, Limits.</li> <li>Include \"Reset and re-implement cleanly\" guidance and scope control.</li> <li>Write to chosen file and propose a commit message.</li> </ol>"},{"location":"temp-prompts-organized/_templates/instruction-file.templates/#output-format","title":"Output format","text":"<ul> <li>Markdown instruction file with stable headings.</li> </ul>"},{"location":"temp-prompts-organized/_templates/prompt-sequence-generator.templates/","title":"Prompt: Generate Prompt Execution Sequence","text":"<p>Purpose: Given a high-level goal and a set of available prompts, generate the logical execution sequence required to accomplish that goal by chaining the prompts together.</p>"},{"location":"temp-prompts-organized/_templates/prompt-sequence-generator.templates/#inputs","title":"Inputs","text":"<ul> <li> <p>High-Level Goal: {{high_level_goal}}</p> <ul> <li>A clear, one-sentence description of the final outcome the user wants to achieve.</li> <li>Example: \"Create and document a pull request for the currently staged changes.\"</li> </ul> </li> <li> <p>Available Prompts: <pre><code>{{available_prompts}}\n</code></pre></p> <ul> <li>A list of candidate prompt names (e.g., from the output of <code>rank-root-prompts</code>).</li> <li>Example: ['pr-desc.md', 'commit-msg.md', 'changed-files.md', 'review.md', 'release-notes.md']</li> </ul> </li> <li> <p>Context (Optional): {{context}}</p> <ul> <li>Any additional context, such as the current state of the git repository or specific files of interest.</li> <li>Example: \"The user has already staged files using <code>git add</code>.\"</li> </ul> </li> </ul>"},{"location":"temp-prompts-organized/_templates/prompt-sequence-generator.templates/#instructions-for-the-ai","title":"Instructions for the AI","text":"<ol> <li> <p>Analyze the Goal: Deconstruct the <code>{{high_level_goal}}</code> into a series of logical steps required to get from the starting state to the final outcome.</p> </li> <li> <p>Map Prompts to Steps: For each logical step, identify the most suitable prompt from the <code>{{available_prompts}}</code> list that can perform that step.</p> <ul> <li>Consider the inputs and outputs of each prompt to determine dependencies. A prompt's input is often the output of a previous one.</li> </ul> </li> <li> <p>Establish Order: Arrange the selected prompts into a numbered sequence based on their dependencies. The sequence should represent a complete and logical workflow.</p> </li> <li> <p>Identify Gaps: If any necessary step in the workflow cannot be fulfilled by one of the available prompts, explicitly state what action or prompt is missing.</p> </li> </ol>"},{"location":"temp-prompts-organized/_templates/prompt-sequence-generator.templates/#required-output-format","title":"Required Output Format","text":"<p>Execution Sequence:</p> <ol> <li><code>[prompt_name_1.md]</code>: [Brief justification for why this prompt is first and what it accomplishes.]</li> <li><code>[prompt_name_2.md]</code>: [Brief justification for why this prompt is second, and how it uses the output of the previous step.]</li> <li>...</li> </ol> <p>Identified Gaps (if any):</p> <ul> <li>[Description of a missing step or prompt needed to complete the workflow.]</li> </ul>"},{"location":"temp-prompts-organized/_templates/system-level-instruction-editor.templates/","title":"System-level instruction editor","text":"<ul> <li>\"/instruction-file.md\"</li> <li>\"/planning-process.md\" next:</li> <li>\"/AGENTS.md\"</li> <li>\"/GEMINI.md\" tags:</li> <li>\"instructions\"</li> <li>\"editor\"</li> </ul>"},{"location":"temp-prompts-organized/_templates/system-level-instruction-editor.templates/#system-instruction-canonical-instruction-file-editor","title":"System Instruction: Canonical Instruction File Editor","text":"<p>Trigger: / <p>Purpose: &lt;1\u20132 lines describing the objective and outcome criteria.&gt;</p>"},{"location":"temp-prompts-organized/_templates/system-level-instruction-editor.templates/#inputs","title":"Inputs","text":"<ul> <li> <li> <li> <li> <li>"},{"location":"temp-prompts-organized/_templates/system-level-instruction-editor.templates/#steps","title":"Steps","text":"<ol> <li>Collect relevant data (). <li>Group by symptom/pattern; for each group, list 2\u20133 plausible causes.</li> <li>Propose disambiguators (instrumentation, targeted inputs, experiments).</li> <li>Sketch minimal fixes (patches/config toggles/rollbacks) with risk notes.</li> <li>Validate fixes (tests to run, monitors to watch, acceptance criteria).</li> <li>Roll out &amp; verify (staged rollout plan, owners, ETA).</li> <li> <p>Capture follow-ups (refactors, docs, guardrails).</p> </li> <li> <p>Deconstruct the request: Identify the user\u2019s intent and the minimal set of sections that should be added or updated.</p> </li> <li>Locate insertion points: Use semantic matching on headings and content to find the best-fit sections for the user\u2019s request. If no clear section exists, create a new minimal section with a logically consistent title.</li> <li>Apply minimal coherent change: Insert or modify content to satisfy the request while preserving tone, structure, and cross-references. Keep unrelated sections unchanged.</li> <li> <p>Run invariants:</p> </li> <li> <p>The entire file must be present (no placeholders, no truncation).</p> </li> <li>Markdown structure and formatting must remain valid.</li> <li>Internal references and links stay accurate.</li> <li> <p>Render in Canvas:</p> </li> <li> <p>If editing an existing file: open in Canvas and replace the full contents with the updated version.</p> </li> <li>If creating a new file: create it in Canvas and display the entire file.</li> <li>Variants (optional or on request): Generate <code>GEMINI.md</code> and/or <code>CLAUDE.md</code> from the updated <code>AGENTS.md</code> using only the Platform Substitution Rules. Render each variant\u2019s entire file in Canvas (one file per Canvas operation).</li> <li> <p>Size-limit fallback: If a size cap prevents full-file rendering in Canvas, output the entire file in chat, then append:</p> </li> <li> <p>\u201cNote: Full content was output in chat due to a size limit preventing Canvas rendering.\u201d</p> </li>"},{"location":"temp-prompts-organized/_templates/system-level-instruction-editor.templates/#output-format","title":"Output format","text":"<ul> <li>Table:  \u2192  \u2192  \u2192  \u2192 ."},{"location":"temp-prompts-organized/_templates/system-level-instruction-editor.templates/#example-rows","title":"Example rows","text":"<ul> <li>\"\" \u2192  \u2192  \u2192  \u2192 ."},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/","title":"ADR Drafting Assistant","text":"<p>Task: Given the following prompt, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the input text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/#inputs","title":"Inputs","text":"<ul> <li>Input prompt: \"You are a CLI assistant focused on helping contributors with the task: Draft an Architecture Decision Record with pros/cons.\"</li> <li>Workflow steps: Gather context from <code>README.md</code>, draft ADR (Context, Decision, Status, Consequences), synthesize insights.</li> <li>Output requirements: Concise summary of goal; workflow triggers/failing jobs/proposed fixes; documented evidence for maintainers' trust.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>architecture</li> <li>decision-making</li> <li>documentation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>ideation \u2192 early drafting, context gathering</li> <li>planning \u2192 structured output design</li> <li>implementation \u2192 actual code changes</li> <li>review \u2192 peer feedback or approval</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from input:</li> <li>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</li> <li>Determine the primary identifier:</li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li>De-duplicate.</li> <li>Determine categories:</li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li>Validate, sort deterministically, and de-dupe (\u22643).</li> <li>Determine lifecycle/stage (optional):</li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li>Omit if uncertain.</li> <li>Determine dependencies (optional):</li> <li>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</li> <li>Determine provided artifacts (optional):</li> <li>Short list (\u22643) of unlocked outputs.</li> <li>Compose summary:</li> <li>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/#assumptions-constraints","title":"ADR Drafting Assistant","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/#validation","title":"ADR Drafting Assistant","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__adr-new.architecture.refactor/#output-format-examples","title":"ADR Drafting Assistant","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__logging-strategy.architecture.refactor/","title":"Logging Strategy","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__logging-strategy.architecture.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: logging-strategy</li> <li>categories: [observability, operations, security]</li> <li>stage: design</li> <li>dependencies: []</li> <li>provided_artifacts: [\"diff hunks\", \"short guideline section\"]</li> <li>summary: Do add or remove diagnostic logs with privacy in mind to achieve structured observability.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__logging-strategy.architecture.refactor/#steps","title":"Steps","text":"<ol> <li>Identify hotspots from recent failures.</li> <li>Insert structured logs with contexts and correlation IDs.</li> <li>Remove noisy or PII-leaking logs.</li> <li>Document log levels and sampling in <code>OBSERVABILITY.md</code>.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__logging-strategy.architecture.refactor/#output-format","title":"Output format","text":"<ul> <li>Diff hunks and a short guideline section.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__modular-architecture.architecture.refactor/","title":"Modular Architecture","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__modular-architecture.architecture.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: modular-architecture  </li> <li>categories: architecture  </li> <li>stage: design  </li> <li>dependencies: [module-boundaries-identification]  </li> <li>provided-artifacts: [module-graph, dependency-diff, contract-test-plan]  </li> <li>summary: Do modularize services to achieve clear boundaries and testable interfaces.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__modular-architecture.architecture.refactor/#steps","title":"Steps","text":"<ol> <li>Identify services/modules and their public contracts.</li> <li>Flag cross-module imports and circular deps.</li> <li>Propose boundaries, facades, and internal folders.</li> <li>Add \"contract tests\" for public APIs.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__modular-architecture.architecture.refactor/#output-format","title":"Output format","text":"<ul> <li>Diagram-ready list of modules and edges, plus diffs.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__stack-evaluation.architecture.refactor/","title":"Stack Evaluation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__stack-evaluation.architecture.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: stack-evaluation</li> <li>categories: [evaluation, analysis, recommendation]</li> <li>stage: evaluation</li> <li>dependencies: []</li> <li>provided_artifacts: [\"decision memo\", \"next steps\"]</li> <li>summary: Evaluate language/framework choices to achieve informed stay-or-switch decisions.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__stack-evaluation.architecture.refactor/#steps","title":"Steps","text":"<ol> <li>Detect current stack and conventions.</li> <li>List tradeoffs: maturity, tooling, available examples, hiring, and AI training coverage.</li> <li>Recommend stay-or-switch with migration outline if switching.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__architecture__stack-evaluation.architecture.refactor/#output-format","title":"Output format","text":"<ul> <li>Decision memo with pros/cons and next steps.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/","title":"Action Diagram Metadata","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source file path: C:\\Users\\user\\projects\\prompts\\temp-prompts\\00-ideation\\design\\action-diagram.design.md</li> <li>Maximum placeholders allowed: 7</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>devops</li> <li>pipeline</li> <li>workflow</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>build \u2192 development stage</li> <li>deploy \u2192 production stage</li> <li>push \u2192 trigger stage</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#assumptions-constraints","title":"Action Diagram Metadata","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#validation","title":"Action Diagram Metadata","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#output-format-examples","title":"Action Diagram Metadata","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#metadata","title":"Action Diagram Metadata","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#nodes","title":"Action Diagram Metadata","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__action-diagram.design.refactor/#edges","title":"Action Diagram Metadata","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/","title":"API Contract Design","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#inputs","title":"Inputs","text":"<ul> <li>Feature or domain string (e.g., \"accounts &amp; auth\")</li> <li>Existing documentation and requirements</li> <li>Preference for OpenAPI 3.1 or GraphQL SDL</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>design</li> <li>specification</li> <li>contract generation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>design \u2192 initial creation of a contract from inputs</li> <li>specification \u2192 detailed schema definition</li> <li>implementation \u2192 code generation phase</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#assumptions-constraints","title":"API Contract Design","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#validation","title":"API Contract Design","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#output-format-examples","title":"API Contract Design","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__api-contract.design.refactor/#api-contract","title":"API Contract Design","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__design-assets.design.refactor/","title":"Design Assets","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__design-assets.design.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: design-assets</li> <li>Categories: design, brand assets</li> <li>Stage: generate</li> <li>Dependencies: brand-colors, brand-name</li> <li>Provided Artifacts: asset-checklist, generation-commands</li> <li>Summary: Generate favicons and small design snippets from product brand to achieve consistent visual identity.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__design-assets.design.refactor/#steps","title":"Steps","text":"<ol> <li>Extract brand colors and name from README or config.</li> <li>Produce favicon set, social preview, and basic UI tokens.</li> <li>Document asset locations and references.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__design-assets.design.refactor/#output-format","title":"Output format","text":"<ul> <li>Asset checklist and generation commands.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__ui-screenshots.design.refactor/","title":"UI Screenshots","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__ui-screenshots.design.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: ui-screenshots</li> <li>Categories: analysis, design, code-generation</li> <li>Stage: design-review</li> <li>Dependencies: []</li> <li>Provided Artifacts: issue-list, css-changes, component-updates</li> <li>Summary: Analyze UI screenshots to identify visual issues and generate actionable CSS or component changes</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__ui-screenshots.design.refactor/#steps","title":"Steps","text":"<ol> <li>Accept screenshot paths or links.</li> <li>Describe visual hierarchy, spacing, contrast, and alignment issues.</li> <li>Output concrete CSS or component changes.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__design__ui-screenshots.design.refactor/#output-format","title":"Output format","text":"<ul> <li>Issue list and code snippets to fix visuals.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/","title":"plan-delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: plan-delta  </li> <li>categories: Planning, Task Management, Graph Maintenance  </li> <li>lifecycle_stage: Mid-Project Adjustment  </li> <li>dependencies: task graph history, user delta input  </li> <li>provided_artifacts: </li> <li>Updated tasks file (valid JSON)  </li> <li>Delta document (Markdown with # Delta, ## Objectives, ## Constraints, ## Impacts, ## Decisions, ## Evidence)  </li> <li>Readiness report (plain text: READY | BLOCKED | DEPRECATED)  </li> <li>summary: Orchestrate mid-project planning deltas to preserve history and update task graph readiness.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#inputs","title":"Inputs","text":"<ul> <li>User-provided delta text with objectives, constraints, findings</li> <li>Selection mode: Continue, Hybrid Rebaseline, Full Rebaseline</li> <li>Existing tasks file (tasks.json or equivalent)</li> <li>Repository context path for task and plan files</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>Planning, Task Management, Graph Maintenance</p>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<p>Mid-project adjustment, delta update, planning revision, graph maintenance, readiness recalculation</p>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#assumptions-constraints","title":"plan-delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#validation","title":"plan-delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__plan-delta.requirements.refactor/#output-format-examples","title":"plan-delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/","title":"Planning Process","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: planning-process</li> <li>categories: </li> <li>planning</li> <li>task-management</li> <li>risk-assessment</li> <li>validation</li> <li>stage: planning</li> <li>dependencies: </li> <li>PLAN.md exists or is created</li> <li>Git repository with test runner available</li> <li>provided-artifacts: </li> <li>updated PLAN.md with structured sections and checklist</li> <li>summary: Draft, refine, and execute a feature plan with strict scope control and progress tracking.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: /planning-process</li> <li>Purpose: Draft, refine, and execute a feature plan with strict scope control and progress tracking.</li> <li>Output format: Update or create <code>PLAN.md</code> with the sections above. Include a checklist for Tasks. Keep lines under 100 chars.</li> <li>Examples:</li> <li>Input: \"Add OAuth login\"</li> <li>Output:<ul> <li>Goal: Let users sign in with Google.</li> <li>Tasks: [ ] add Google client, [ ] callback route, [ ] session, [ ] E2E test.</li> <li>Won't do: org SSO.</li> <li>Ideas for later: Apple login.</li> </ul> </li> <li>Notes:</li> <li>Planning only. No code edits.</li> <li>Assume a Git repo with test runner available.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>planning</li> <li>task-management</li> <li>risk-assessment</li> <li>validation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>planning \u2192 planning</li> <li>task management \u2192 planning or execution</li> <li>validation \u2192 validation or testing</li> <li>risk assessment \u2192 planning or review</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#assumptions-constraints","title":"Planning Process","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#validation","title":"Planning Process","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__planning-process.requirements.refactor/#output-format-examples","title":"Planning Process","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/","title":"PRD Generator","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source repository README (<code>README.md</code>) at root</li> <li>Visible link texts (only titles/texts, no external browsing)</li> <li>Example PRD structure and tone for formatting guidance</li> <li>Explicit trigger: <code>/prd-generate</code></li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Document Generation</li> <li>Content Extraction</li> <li>Validation &amp; Compliance</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Document Generation \u2192 execution</li> <li>Content Extraction \u2192 input-processing</li> <li>Validation &amp; Compliance \u2192 output-validation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/#assumptions-constraints","title":"PRD Generator","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/#validation","title":"PRD Generator","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__prd-generator.requirements.refactor/#output-format-examples","title":"PRD Generator","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/","title":"Scope Control","text":"<p>Task: Given the following requirements text, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the input text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source file path: C:\\Users\\user\\projects\\prompts\\temp-prompts\\00-ideation\\requirements\\scope-control.requirements.md</li> <li>Input content: # Scope Control\\n\\nTrigger: /scope-control\\n\\nPurpose: Enforce explicit scope boundaries and maintain \\\"won't do\\\" and \\\"ideas for later\\\" lists.\\n\\n## Steps\\n1. Parse <code>PLAN.md</code> or create it if absent.\\n2. For each open task, confirm linkage to the current milestone.\\n3. Detect off-scope items and move them to Won't do or Ideas for later with rationale.\\n4. Add a \\\"Scope Gate\\\" checklist before merging.\\n\\n## Output format\\n- Patch to <code>PLAN.md</code> showing changes in sections and checklists.\\n\\n## Examples\\nInput: off-scope request \\\"Add email templates\\\" during OAuth feature.\\nOutput: Move to Ideas for later with reason \\\"Not needed for OAuth MVP\\\".\\n\\n## Notes\\n- Never add new scope without recording tradeoffs.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Won't do</li> <li>Ideas for later</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>review</li> <li>gatekeeping</li> <li>validation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from input text  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/#assumptions-constraints","title":"Scope Control","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/#validation","title":"Scope Control","text":""},{"location":"temp-prompts-organized/prompt-front-matter/00-ideation__requirements__scope-control.requirements.refactor/#output-format-examples","title":"Scope Control","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__devops-automation.ci-setup.refactor/","title":"DevOps Automation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__devops-automation.ci-setup.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: devops-automation</li> <li>categories:</li> <li>infrastructure</li> <li>ci-cd</li> <li>automation</li> <li>stage: setup</li> <li>dependencies: []</li> <li>provided_artifacts:</li> <li>infra plan with checkpoints and secrets placeholders</li> <li>summary: Do configure infrastructure and CI/CD to achieve automated deployment pipelines.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__devops-automation.ci-setup.refactor/#steps","title":"Steps","text":"<ol> <li>Inspect repo for IaC or deploy scripts.</li> <li>Generate Terraform or Docker Compose templates if missing.</li> <li>Propose CI workflows for tests, builds, and deploys.</li> <li>Provide runbooks for rollback.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__devops-automation.ci-setup.refactor/#output-format","title":"Output format","text":"<ul> <li>Infra plan with checkpoints and secrets placeholders.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/","title":"Env Setup","text":"<p>Task: Given the following content, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source file path: C:\\Users\\user\\projects\\prompts\\temp-prompts\\10-scaffold\\ci-setup\\env-setup.ci-setup.md</li> <li>Raw content: # Env Setup\\n\\nTrigger: /env-setup\\n\\nPurpose: Create .env.example, runtime schema validation, and per-env overrides.\\n\\nSteps:\\n1. Scan repo for <code>process.env</code> usage and collected keys.\\n2. Emit <code>.env.example</code> with comments and safe defaults.\\n3. Add runtime validation via <code>zod</code> or <code>envsafe</code> in <code>packages/config</code>.\\n4. Document <code>development</code>, <code>staging</code>, <code>production</code> precedence and loading order.\\n\\nOutput format: <code>.env.example</code> content block and <code>config/env.ts</code> snippet.\\n\\nExamples: <code>/env-setup</code>.\\n\\nNotes: Do not include real credentials. Enforce <code>STRICT_ENV=true</code> in CI.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>environment</li> <li>configuration</li> <li>infrastructure</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>setup \u2192 init</li> <li>configure \u2192 config</li> <li>validate \u2192 validate</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the content  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/#assumptions-constraints","title":"Env Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/#validation","title":"Env Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__env-setup.ci-setup.refactor/#output-format-examples","title":"Env Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/","title":"Monitoring Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: monitoring-setup</li> <li>categories: </li> <li>observability</li> <li>infrastructure</li> <li>setup</li> <li>lifecycle_stage: setup</li> <li>dependencies: []</li> <li>provided_artifacts: </li> <li>instrumentation checklist</li> <li>dashboard links/paths</li> <li>summary: Do instrument web and api for request latency, error rate, throughput, and core domain metrics to achieve observability per domain.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#inputs","title":"Inputs","text":"<ul> <li>trigger: /monitoring-setup</li> <li>purpose: Bootstrap logs, metrics, and traces with dashboards per domain.</li> <li>steps:</li> <li>Choose stack: OpenTelemetry \u2192 Prometheus/Grafana, or vendor.</li> <li>Instrument web and api for request latency, error rate, throughput, and core domain metrics.</li> <li>Provide default dashboards JSON and alert examples.</li> <li>output_format: instrumentation checklist and dashboard links/paths</li> <li>examples: /monitoring-setup</li> <li>notes: Avoid high\u2011cardinality labels. Sample traces selectively in prod.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>observability</li> <li>infrastructure</li> <li>setup</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>setup \u2192 bootstrap, initialize, configure, instrument</li> <li>deploy \u2192 run, activate, install</li> <li>operate \u2192 monitor, maintain, scale</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#assumptions-constraints","title":"Monitoring Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#validation","title":"Monitoring Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__monitoring-setup.ci-setup.refactor/#output-format-examples","title":"Monitoring Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/","title":"Secrets Manager Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/secrets-manager-setup &lt;provider&gt;</code></li> <li>Purpose: Provision a secrets store and map application variables to it.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>provision, configuration, security</p>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<p>setup \u2192 configuration configuration \u2192 setup security \u2192 audit  </p>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.  </p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.  </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).  </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.  </p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.  </p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#assumptions-constraints","title":"Secrets Manager Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#validation","title":"Secrets Manager Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#output-format-examples","title":"Secrets Manager Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__secrets-manager-setup.ci-setup.refactor/#secrets-manager-setup_1","title":"Secrets Manager Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/","title":"SLO Setup","text":"<p>Task: Given the following prompt text, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original body.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/#inputs","title":"Inputs","text":"<ul> <li>Identifier (trigger): <code>/slo-setup</code></li> <li>Purpose: Define Service Level Objectives, burn alerts, and runbooks.</li> <li>Steps:</li> <li>Choose SLI/metrics per user journey. Define SLO targets and error budgets.</li> <li>Create burn alerts (fast/slow) and link to runbooks.</li> <li>Add <code>SLO.md</code> with rationale and review cadence.</li> <li>Output format: SLO table and alert rules snippet.</li> <li>Examples: <code>/slo-setup</code>.</li> <li>Notes: Tie SLOs to deploy gates and incident severity.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>slo</li> <li>alerts</li> <li>runbooks</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>setup \u2192 setup phase of service configuration</li> <li>define \u2192 initial creation or definition</li> <li>create \u2192 action for establishing new components</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt text:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/#assumptions-constraints","title":"SLO Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/#validation","title":"SLO Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__ci-setup__slo-setup.ci-setup.refactor/#output-format-examples","title":"SLO Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: version-control-guide</li> <li>Categories: development practice, workflow guide, code hygiene</li> <li>Stage: implementation</li> <li>Dependencies: none</li> <li>Provided Artifacts: checklist, suggested commands</li> <li>Summary: Enforce clean incremental commits and clean-room re-implementation to ensure reproducible and safe changes.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: /version-control-guide</li> <li>Purpose: Enforce clean incremental commits and clean-room re-implementation when finalizing.</li> <li>Output format: Checklist plus suggested commands for the current repo state.</li> <li>Examples: Convert messy spike into three commits: setup, feature, tests.</li> <li>Notes: Never modify remote branches without confirmation.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>development practice</li> <li>workflow guide</li> <li>code hygiene</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>implementation</li> <li>commit workflow</li> <li>development lifecycle</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#assumptions-constraints","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#validation","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#output-format-examples","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#version-control-guide_1","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#steps","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#output-format","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#examples","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__conventions__version-control-guide.conventions.refactor/#notes","title":"Version Control Guide","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__auth.scaffold.refactor/","title":"Auth Scaffold","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__auth.scaffold.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: auth-scaffold-provider</li> <li>Categories: Scaffold, Auth, Security</li> <li>Stage: initialization</li> <li>Dependencies: []</li> <li>Provided Artifacts: route list, config keys, mitigations table</li> <li>Summary: Scaffold auth flows to achieve secure session management with threat modeling.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__auth.scaffold.refactor/#auth-scaffold_1","title":"Auth Scaffold","text":"<p>Trigger: /auth-scaffold  <p>Purpose: Scaffold auth flows, routes, storage, and a basic threat model.</p> <p>Steps:</p> <ol> <li>Select provider (OAuth/OIDC/email) and persistence for sessions.</li> <li>Generate routes: login, callback, logout, session refresh.</li> <li>Add CSRF, state, PKCE where applicable. Include secure cookie flags.</li> <li>Document threat model: replay, fixation, token leakage, SSRF on callbacks.</li> <li>Wire to frontend with protected routes and user context.</li> </ol> <p>Output format: route list, config keys, and mitigations table.</p> <p>Examples: <code>/auth-scaffold oauth</code> \u2192 NextAuth/Passport/Custom adapter plan.</p> <p>Notes: Never print real secrets. Use placeholders in <code>.env.example</code>.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/","title":"DB Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: db-bootstrap  </li> <li>Categories: </li> <li>database setup</li> <li>migration configuration</li> <li>local development environment</li> <li>Lifecycle Stage: setup  </li> <li>Dependencies: none  </li> <li>Provided Artifacts: </li> <li>migration plan list</li> <li>db/compose.yaml (skip for sqlite)</li> <li>prisma/schema.prisma or drizzle/*.ts (baseline tables: users, sessions, audit_log)</li> <li>pnpm db:migrate, db:reset, db:seed scripts</li> <li>.env.example with DATABASE_URL and test connection script  </li> <li>Summary: Do db-bootstrap with a database to initialize migrations, compose files, and seed data.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#inputs","title":"Inputs","text":"<ul> <li>Database type (e.g., postgres, mysql, sqlite)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>database setup</li> <li>migration configuration</li> <li>local development environment</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>setup \u2192 initial configuration phase  </li> <li>build \u2192 after schema is defined  </li> <li>deploy \u2192 post-migration to production  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#assumptions-constraints","title":"DB Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#validation","title":"DB Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#output-format-examples","title":"DB Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__db-bootstrap.scaffold.refactor/#db-bootstrap_1","title":"DB Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__fullstack.scaffold.refactor/","title":"Scaffold Full\u2011Stack App","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__fullstack.scaffold.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: scaffold-fullstack</li> <li>Categories: app, api, testing, ci, infrastructure</li> <li>Stage: setup</li> <li>Dependencies: none</li> <li>Provided Artifacts: repo-tree, next-steps, ci-seeds, docs</li> <li>Summary: Scaffold a minimal monorepo with app, API, tests, and CI seeds to achieve production-ready structure.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__fullstack.scaffold.refactor/#scaffold-fullstack-app_1","title":"Scaffold Full\u2011Stack App","text":"<p>Trigger: /scaffold-fullstack  <p>Purpose: Create a minimal, production-ready monorepo template with app, API, tests, CI seeds, and infra stubs.</p> <p>Steps:</p> <ol> <li>Read repository context: <code>git rev-parse --is-inside-work-tree</code>.</li> <li>If repo is empty, initialize: <code>git init -b main</code> and create <code>.editorconfig</code>, <code>.gitignore</code>, <code>README.md</code>.</li> <li>For <code>&lt;stack&gt;</code> derive presets (examples):</li> <li><code>ts-next-express-pg</code>: Next.js app, Express API, Prisma + PostgreSQL, Playwright, pnpm workspaces.</li> <li><code>ts-vite-fastify-sqlite</code>: Vite + React app, Fastify API, Drizzle + SQLite.</li> <li>Create workspace layout:</li> <li>root: <code>package.json</code> with <code>pnpm</code> workspaces, <code>tsconfig.base.json</code>, <code>eslint</code>, <code>prettier</code>.</li> <li>apps/web, apps/api, packages/ui, packages/config.</li> <li>Add scripts:</li> <li>root: <code>dev</code>, <code>build</code>, <code>lint</code>, <code>typecheck</code>, <code>test</code>, <code>e2e</code>, <code>format</code>.</li> <li>web: Next/Vite scripts. api: dev with ts-node or tsx.</li> <li>Seed CI files: <code>.github/workflows/ci.yml</code> with jobs [lint, typecheck, test, build, e2e] and artifact uploads.</li> <li>Add example routes:</li> <li>web: <code>/health</code> page. api: <code>GET /health</code> returning <code>{ ok: true }</code>.</li> <li>Write docs to <code>README.md</code>: how to run dev, test, build, and env variables.</li> <li>Stage files, but do not commit. Output a tree and next commands.</li> </ol> <p>Output format:</p> <ul> <li>Title line: <code>Scaffold created: &lt;stack&gt;</code></li> <li>Sections: <code>Repo Tree</code>, <code>Next Steps</code>, <code>CI Seeds</code>.</li> <li>Include a fenced code block of the <code>tree</code> and sample scripts.</li> </ul> <p>Examples:</p> <ul> <li>Input: <code>/scaffold-fullstack ts-next-express-pg</code> Output: Summary + tree with <code>apps/web</code>, <code>apps/api</code>, <code>packages/ui</code>.</li> <li>Input: <code>/scaffold-fullstack ts-vite-fastify-sqlite</code> Output: Summary + tree + Drizzle config.</li> </ul> <p>Notes:</p> <ul> <li>Assume pnpm and Node 20+. Do not run package installs automatically; propose commands instead.</li> <li>Respect existing files; avoid overwriting without explicit confirmation.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/","title":"IaC Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: iac-bootstrap</li> <li>Categories: </li> <li>IaC</li> <li>CI/CD</li> <li>Cloud Automation</li> <li>Lifecycle Stage: bootstrap</li> <li>Dependencies: none</li> <li>Provided Artifacts: </li> <li>stack diagram</li> <li>file list</li> <li>CI snippets</li> <li>Summary: Do create minimal Infrastructure-as-Code for chosen platform plus CI hooks to achieve rapid deployment readiness.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#inputs","title":"Inputs","text":"<ul> <li>Platform: aws | gcp | azure | fly | render</li> <li>IaC Tool: Terraform | Pulumi</li> <li>Environment Stages: preview, staging, prod</li> <li>Output Format: stack diagram, file list, CI snippets</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>IaC</li> <li>CI/CD</li> <li>Cloud Automation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>bootstrap \u2192 early setup/init phase</li> <li>create \u2192 initial configuration</li> <li>define \u2192 structural setup</li> <li>add \u2192 extend with hooks and policies</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#assumptions-constraints","title":"IaC Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#validation","title":"IaC Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#output-format-examples","title":"IaC Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/10-scaffold__scaffold__iac-bootstrap.scaffold.refactor/#iac-bootstrap_1","title":"IaC Bootstrap","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/","title":"Commit Message Assistant","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: commit</li> <li>categories: fix, feat, chore, docs, refactor</li> <li>lifecycle_stage: draft</li> <li>dependencies: git status --short, git diff --staged</li> <li>provided_artifacts: conventional commit message (subject + body)</li> <li>summary: Generate a conventional, review-ready commit message from staged changes.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#inputs","title":"Inputs","text":"<ul> <li>Requires staged changes to be present.</li> <li>Must parse staged diff for change type and scope.</li> <li>Needs access to current repository state via git commands.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>feat, fix, chore, docs, refactor</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<p>draft \u2192 generation of output based on input state review \u2192 post-generation feedback or approval finalize \u2192 final commit execution  </p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#assumptions-constraints","title":"Commit Message Assistant","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#validation","title":"Commit Message Assistant","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__commit.impl.refactor/#output-format-examples","title":"Commit Message Assistant","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/","title":"Content Generation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: content-generation</li> <li>category: documentation</li> <li>category: marketing</li> <li>category: blog</li> <li>lifecycle-stage: implementation</li> <li>dependencies: [readme, changelog]</li> <li>provided-artifacts: [markdown-docs, frontmatter, section-headings]</li> <li>summary: Draft documentation, blog posts, or marketing copy aligned with codebase to achieve consistent, on-brand content.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#inputs","title":"Inputs","text":"<ul> <li>source-repo-readme</li> <li>recent-changelog-or-commits</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>documentation marketing blog implementation generation analysis deployment</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>implementation \u2192 steps involving proposal and generation after input reading</li> <li>generation \u2192 output creation from structure or outline</li> <li>analysis \u2192 reading inputs, parsing changes</li> <li>deployment \u2192 final delivery of artifacts</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#assumptions-constraints","title":"Content Generation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#validation","title":"Content Generation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#output-format-examples","title":"Content Generation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#content-generation_1","title":"Content Generation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#steps","title":"Content Generation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__content-generation.impl.refactor/#output-format","title":"Content Generation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__feature-flags.impl.refactor/","title":"Feature Flags","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__feature-flags.impl.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: feature-flags  </li> <li>Categories: Implementation, Configuration, Security  </li> <li>Stage: Implementation  </li> <li>Dependencies: []  </li> <li>Provided Artifacts: SDK snippet, example usage, guardrail checklist  </li> <li>Summary: Do integrate feature flags to achieve secure, typed flag management with enforcement and monitoring.</li> </ul> <p>Steps:</p> <ol> <li>Select provider (LaunchDarkly, Unleash, Flagsmith, custom).</li> <li>Add SDK init in web/api with bootstrap values and offline mode for dev.</li> <li>Define flag naming and ownership. Add kill\u2011switch pattern and monitoring.</li> </ol> <p>Output format: SDK snippet, example usage, and guardrail checklist.</p> <p>Examples: <code>/feature-flags launchdarkly</code>.</p> <p>Notes: Ensure flags are typed and expire with tickets.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/","title":"Fix","text":"<p>Task: Given the following prompt content, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#inputs","title":"Inputs","text":"<ul> <li>Bug summary:  <li>Recent commits: <code>git log --pretty='- %h %s' -n 20</code></li> <li>Repository context: <code>git ls-files | sed -n '1,400p'</code></li>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>code fix</li> <li>patch generation</li> <li>diff output</li> <li>implementation</li> <li>bug resolution</li> <li>assistant response</li> <li>regression test</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>\"fix\" \u2192 implementation</li> <li>\"propose a minimal fix\" \u2192 implementation</li> <li>\"unified diff patches\" \u2192 patch generation</li> <li>\"actionable recommendations\" \u2192 code fix</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#assumptions-constraints","title":"Fix","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#validation","title":"Fix","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#output-format-examples","title":"Fix","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__fix.impl.refactor/#fix_1","title":"Fix","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__generate.impl.refactor/","title":"Generate Unit Tests","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__generate.impl.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: $1  </li> <li>Categories: $2  </li> <li>Lifecycle Stage: $3 (optional)  </li> <li>Dependencies: $4 (optional)  </li> <li>Provided Artifacts: $5 (optional)  </li> <li>Summary: $6  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__generate.impl.refactor/#body","title":"Body","text":"<p>$7</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__prototype-feature.impl.refactor/","title":"Prototype Feature","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__prototype-feature.impl.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: prototype-feature</li> <li>categories: implementation, setup, testing</li> <li>lifecycle_stage: development</li> <li>dependencies: []</li> <li>provided_artifacts: </li> <li>scaffold plan</li> <li>migration notes</li> <li>summary: Do prototype feature to achieve standalone validation before merging into main.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__prototype-feature.impl.refactor/#steps","title":"Steps","text":"<ol> <li>Create a scratch directory name suggestion and scaffolding commands.</li> <li>Generate minimal app with only the feature and hardcoded data.</li> <li>Add E2E test covering the prototype flow.</li> <li>When validated, list the minimal patches to port back.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__prototype-feature.impl.refactor/#output-format","title":"Output format","text":"<ul> <li>Scaffold plan and migration notes.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/","title":"Implementation Task Template","text":"<p>Task: Given $1, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source prompt: $1</li> <li>Maximum placeholders allowed: 7</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>analysis</li> <li>design</li> <li>development</li> <li>deployment</li> <li>documentation</li> <li>testing</li> <li>maintenance</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>\"Gather context\" \u2192 analysis  </li> <li>\"Find and group\" \u2192 analysis  </li> <li>\"Synthesize insights\" \u2192 synthesis  </li> <li>\"Output structured result\" \u2192 delivery  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/#assumptions-constraints","title":"Implementation Task Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/#validation","title":"Implementation Task Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__todos.impl.refactor/#output-format-examples","title":"Implementation Task Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__voice-input.impl.refactor/","title":"Voice Input","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__voice-input.impl.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: voice-input</li> <li>categories: input-processing, transcription, prompt-conversion</li> <li>lifecycle-stage: processing</li> <li>dependencies: []</li> <li>provided-artifacts: cleaned-command-list</li> <li>summary: Convert voice transcripts into structured commands for execution.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__voice-input.impl.refactor/#steps","title":"Steps","text":"<ol> <li>Accept transcript text.</li> <li>Normalize to tasks or commands for other prompts.</li> <li>Preserve speaker intents and important entities.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__impl__voice-input.impl.refactor/#output-format","title":"Output format","text":"<ul> <li>Cleaned command list ready to execute.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__audit.review.refactor/","title":"Audit","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__audit.review.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: $1  </li> <li>Categories: $2  </li> <li>Lifecycle Stage: $3  </li> <li>Dependencies: $4  </li> <li>Provided Artifacts: $5  </li> <li>Summary: $6  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__audit.review.refactor/#body","title":"Body","text":"<p>$7</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/","title":"Conflict Resolver","text":"<p>Task: Given the following source text, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then source text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source trigger path: <code>/cross-check</code></li> <li>Input format: list of SourceIDs or URLs with short findings</li> <li>Output format:   <pre><code>### Contradictions\n- {S2 vs S5 \u2192 rationale}\n\n### Prevails\n- {SourceID} because {reason}\n</code></pre></li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>conflict-resolution</li> <li>source-evaluation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>implementation</li> <li>decision-making</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the source text:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#assumptions-constraints","title":"Conflict Resolver","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#validation","title":"Conflict Resolver","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#output-format-examples","title":"Conflict Resolver","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__cross-check.review.refactor/#conflict-resolver_1","title":"Conflict Resolver","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/","title":"Evidence Logger","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: evidence-capture</li> <li>Categories: Logging, Metadata Capture, Evidence Validation</li> <li>Stage: Capture</li> <li>Dependencies: []</li> <li>Provided Artifacts: Evidence Log Table</li> <li>Summary: Do capture sources for a claim to achieve a structured, verifiable evidence log.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#inputs","title":"Inputs","text":"<ul> <li>Claim text (required)</li> <li>Optional URLs (preferred from official sources)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Logging</li> <li>Metadata Capture</li> <li>Evidence Validation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Capture \u2192 Initial gathering of evidence from sources</li> <li>Validate \u2192 Post-collection review and confidence scoring</li> <li>Output \u2192 Final structured delivery</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#assumptions-constraints","title":"Evidence Logger","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#validation","title":"Evidence Logger","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__evidence-capture.review.refactor/#output-format-examples","title":"Evidence Logger","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/","title":"pr-desc","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/#inputs","title":"Inputs","text":"<ul> <li>Base branch: origin/main</li> <li>User context:  <li>Changed files: from <code>git diff --name-status origin/main...HEAD</code></li> <li>Diff stats: from <code>git diff --shortstat origin/main...HEAD</code></li>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>drafting</li> <li>validation</li> <li>test coverage</li> <li>risk assessment</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>implementation</li> <li>development</li> <li>review</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/#assumptions-constraints","title":"pr-desc","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/#validation","title":"pr-desc","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__pr-desc.review.refactor/#output-format-examples","title":"pr-desc","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/","title":"Review Branch","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/review-branch</code></li> <li>Purpose: Provide a high-level review of the current branch versus origin/main.</li> <li>Input format: None (command runs without arguments)</li> <li>Output format: Structured report with goals, scope, risky areas, test impact, and coverage gaps.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>code-review</li> <li>analysis</li> <li>assessment</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>review</li> <li>assess</li> <li>analyze</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.  </p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.    \u2192 Identifier: <code>review-branch</code> </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: <code>code-review</code>, <code>analysis</code>, <code>assessment</code> </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.    \u2192 Stage: <code>review</code> </p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: none explicitly stated; inferred as git environment required.  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: structured report, goals overview, risk assessment, test coverage gaps  </p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo review current branch vs origin/main to achieve a high-level assessment of changes.\u201d  </p> </li> <li> <p>Produce metadata in the requested format  </p> </li> <li> <p>Default to human-readable serialization; honor any requested alternative.  </p> </li> <li> <p>Reconcile if input already contains metadata  </p> </li> <li>Merge: explicit inputs &gt; existing &gt; inferred.  </li> <li>Validate lists; move unknowns to an extension field if needed.  </li> <li>Remove empty keys.  </li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Emit exactly one document: metadata, a single blank line, then $1.</li> <li>Limit distinct placeholders to \u2264 7.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches a normalized id pattern \u2192 \u2705 <code>review-branch</code></li> <li>Categories non-empty and drawn from canonical taxonomy (\u22643) \u2192 \u2705</li> <li>Stage, if present, is one of the allowed stages implied by stage hints \u2192 \u2705 (<code>review</code>)</li> <li>Dependencies, if present, are id-shaped (\u22645) \u2192 \u2705 (none)</li> <li>Summary \u2264120 chars; punctuation coherent \u2192 \u2705</li> <li>Body text $1 is not altered.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Identifier: review-branch  </li> <li>Category: code-review  </li> <li>Stage: review  </li> <li>Dependencies: []  </li> <li>Artifacts: [\"structured report\", \"goals overview\", \"risk assessment\"]  </li> <li>Summary: \"Do review current branch vs origin/main to achieve a high-level assessment of changes.\"</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review-branch.review.refactor/#review-branch_1","title":"Review Branch","text":"<p>Trigger: /review-branch</p> <p>Purpose: Provide a high-level review of the current branch versus origin/main.</p> <p>You are a CLI assistant focused on helping contributors with the task: Provide a high\u2011level review of the current branch vs origin/main.</p> <ol> <li>Gather context by running <code>git diff --stat origin/main...HEAD</code> for the diff stats; running <code>git diff origin/main...HEAD | sed -n '1,200p'</code> for the ```diff.</li> <li>Provide a reviewer\u2011friendly overview: goals, scope, risky areas, test impact.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Provide a high\u2011level review of the current branch vs origin/main.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>Call out test coverage gaps and validation steps.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/","title":"Review","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: review-code</li> <li>Categories: </li> <li>code-review</li> <li>quality-assurance</li> <li>security</li> <li>readability</li> <li>Lifecycle Stage: analysis</li> <li>Dependencies: </li> <li>rg</li> <li>grep</li> <li>Provided Artifacts: </li> <li>summary</li> <li>patches</li> <li>insights</li> <li>Summary: Review code matching a pattern to deliver actionable feedback on correctness, complexity, readability, security, and performance.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#inputs","title":"Inputs","text":"<ul> <li><code>pattern</code>: A filename or regex pattern to search for in the codebase.</li> <li><code>context</code>: Output from <code>rg</code> or <code>grep</code> to provide context for review.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>code-review</li> <li>quality-assurance</li> <li>security</li> <li>readability</li> <li>performance</li> <li>testing</li> <li>deployment</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis \u2192 code inspection, review, feedback generation</li> <li>development \u2192 writing new code or modifying existing</li> <li>maintenance \u2192 fixing bugs, refactoring</li> <li>security \u2192 vulnerability scanning, secure coding practices</li> <li>deployment \u2192 releasing to production</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#assumptions-constraints","title":"Review","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#validation","title":"Review","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#output-format-examples","title":"Review","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__review.review.refactor/#review_1","title":"Review","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/","title":"todo-summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/#inputs","title":"Inputs","text":"<ul> <li>Command: <code>rg -n \"TODO|FIXME|XXX\" -g '!node_modules' . || grep -RInE 'TODO|FIXME|XXX' .</code></li> <li>Input arguments: none</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>codebase analysis</li> <li>triage planning</li> <li>contributor guidance</li> <li>documentation review</li> <li>dependency resolution</li> <li>security audit</li> <li>performance optimization</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>execution</li> <li>analysis</li> <li>reporting</li> <li>planning</li> <li>onboarding</li> <li>maintenance</li> <li>development</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/#assumptions-constraints","title":"todo-summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/#validation","title":"todo-summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__todo-report.review.refactor/#output-format-examples","title":"todo-summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/","title":"Review Tsconfig for Correctness and DX","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/#inputs","title":"Inputs","text":"<ul> <li>Task: Review tsconfig.json for correctness and developer experience (DX).</li> <li>Target file: <code>tsconfig.json</code>.</li> <li>Desired output format: structured report with summary, prioritized recommendations, and evidence.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>validation</li> <li>configuration</li> <li>dx</li> <li>build</li> <li>strictness</li> <li>paths</li> <li>incremental</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>\"Review\" \u2192 validation</li> <li>\"Recommendations\" \u2192 configuration or improvement</li> <li>\"DX\" \u2192 dx</li> <li>\"Inspect\" \u2192 validation</li> <li>\"Synthesize\" \u2192 assessment</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li>Titles/headings: \"Review tsconfig for correctness and DX\", \"Provide recommendations\", \"Synthesize insights\".</li> <li>Imperative verbs: gather, provide, synthesize.</li> <li> <p>Explicit tags: <code>tsconfig.json</code>, strictness, paths, incremental builds.</p> </li> <li> <p>Determine primary identifier:</p> </li> <li>Input explicitly mentions <code>tsconfig.json</code>.</li> <li> <p>Normalized to: tsconfig-json (kebab-case, lowercase, length-capped).</p> </li> <li> <p>Determine categories:</p> </li> <li>Explicitly mentioned: review, configuration, DX.</li> <li>Inferred from verbs and context: strictness, paths, incremental builds \u2192 mapped to configuration or dx.</li> <li> <p>Final list: validation, configuration, dx (from canonical taxonomy; all valid and \u22643).</p> </li> <li> <p>Determine lifecycle/stage:</p> </li> <li>\"Review\" and \"inspect\" imply a validation stage.</li> <li> <p>Stage selected: validation.</p> </li> <li> <p>Determine dependencies:</p> </li> <li> <p>No prerequisites are mentioned \u2192 none.</p> </li> <li> <p>Determine provided artifacts:</p> </li> <li>Structured report</li> <li>Prioritized recommendations with rationale</li> <li> <p>Evidence used to support conclusions</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>\"Review tsconfig for correctness and developer experience to ensure build reliability and usability.\"</p> </li> <li> <p>Produce metadata in structured format:</p> </li> <li>Identifier: tsconfig-json</li> <li>Categories: validation, configuration, dx</li> <li>Stage: validation</li> <li>Dependencies: []</li> <li>Artifacts: [\"structured report\", \"prioritized recommendations with rationale\", \"evidence summary\"]</li> <li> <p>Summary: \"Review tsconfig for correctness and developer experience to ensure build reliability and usability.\"</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No explicit metadata in input \u2192 use inferred values.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Output must contain exactly one document: metadata block, blank line, then original prompt body.</li> <li>Maximum of 3 distinct placeholders used (identifier, categories, stage).</li> <li>All category names must be from canonical taxonomy.</li> <li>Summary must be \u2264120 characters and coherent.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches pattern: lowercase kebab-case, starts with letter \u2192 valid.</li> <li>Categories non-empty, drawn from canonical list, \u22643 \u2192 valid.</li> <li>Stage is one of the allowed stages (validation) \u2192 valid.</li> <li>Dependencies are empty \u2192 valid.</li> <li>Artifacts are short-listed and relevant \u2192 valid.</li> <li>Summary length: 124 chars \u2192 within limit; punctuation coherent.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__review__tsconfig-review.review.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Identifier: tsconfig-json  </li> <li>Categories: validation, configuration, dx  </li> <li>Stage: validation  </li> <li>Dependencies: []  </li> <li>Artifacts: [\"structured report\", \"prioritized recommendations with rationale\", \"evidence summary\"]  </li> <li>Summary: \"Review tsconfig for correctness and developer experience to ensure build reliability and usability.\"</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/","title":"blame-summary","text":"<p>Task: Given a source file path, produce a summary of authorship hotspots using git blame to identify top contributors and suggest reviewers.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/#inputs","title":"Inputs","text":"<ul> <li><code>file_path</code>: Path to the target source file (e.g., src/components/Button.tsx)</li> <li><code>args</code>: Arguments passed to <code>git blame</code> command (e.g., <code>--line-porcelain</code>)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>ownership-hotspots</li> <li>reviewer-suggestions</li> <li>code-analysis</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis</li> <li>inspection</li> <li>synthesis</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the input</li> <li>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</li> <li>Determine the primary identifier</li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li>De-duplicate.</li> <li>Determine categories</li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li>Validate, sort deterministically, and de-dupe (\u22643).</li> <li>Determine lifecycle/stage (optional)</li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li>Omit if uncertain.</li> <li>Determine dependencies (optional)</li> <li>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</li> <li>Determine provided artifacts (optional)</li> <li>Short list (\u22643) of unlocked outputs.</li> <li>Compose summary</li> <li>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/#assumptions-constraints","title":"blame-summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/#validation","title":"blame-summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__blame-summary.spec-orient.refactor/#output-format-examples","title":"blame-summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/","title":"Summarize Changed Files","text":"<p>Task: Given the following specification, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original body.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source: CLI assistant task to summarize changed files between HEAD and origin/main.</li> <li>Goal: Provide maintainers with a trustworthy, structured report of changes.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>changed-file-summary</li> <li>git-diff-analysis</li> <li>risky-change-alert</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis</li> <li>inspection</li> <li>routine-review</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the specification  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/#assumptions-constraints","title":"Summarize Changed Files","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/#validation","title":"Summarize Changed Files","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__changed-files.spec-orient.refactor/#output-format-examples","title":"Summarize Changed Files","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/","title":"Explain Code","text":"<p>Task: Given the following specification, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original content.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/#inputs","title":"Inputs","text":"<ul> <li>File path: C:\\Users\\user\\projects\\prompts\\temp-prompts\\20-implementation\\spec-orient\\explain-code.spec-orient.md</li> <li>Trigger: /explain-code</li> <li>Action: explain code</li> <li>Object: file or diff</li> <li>Output format: annotated markdown with code fences and callouts</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>code explanation</li> <li>analysis</li> <li>risk assessment</li> <li>documentation</li> <li>debugging</li> <li>implementation</li> <li>review</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>explain \u2192 implementation</li> <li>analyze \u2192 analysis</li> <li>highlight risks \u2192 review or risk assessment</li> <li>provide output \u2192 execution or delivery</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the specification:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.    \u2192 Identifier: explain-code</p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: code explanation, analysis, risk assessment</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>Omit if uncertain.    \u2192 Stage: implementation</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: none</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: annotated markdown, code fences, callouts</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/#assumptions-constraints","title":"Explain Code","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/#validation","title":"Explain Code","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-code.spec-orient.refactor/#output-format-examples","title":"Explain Code","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/","title":"Explain Symbol Definition and Usage","text":"<p>Task: Given $1, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/#inputs","title":"Inputs","text":"<ul> <li>Input symbol (e.g., \"HttpClient\")</li> <li>Search command pattern: <code>rg -n {{args}} . || grep -RIn {{args}} .</code></li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>explanation</li> <li>analysis</li> <li>documentation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>diagnostic</li> <li>inspection</li> <li>research</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/#assumptions-constraints","title":"Explain Symbol Definition and Usage","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/#validation","title":"Explain Symbol Definition and Usage","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__explain-symbol.spec-orient.refactor/#output-format-examples","title":"Explain Symbol Definition and Usage","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/","title":"Recursive Text Search with ripgrep/grep Injection","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/#inputs","title":"Inputs","text":"<ul> <li>Input text to search for (e.g., <code>HttpClient</code>)</li> <li>Target directory (default: current project root)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>search</li> <li>analysis</li> <li>insight</li> <li>debugging</li> <li>documentation</li> <li>configuration</li> <li>automation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>search \u2192 investigation or debugging</li> <li>analysis \u2192 analysis or insight generation</li> <li>insight \u2192 synthesis or reporting</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/#algorithm","title":"Algorithm","text":"<ol> <li> <p>Extract signals from the prompt Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier Prefer explicit input; otherwise infer from main action + object.    Normalized to: <code>recursive-text-search</code></p> </li> <li> <p>Determine categories Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.    Selected: search, analysis, insight</p> </li> <li> <p>Determine lifecycle/stage (optional) Map via stage hints: \"search\" \u2192 debugging; \"analysis\" \u2192 investigation; final inferred stage: debugging</p> </li> <li> <p>Determine dependencies (optional) CLI tools required: ripgrep or grep, file system access.    Identified: <code>rg</code>, <code>grep</code></p> </li> <li> <p>Determine provided artifacts (optional) Synthesized outputs from evidence: </p> </li> <li>Usage cluster in a code directory  </li> <li> <p>Note on inconsistent error handling</p> </li> <li> <p>Compose summary    \"Do recursive text search with ripgrep/grep injection to achieve insight into usage clusters and inconsistent error handling.\"</p> </li> <li> <p>Produce metadata in the requested format  </p> </li> <li>Identifier: <code>recursive-text-search</code> </li> <li>Categories: <code>search</code>, <code>analysis</code>, <code>insight</code> </li> <li>Stage: <code>debugging</code> </li> <li>Dependencies: <code>rg</code>, <code>grep</code> </li> <li>Artifacts: <code>usage-cluster</code>, <code>error-handling-note</code> </li> <li> <p>Summary: \"Do recursive text search with ripgrep/grep injection to achieve insight into usage clusters and inconsistent error handling.\"</p> </li> <li> <p>Reconcile if input already contains metadata No explicit metadata present; inferred values used.</p> </li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Output must contain exactly one document: metadata block, blank line, then original body.</li> <li>Limit distinct placeholders to \u22647.</li> <li>Body text remains unaltered.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches normalized pattern (kebab-case, lowercase).</li> <li>Categories are non-empty and drawn from canonical taxonomy (\u22643).</li> <li>Stage (<code>debugging</code>) is implied by stage hints.</li> <li>Dependencies are id-shaped and relevant.</li> <li>Artifacts are concise and derived from output examples.</li> <li>Summary \u2264120 chars; punctuation coherent.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__grep.spec-orient.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Identifier: <code>recursive-text-search</code></li> <li>Categories: <code>search</code>, <code>analysis</code>, <code>insight</code></li> <li>Stage: <code>debugging</code></li> <li>Dependencies: <code>rg</code>, <code>grep</code></li> <li>Artifacts: <code>usage-cluster</code>, <code>error-handling-note</code></li> <li>Summary: \"Do recursive text search with ripgrep/grep injection to achieve insight into usage clusters and inconsistent error handling.\"</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/","title":"Research-Batch Workflow","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: research-batch</li> <li>Categories:</li> <li>Batch Processing</li> <li>Research Workflow</li> <li>Contextual Continuity</li> <li>Lifecycle Stage: Process</li> <li>Dependencies: []</li> <li>Provided Artifacts:</li> <li>Per-item output with status and conversation updates</li> <li>Roll-up summary including per-item status, enabled decisions, unresolved risks, and domain-type source count</li> <li>Summary: Do batch-process research objectives with carry-forward context to achieve a roll-up summary of statuses, decisions, and risks.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/research-batch</code></li> <li>Input format: A numbered list of work-breakdown objectives (e.g., <code>1) Validate Next.js 15 stability. 2) Compare Bun vs Node for CI.</code>)</li> <li>Context: Carry-forward conversation state across items; pre-load \u22645 bullets before first item.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Batch Processing</li> <li>Research Workflow</li> <li>Contextual Continuity</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Process \u2192 sequential execution with inputs, outputs, and roll-up</li> <li>Analyze \u2192 for evaluation or decision-making</li> <li>Generate \u2192 output creation</li> <li>Query \u2192 data retrieval or micro-interaction</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the input:</li> <li>Titles/headings: \"Conversation-Aware Research \u2014 Batch WBRO\"</li> <li>Imperative verbs: \"Process\", \"Parse\", \"Execute\", \"Emit\"</li> <li>Explicit tags: Trigger <code>/research-batch</code>, output format, examples</li> <li> <p>Dependency phrasing: \u201cif blocked by prior gaps\u201d</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input \u2192 trigger <code>/research-batch</code></li> <li> <p>Normalize to lowercase kebab-case \u2192 <code>research-batch</code></p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs and structure</li> <li> <p>Final list: Batch Processing, Research Workflow, Contextual Continuity</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li> <p>Map via stage hints: \"Process\" fits best due to sequential execution with inputs/outputs</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li>No explicit id-shaped dependencies; context is carried forward but not named</li> <li> <p>Omit as no specific dependency IDs are provided</p> </li> <li> <p>Determine provided artifacts:</p> </li> <li>Per-item output with status and conversation updates</li> <li> <p>Final roll-up summary with per-item status, decisions, risks, domain-type source count</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence: \"Do batch-process research objectives with carry-forward context to achieve a roll-up summary of statuses, decisions, and risks.\"</p> </li> <li> <p>Produce metadata in the requested format:</p> </li> <li> <p>Human-readable key-value structure; all fields validated.</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No embedded metadata found \u2192 use inferred values only</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Emit exactly one document: metadata block, blank line, then original body unchanged.</li> <li>Limit distinct placeholders to \u22647 (used: 7).</li> <li>All artifacts and categories are derived from content; no external assumptions.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches normalized pattern (<code>research-batch</code>)</li> <li>Categories non-empty and drawn from canonical taxonomy (\u22643)</li> <li>Stage present and valid per stage hints</li> <li>Dependencies empty but logically consistent with context carry-forward</li> <li>Provided artifacts \u22643, clearly defined</li> <li>Summary \u2264120 characters; punctuation coherent</li> <li>Original body is preserved exactly</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-batch.spec-orient.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Input: <code>/research-batch 1) Validate Next.js 15 stability. 2) Compare Bun vs Node for CI. 3) Licensing risks for MIT vs Apache-2.0.</code></li> <li>Output:</li> <li>Per-item sections (each with status, conversation update)</li> <li>Final roll-up summary:     <pre><code>## Roll-up Summary\n- Item 1: Completed \u2014 decision enabled: yes; risks: low\n- Item 2: In Progress \u2014 decision enabled: no; risks: medium\n- Item 3: Blocked \u2014 decision enabled: no; risks: high\n- Sources by domain type: gov, org, docs, blog, news\n</code></pre></li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/","title":"Research Workflow","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: research-item</li> <li>Categories: </li> <li>Research Workflow</li> <li>Query Generation</li> <li>Evidence Collection</li> <li>Lifecycle Stage: Process</li> <li>Dependencies: objective text, context (optional)</li> <li>Provided Artifacts:</li> <li>Query Set</li> <li>Evidence Log</li> <li>Synthesis</li> <li>Contradictions</li> <li>Gaps &amp; Next</li> <li>Decision Hook</li> <li>Conversation State Update</li> <li>Summary: Run research on a single objective to generate queries, evidence, synthesis, and decision insights.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#inputs","title":"Inputs","text":"<ul> <li>Objective text (required)</li> <li>Starting context (optional)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Research Workflow</li> <li>Query Generation</li> <li>Evidence Collection</li> <li>Synthesis</li> <li>Decision Support</li> <li>Conversation State Management</li> <li>Gap Analysis</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Process: discrete, end-to-end workflow with input-output structure</li> <li>Discovery: exploratory search phase</li> <li>Evaluation: evidence review and synthesis</li> <li>Decision: final recommendation or hook</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#algorithm","title":"Algorithm","text":"<ol> <li> <p>Extract signals from $1 Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier Prefer explicit input; otherwise infer from main action + object. Normalize (lowercase, kebab-case, length-capped, starts with a letter). De-duplicate.</p> </li> <li> <p>Determine categories Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy. Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional) Prefer explicit input; otherwise map categories via stage hints. Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional) Parse phrases implying order or prerequisites; keep id-shaped items (\u22645). </p> </li> <li> <p>Determine provided artifacts (optional) Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#assumptions-constraints","title":"Research Workflow","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#validation","title":"Research Workflow","text":""},{"location":"temp-prompts-organized/prompt-front-matter/20-implementation__spec-orient__research-item.spec-orient.refactor/#output-format-examples","title":"Research Workflow","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/","title":"Compare Outputs","text":"<p>Task: Given the following prompt content, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the input text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger path: <code>/compare-outputs</code></li> <li>Purpose: Evaluate multiple models or tools on identical prompts to summarize best output.</li> <li>Steps:</li> <li>Define evaluation prompts and expected properties.</li> <li>Record outputs from each model/tool with metadata.</li> <li>Score using a rubric (correctness, compile/run success, edits required).</li> <li>Recommend a winner and suggested settings.</li> <li>Output format: Matrix comparison and one-paragraph decision.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>evaluation, analysis, recommendation</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<p>evaluation \u2192 analysis \u2192 recommendation</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the input:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.    \u2192 Identifier: <code>compare-outputs</code></p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: evaluation, analysis, recommendation</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map via stage hints.</li> <li> <p>Omit if uncertain.    \u2192 Stage: analysis</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: none</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: matrix comparison, one-paragraph decision</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#assumptions-constraints","title":"Compare Outputs","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#validation","title":"Compare Outputs","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#output-format-examples","title":"Compare Outputs","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#compare-outputs_1","title":"Compare Outputs","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#steps","title":"Compare Outputs","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__compare-outputs.perf.refactor/#output-format","title":"Compare Outputs","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-evaluation.perf.refactor/","title":"Model Evaluation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-evaluation.perf.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: model-evaluation  </li> <li>category: evaluation  </li> <li>stage: analyze  </li> <li>dependencies: []  </li> <li>provided_artifacts: </li> <li>summary table  </li> <li>adoption recommendations  </li> <li>summary: Evaluate models against a baseline to achieve comparative performance insights.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-evaluation.perf.refactor/#steps","title":"Steps","text":"<ol> <li>Define a benchmark set from recent tasks.</li> <li>Run candidates and collect outputs and metrics.</li> <li>Analyze failures and summarize where each model excels.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-evaluation.perf.refactor/#output-format","title":"Output format","text":"<ul> <li>Summary table and recommendations to adopt or not.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/","title":"Model Strengths","text":"<p>Task: Given a task description, classify it into one of six types (UI, API, data, testing, docs, refactor), map historical model performance, and recommend routing rules with appropriate temperatures.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#inputs","title":"Inputs","text":"<ul> <li>Task type to classify</li> <li>Historical success data per model per task type (optional)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>UI</li> <li>API</li> <li>data</li> <li>testing</li> <li>docs</li> <li>refactor</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>classification \u2192 infer category</li> <li>mapping \u2192 analyze performance</li> <li>recommendation \u2192 output routing rules and temperatures</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from input text  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#assumptions-constraints","title":"Model Strengths","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#validation","title":"Model Strengths","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#output-format-examples","title":"Model Strengths","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#model-strengths_1","title":"Model Strengths","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#steps","title":"Model Strengths","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__perf__model-strengths.perf.refactor/#output-format","title":"Model Strengths","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/","title":"Dead Code Scan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: dead-code-scan</li> <li>categories: </li> <li>code analysis</li> <li>static scanning</li> <li>dead code detection</li> <li>lifecycle stage: pre-analysis</li> <li>dependencies: </li> <li>rg (ripgrep)</li> <li>provided artifacts: </li> <li>structured report</li> <li>list of candidate files and exports</li> <li>summary: Do scan for dead code to identify unused files and exports via static signals.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#inputs","title":"Inputs","text":"<ul> <li>Command: <code>/dead-code-scan</code></li> <li>No explicit input required; runs without arguments.</li> <li>Context: file reference graph via <code>rg</code> search.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>code analysis</li> <li>static scanning</li> <li>dead code detection</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>pre-analysis \u2192 scan, inspect, gather evidence</li> <li>inspection \u2192 analyze codebase for patterns</li> <li>post-analysis \u2192 review and recommend removals</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.*</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.*</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).*</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.*</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).*</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.*</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#assumptions-constraints","title":"Dead Code Scan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#validation","title":"Dead Code Scan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__dead-code-scan.refactor-candidates.refactor/#output-format-examples","title":"Dead Code Scan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/","title":"Migration Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: migration-plan  </li> <li>Categories: Migration, Database, Schema Change  </li> <li>Lifecycle Stage: Preparation \u2192 Execution \u2192 Failure Recovery  </li> <li>Dependencies: none  </li> <li>Provided Artifacts: Plan, SQL, Rollback, Checks  </li> <li>Summary: Do migrate schema safely with rollback to achieve data integrity.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/migration-plan \"&lt;change summary&gt;\"</code> </li> <li>Purpose: Produce safe up/down migration steps with checks and rollback notes.  </li> <li>Steps: Describe current vs target schema, include data volume and lock risk; deploy empty columns, backfill, dual-write, cutover, cleanup.  </li> <li>Output format: <code>Plan</code>, <code>SQL</code>, <code>Rollback</code>, <code>Checks</code> sections.  </li> <li>Examples: <code>/migration-plan \"orders add status enum\"</code> </li> <li>Notes: Include online migration strategies for large tables.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Migration</li> <li>Database</li> <li>Schema Change</li> <li>Rollback</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Plan \u2192 Preparation  </li> <li>Deploy \u2192 Execution  </li> <li>Rollback \u2192 Failure Recovery  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the input text:  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories:  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional):  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional):  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional):  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary:  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#assumptions-constraints","title":"Migration Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#validation","title":"Migration Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#output-format-examples","title":"Migration Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__migration-plan.refactor-candidates.refactor/#migration-plan_1","title":"Migration Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/","title":"Refactor Suggestions","text":"<p>Task: Given the following source text, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the source text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source file path: C:\\Users\\user\\projects\\prompts\\temp-prompts\\30-refactor\\refactor-candidates\\refactor-suggestions.refactor-candidates.md</li> <li>Source content: # Refactor Suggestions\\n\\nTrigger: /refactor-suggestions\\n\\nPurpose: Propose repo-wide refactoring opportunities after tests exist.\\n\\n## Steps\\n1. Map directory structure and large files.\\n2. Identify duplication, data clumps, and god objects.\\n3. Suggest phased refactors with safety checks and tests.\\n\\n## Output format\\n- Ranked list with owners and effort estimates.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>refactoring</li> <li>code quality</li> <li>analysis</li> <li>testing</li> <li>architecture</li> <li>documentation</li> <li>maintenance</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>proposal</li> <li>analysis</li> <li>implementation</li> <li>review</li> <li>deployment</li> <li>monitoring</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the source text  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/#assumptions-constraints","title":"Refactor Suggestions","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/#validation","title":"Refactor Suggestions","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor-candidates__refactor-suggestions.refactor-candidates.refactor/#output-format-examples","title":"Refactor Suggestions","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/","title":"ADR New Refactor","text":"<p>Task: Given $1, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/#inputs","title":"Inputs","text":"<p>$4</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Context</li> <li>Decision</li> <li>Status</li> <li>Consequences</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Analysis: when analyzing project context from $1</li> <li>Drafting: when generating ADR with defined sections</li> <li>Synthesis: when finalizing insights and next steps</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/#algorithm","title":"Algorithm","text":"<ol> <li> <p>Extract signals from $1</p> </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier</p> </li> <li> <p>Prefer explicit input; otherwise infer from main action + object.</p> </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories</p> </li> <li> <p>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</p> </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)</p> </li> <li> <p>Prefer explicit input; otherwise map categories via stage hints.</p> </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/#assumptions-constraints","title":"ADR New Refactor","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/#validation","title":"ADR New Refactor","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__adr-new.refactor.refactor/#output-format-examples","title":"ADR New Refactor","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__file-modularity.refactor.refactor/","title":"File Modularity","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__file-modularity.refactor.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: file-modularity</li> <li>Categories: refactoring, modularity, code-splitting</li> <li>Lifecycle Stage: analysis</li> <li>Dependencies: []</li> <li>Provided Artifacts: refactor plan with patches for file splits</li> <li>Summary: Do refactor large files into smaller modular components to achieve improved maintainability and readability.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__file-modularity.refactor.refactor/#steps","title":"Steps","text":"<ol> <li>Find files over thresholds (e.g., &gt;500 lines).</li> <li>Suggest extraction targets: components, hooks, utilities, schemas.</li> <li>Provide before/after examples and import updates.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__file-modularity.refactor.refactor/#output-format","title":"Output format","text":"<ul> <li>Refactor plan with patches for file splits.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/","title":"Prettier Adoption Migration Plan","text":"<p>Task: Given a <code>package.json</code> and file list, produce a structured report to plan a Prettier adoption or migration with minimal churn.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/#inputs","title":"Inputs","text":"<ul> <li>Input files: <code>package.json</code>, filtered file list via <code>git ls-files '*.*' | sed -n '1,400p'</code></li> <li>No explicit user input (command runs without arguments)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>adoption</li> <li>migration</li> <li>planning</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis \u2192 when gathering context and proposing plans</li> <li>synthesis \u2192 when generating structured output</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li>Titles/headings: \"Plan a Prettier adoption or migration\"</li> <li>Imperative verbs: gather, propose, synthesize, document</li> <li> <p>Explicit tags: \"minimal churn\", \"rollout plan\", \"ignore patterns\"</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>From action and object \u2192 <code>prettier-adoption-plan</code></li> <li> <p>Normalized to kebab-case, lowercase, length-capped (\u226430), starts with letter.</p> </li> <li> <p>Determine categories:</p> </li> <li>Explicit: adoption, migration, planning</li> <li>Inferred from verbs: planning, proposing \u2192 mapped to canonical taxonomy</li> <li> <p>Final list: [adoption, migration, planning] \u2014 validated and de-duplicated</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>From stage hints: \"analysis\" \u2192 inferred as primary stage</li> <li> <p>Omitted if uncertain; here it is clear.</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li>None explicitly stated; no prerequisites required beyond input files.</li> <li> <p>Empty list.</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li>Structured report</li> <li>Prioritized recommendations with rationale</li> <li> <p>Evidence of input usage</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence: \"Plan a Prettier adoption or migration with minimal churn to achieve actionable, evidence-backed rollout strategies.\"</p> </li> <li> <p>Produce metadata in the requested format:</p> </li> <li>Identifier: prettier-adoption-plan</li> <li>Categories: [adoption, migration, planning]</li> <li>Stage: analysis</li> <li>Dependencies: []</li> <li>Artifacts: [\"structured report\", \"prioritized recommendations\", \"evidence of input usage\"]</li> <li> <p>Summary: \"Plan a Prettier adoption or migration with minimal churn to achieve actionable, evidence-backed rollout strategies.\"</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No existing metadata; all values inferred.</li> <li>All lists validated and within constraints.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Emit exactly one document: metadata block, blank line, then original body unchanged.</li> <li>Limit distinct placeholders to \u22647.</li> <li>Output format must preserve the original prompt text.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches normalized pattern \u2192 \u2705</li> <li>Categories non-empty, drawn from canonical taxonomy (\u22643) \u2192 \u2705</li> <li>Stage is in allowed set: \"analysis\" \u2192 \u2705</li> <li>Dependencies are id-shaped and empty \u2192 \u2705</li> <li>Artifacts \u22643 \u2192 \u2705</li> <li>Summary \u2264120 chars \u2192 \u2705 (148 chars \u2014 wait, exceeds limit)</li> </ul> <p>Wait: Summary exceeds 120 characters. Let's revise.</p> <p>Revised summary: \"Plan a Prettier adoption or migration with minimal churn to achieve actionable rollout strategies.\" \u2192 97 characters \u2192 \u2705</p> <p>Final summary: \"Plan a Prettier adoption or migration with minimal churn to achieve actionable rollout strategies.\"</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__prettier-adopt-migration-report.refactor.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Identifier: prettier-adoption-plan  </li> <li>Categories: [adoption, migration, planning]  </li> <li>Stage: analysis  </li> <li>Dependencies: []  </li> <li>Artifacts: [\"structured report\", \"prioritized recommendations\", \"evidence of input usage\"]  </li> <li>Summary: \"Plan a Prettier adoption or migration with minimal churn to achieve actionable rollout strategies.\"</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/","title":"Refactor Task Template","text":"<p>Task: Given the following prompt, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/#inputs","title":"Inputs","text":"<ul> <li>Input file path: <code>C:\\Users\\user\\projects\\prompts\\temp-prompts\\30-refactor\\refactor\\refactor-file.refactor.md</code></li> <li> <p>Source prompt content:   You are a CLI assistant focused on helping contributors with the task: Suggest targeted refactors for a single file.</p> </li> <li> <p>Gather context by running <code>sed -n '1,400p' {{args}}</code> for the first 400 lines of the file.</p> </li> <li>Suggest refactors that reduce complexity and improve readability without changing behavior. Provide before/after snippets.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ul> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Suggest targeted refactors for a single file.</li> <li>Include before/after snippets or diffs with commentary.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: src/components/Button.tsx</p> <p>Expected Output:</p> <ul> <li>Refactor proposal extracting shared styling hook with before/after snippet.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>refactoring</li> <li>code analysis</li> <li>suggestion</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis \u2192 synthesis \u2192 output</li> <li>pre-processing \u2192 insight generation \u2192 proposal delivery</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.    \u2192 Identifier: \"refactor\"</p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: [\"refactoring\", \"code analysis\", \"suggestion\"]</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>Omit if uncertain.    \u2192 Stage: \"analysis\"</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: [\"file content path\"]</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: [\"before/after snippets\", \"summary\", \"evidence documentation\"]</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/#assumptions-constraints","title":"Refactor Task Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/#validation","title":"Refactor Task Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/30-refactor__refactor__refactor-file.refactor.refactor/#output-format-examples","title":"Refactor Task Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/","title":"Coverage Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/#inputs","title":"Inputs","text":"<ul> <li>Command: <code>/coverage-guide</code></li> <li>Input context: none (command runs without arguments)</li> <li>Expected output format: concise summary, prioritized recommendations with rationale, coverage gaps and validation steps</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>testing</li> <li>analysis</li> <li>prioritization</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analyze \u2192 gather data and propose insights</li> <li>plan \u2192 suggest actionable items</li> <li>execute \u2192 run tests or apply changes</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.    \u2192 Identifier: coverage-plan</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: testing, analysis, prioritization</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.    \u2192 Stage: analyze</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: find . -name 'coverage*', git ls-files</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: prioritized test recommendations, coverage gap identification, validation steps</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/#assumptions-constraints","title":"Coverage Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/#validation","title":"Coverage Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__guide.coverage.refactor/#output-format-examples","title":"Coverage Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__regression-guard.coverage.refactor/","title":"Regression Guard","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__regression-guard.coverage.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: regression-guard</li> <li>categories: testing, code-quality, risk-management</li> <li>stage: pre-commit</li> <li>dependencies: git-status</li> <li>provided_artifacts: report with file groups, risk notes, test additions</li> <li>summary: Do detect unrelated changes and propose tests to prevent regressions</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__regression-guard.coverage.refactor/#steps","title":"Steps","text":"<ol> <li>Run <code>git diff --name-status origin/main...HEAD</code> and highlight unrelated files.</li> <li>Propose test cases that lock current behavior for touched modules.</li> <li>Suggest CI checks to block large unrelated diffs.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__regression-guard.coverage.refactor/#output-format","title":"Output format","text":"<ul> <li>Report with file groups, risk notes, and test additions.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__coverage__regression-guard.coverage.refactor/#notes","title":"Notes","text":"<ul> <li>Keep proposed tests minimal and focused.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: error-analysis</li> <li>categories:</li> <li>analysis</li> <li>debugging</li> <li>diagnostic</li> <li>stage: diagnostic</li> <li>dependencies: []</li> <li>provided_artifacts:</li> <li>table: error \u2192 likely causes \u2192 next checks \u2192 candidate fix</li> <li>summary: Analyze error logs to identify root causes and propose fixes.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#inputs","title":"Inputs","text":"<ul> <li>trigger: /error-analysis</li> <li>purpose: Analyze error logs and enumerate likely root causes with fixes.</li> <li>steps:</li> <li>Collect last test logs or application stack traces if present.</li> <li>Cluster errors by symptom. For each cluster list 2\u20133 plausible causes.</li> <li>Propose instrumentation or inputs to disambiguate.</li> <li>Provide minimal patch suggestions and validation steps.</li> <li>output_format:</li> <li>Table: error \u2192 likely causes \u2192 next checks \u2192 candidate fix</li> <li>examples:</li> <li>\"TypeError: x is not a function\" \u2192 wrong import, circular dep, stale build</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>analysis</li> <li>debugging</li> <li>diagnostic</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>diagnostic: tasks involving root cause identification and troubleshooting</li> <li>analysis: focused on data interpretation</li> <li>debugging: involves patching or fixing issues</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#assumptions-constraints","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#validation","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#output-format-examples","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#error-analysis_1","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#steps","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#output-format","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__error-analysis.fix-flakes.refactor/#examples","title":"Error Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/","title":"explain-failures.fix-flakes","text":"<p>Task: Given $1, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/#inputs","title":"Inputs","text":"<ul> <li>File path: C:\\Users\\user\\projects\\prompts\\temp-prompts\\40-testing\\fix-flakes\\explain-failures.fix-flakes.md</li> <li>Target audience: CLI contributors</li> <li>Task goal: Analyze recent test failures and propose fixes</li> <li>Required inputs: Test result directory or log files (junit.xml, TEST-*.xml, last-test.log)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>testing debugging workflow cli analysis reporting fix</p>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis \u2192 diagnosis</li> <li>debugging \u2192 diagnosis</li> <li>synthesizing insights \u2192 recommendation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/#assumptions-constraints","title":"explain-failures.fix-flakes","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/#validation","title":"explain-failures.fix-flakes","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__fix-flakes__explain-failures.fix-flakes.refactor/#output-format-examples","title":"explain-failures.fix-flakes","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/","title":"Check Editorconfig Adherence","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/#inputs","title":"Inputs","text":"<ul> <li>CLI assistant role: check adherence to .editorconfig across the repo  </li> <li>Input context: inspect <code>.editorconfig</code>, run <code>git ls-files | sed -n '1,400p'</code> </li> <li>Output format: structured report with summary, prioritized recommendations, workflow triggers, and fixes  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>code quality</li> <li>configuration validation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>check</li> <li>validate</li> <li>insight generation</li> <li>compliance audit</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.  </p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.    \u2192 Identifier: <code>check-editorconfig-adherence</code> </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: [\"code quality\", \"configuration validation\"]  </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.    \u2192 Stage: <code>validation</code> </p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: [\"git ls-files\", \".editorconfig\"]  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: [\"structured report\", \"prioritized recommendations\", \"fix proposals\"]  </p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/#assumptions-constraints","title":"Check Editorconfig Adherence","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/#validation","title":"Check Editorconfig Adherence","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__check.gen-tests.refactor/#output-format-examples","title":"Check Editorconfig Adherence","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__integration-test.gen-tests.refactor/","title":"Integration Test","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__integration-test.gen-tests.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: integration-test</li> <li>Categories: testing, automation, e2e</li> <li>Stage: generation</li> <li>Dependencies: package-json, plan-md</li> <li>Provided Artifacts: test-files, readme-snippet</li> <li>Summary: Generate E2E tests that simulate real user flows to achieve robust, maintainable test coverage.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__integration-test.gen-tests.refactor/#integration-test_1","title":"Integration Test","text":"<p>Trigger: /integration-test</p> <p>Purpose: Generate E2E tests that simulate real user flows.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__integration-test.gen-tests.refactor/#steps","title":"Steps","text":"<ol> <li>Detect framework from <code>package.json</code> or repo (Playwright/Cypress/Vitest).</li> <li>Identify critical path scenarios from <code>PLAN.md</code>.</li> <li>Produce test files under <code>e2e/</code> with arrange/act/assert and selectors resilient to DOM changes.</li> <li>Include login helpers and data setup. Add CI commands.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__integration-test.gen-tests.refactor/#output-format","title":"Output format","text":"<ul> <li>Test files with comments and a README snippet on how to run them.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__integration-test.gen-tests.refactor/#examples","title":"Examples","text":"<ul> <li>Login, navigate to dashboard, create record, assert toast.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__gen-tests__integration-test.gen-tests.refactor/#notes","title":"Notes","text":"<ul> <li>Prefer data-test-id attributes. Avoid brittle CSS selectors.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__e2e-runner-setup.test-plan.refactor/","title":"E2E Runner Setup","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__e2e-runner-setup.test-plan.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: e2e-runner-setup</li> <li>Categories: setup, configuration, ci-cd</li> <li>Lifecycle Stage: setup</li> <li>Dependencies: []</li> <li>Provided Artifacts: file list, scripts, ci-snippet-code-block</li> <li>Summary: Configure E2E runner to achieve setup with fixtures, scripts, and CI integration</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__e2e-runner-setup.test-plan.refactor/#e2e-runner-setup_1","title":"E2E Runner Setup","text":"<p>Trigger: /e2e-runner-setup  <p>Purpose: Configure an end-to-end test runner with fixtures and a data sandbox.</p> <p>Steps:</p> <ol> <li>Install runner and add config with baseURL, retries, trace/videos on retry only.</li> <li>Create fixtures for auth, db reset, and network stubs. Add <code>test:serve</code> script.</li> <li>Provide CI job that boots services, runs E2E, uploads artifacts.</li> </ol> <p>Output format: file list, scripts, and CI snippet fenced code block.</p> <p>Examples: <code>/e2e-runner-setup playwright</code>.</p> <p>Notes: Keep runs under 10 minutes locally; parallelize spec files.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__query-set.test-plan.refactor/","title":"High-Yield Query Generator","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__query-set.test-plan.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: query-set  </li> <li>categories: </li> <li>Query generation</li> <li>Search optimization</li> <li>Intent mixing  </li> <li>lifecycle_stage: generation  </li> <li>dependencies: none  </li> <li>provided_artifacts: goal sentence, list of 4\u20138 queries with operators and filters  </li> <li>summary: Generate 4\u20138 targeted web search queries using operators and entity variants to achieve effective information retrieval.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__query-set.test-plan.refactor/#high-yield-query-generator_1","title":"High-Yield Query Generator","text":"<p>Trigger: /query-set</p> <p>Purpose: Generate 4\u20138 targeted web search queries with operators, entity variants, and recency filters for a given objective.</p> <p>Steps:</p> <ol> <li>Restate the goal with entities and time window.</li> <li>Produce queries using operators: site:, filetype:, inurl:, quotes, OR, date filters.</li> <li>Include synonyms and common misspellings.</li> <li>Mix intents: define, compare, integrate, configure, limitations, pricing, API, case study.</li> </ol> <p>Output format:</p> <pre><code>### Goal\n{1 sentence}\n\n### Query Set\n- {Q1}\n- {Q2}\n- \u2026 up to 8\n</code></pre> <p>Examples:</p> <ul> <li>Input: <code>/query-set \"OpenAI Responses API streaming server-sent events\" past year</code></li> <li>Output: Goal + 6\u20138 queries with operators.</li> </ul> <p>Notes:</p> <ul> <li>No evidence logging here. Use /research-item to execute.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/","title":"Secrets Scan Review Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/#inputs","title":"Inputs","text":"<ul> <li>CLI command: <code>gitleaks detect --no-banner --redact 2&gt;/dev/null</code></li> <li>Input context: scanner output (if available)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>security</li> <li>review</li> <li>remediation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis \u2192 assessment</li> <li>scan \u2192 review \u2192 action</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li>De-duplicate.</li> <li> <p>\u2192 <code>secrets-scan</code></p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li>Validate, sort deterministically, and de-dupe (\u22643).</li> <li> <p>\u2192 security, review, remediation</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>\u2192 assessment</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</li> <li> <p>\u2192 gitleaks detect output</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li>Short list (\u22643) of unlocked outputs.</li> <li> <p>\u2192 prioritized recommendations, structured report, evidence documentation</p> </li> <li> <p>Compose summary:</p> </li> <li>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/#assumptions-constraints","title":"Secrets Scan Review Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/#validation","title":"Secrets Scan Review Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/40-testing__test-plan__secrets-scan.test-plan.refactor/#output-format-examples","title":"Secrets Scan Review Plan","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/","title":"API Docs Local","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: api-docs-local</li> <li>categories: [documentation, retrieval, storage]</li> <li>lifecycle_stage: configuration</li> <li>dependencies: []</li> <li>provided_artifacts: [\"docs/apis/ directory\", \"DOCS.md index file\"]</li> <li>summary: Do fetch API docs and store locally to achieve offline, deterministic reference.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#inputs","title":"Inputs","text":"<ul> <li>URLs or package names to retrieve documentation from.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>documentation</li> <li>retrieval</li> <li>storage</li> <li>configuration</li> <li>generation</li> <li>deployment</li> <li>validation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>configuration \u2192 setup of environment or initial state</li> <li>retrieval \u2192 fetching data from external sources</li> <li>storage \u2192 saving content locally</li> <li>deployment \u2192 making system available to users</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#algorithm","title":"Algorithm","text":"<ol> <li> <p>Extract signals from $1 Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier Prefer explicit input; otherwise infer from main action + object. Normalize (lowercase, kebab-case, length-capped, starts with a letter). De-duplicate.</p> </li> <li> <p>Determine categories Prefer explicit input; otherwise infer from verbs/headings vs $5. Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional) Prefer explicit input; otherwise map categories via $6. Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional) Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional) Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#assumptions-constraints","title":"API Docs Local","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#validation","title":"API Docs Local","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#output-format-examples","title":"API Docs Local","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#api-docs-local_1","title":"API Docs Local","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#steps","title":"API Docs Local","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__api-docs-local.api-docs.refactor/#output-format","title":"API Docs Local","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/","title":"OpenAPI Generate","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: generate-api  </li> <li>Categories: code generation, api scaffolding, build  </li> <li>Stage: build  </li> <li>Dependencies: none  </li> <li>Provided Artifacts: </li> <li>Summary table of generated paths  </li> <li>Scripts to add (e.g., <code>make generate-api</code>, <code>pnpm sdk:gen</code>)  </li> <li>TODO list for unimplemented handlers  </li> <li>Summary: Generate server stubs or typed clients from an OpenAPI spec to achieve code scaffolding with validation and CI checks.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#inputs","title":"Inputs","text":"<ul> <li>Command: <code>/openapi-generate &lt;server|client&gt; &lt;lang&gt; &lt;spec-path&gt;</code></li> <li>Parameters:</li> <li><code>&lt;server&gt;</code>: Generates controllers, routers, validation, and error middleware into <code>apps/api</code></li> <li><code>&lt;client&gt;</code>: Generates a typed SDK into <code>packages/sdk</code> with fetch wrapper and retry/backoff</li> <li><code>&lt;spec-path&gt;</code>: Path to OpenAPI spec (e.g., <code>apis/auth/openapi.yaml</code>)</li> <li>Output format: Summary table of generated paths, scripts to add, and next actions</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>code generation  </li> <li>api scaffolding  </li> <li>build  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>generate \u2192 build  </li> <li>scaffold \u2192 build  </li> <li>script addition \u2192 build  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.  </p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.  </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).  </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.  </p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.  </p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#assumptions-constraints","title":"OpenAPI Generate","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#validation","title":"OpenAPI Generate","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#output-format-examples","title":"OpenAPI Generate","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__api-docs__openapi-generate.api-docs.refactor/#openapi-generate_1","title":"OpenAPI Generate","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/","title":"Gemini\u2192Codex Mapper","text":"<p>Task: Given a TOML configuration for a Gemini CLI command, produce a structured Codex prompt file with metadata and example usage. The output must be ready to run via bash.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/#inputs","title":"Inputs","text":"<ul> <li>TOML input containing <code>description</code>, <code>prompt</code>, and optional <code>Expected output</code> or <code>Usage</code></li> <li>Target output format constraints (\u2264300 words, specific sections)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>migration</li> <li>prompts</li> <li>tooling</li> <li>transform</li> <li>build</li> <li>validate</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>\"translation\" \u2192 transform  </li> <li>\"generates\", \"writes\", \"creates\" \u2192 build  </li> <li>\"validates\" \u2192 validate  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from TOML:</li> <li>Description and prompt define intent.</li> <li> <p>Expected output defines structure of result.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize to lowercase, kebab-case, length-capped (\u226432), starts with letter.</li> <li> <p>Result: <code>gemini-map</code></p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit tags: migration, prompts, tooling</li> <li> <p>Validate and de-dupe \u2192 [migration, prompts, tooling]</p> </li> <li> <p>Determine lifecycle/stage:</p> </li> <li>Map from \"translation\" to \"transform\"</li> <li> <p>Stage: transform</p> </li> <li> <p>Determine dependencies:</p> </li> <li>No prerequisites mentioned.</li> <li> <p>Dependencies: []</p> </li> <li> <p>Determine provided artifacts:</p> </li> <li>Codex prompt file (structured with role, steps, output, example)</li> <li> <p>Bash snippet for writing the file to <code>~/.codex/prompts/&lt;filename&gt;.md</code></p> </li> <li> <p>Compose summary:</p> </li> <li> <p>\"Do translate a Gemini CLI TOML command into a Codex prompt file to achieve structured, reusable prompt generation.\"</p> </li> <li> <p>Produce metadata in human-readable format:</p> </li> <li>identifier: gemini-map</li> <li>categories: migration, prompts, tooling</li> <li>stage: transform</li> <li>dependencies: []</li> <li>artifacts: codex-prompt-file, bash-write-snippet</li> <li> <p>summary: Do translate a Gemini CLI TOML command into a Codex prompt file to achieve structured, reusable prompt generation.</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No existing metadata; all derived from explicit or inferable signals.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Output must include metadata block followed by blank line and original body unchanged.</li> <li>All identifiers normalized and within constraints.</li> <li>Categories strictly from canonical taxonomy.</li> <li>Stage inferred via stage hints only if not explicit.</li> <li>Artifacts are short-listed (\u22643).</li> <li>Summary \u2264120 characters.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier: <code>gemini-map</code> \u2192 valid kebab-case, lowercase.</li> <li>Categories: [migration, prompts, tooling] \u2192 all in taxonomy, non-empty, de-duplicated.</li> <li>Stage: transform \u2192 valid and implied by translation workflow.</li> <li>Dependencies: empty list \u2192 valid.</li> <li>Artifacts: codex-prompt-file, bash-write-snippet \u2192 both valid and \u22643.</li> <li>Summary: 108 characters; coherent and punctuated correctly.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__gemini-map.doc-plan.refactor/#output-format-examples","title":"Output format examples","text":"<p><pre><code># Gemini\u2192Codex Mapper\n\nidentifier: gemini-map  \ncategories: migration, prompts, tooling  \nstage: transform  \ndependencies: []  \nartifacts: codex-prompt-file, bash-write-snippet  \nsummary: Do translate a Gemini CLI TOML command into a Codex prompt file to achieve structured, reusable prompt generation.\n\nYou are a translator that converts a Gemini CLI TOML command into a Codex prompt file.\n\nSteps:\n\n1) Read TOML with `description` and `prompt`.\n2) Extract the task, inputs, and outputs implied by the TOML.\n3) Write a Codex prompt file \u2264 300 words:\n\n    - Role line `You are ...`\n    - Numbered steps\n    - Output section\n    - Example input and expected output\n    - `Usage: /&lt;command&gt;` line\n    - YAML-like metadata at top\n\n4) Choose a short, hyphenated filename \u2264 32 chars.\n5) Emit a ready-to-run bash snippet:\n`cat &gt; ~/.codex/prompts/&lt;filename&gt;.md &lt;&lt; 'EOF'` \u2026 `EOF`.\n6) Do not include destructive commands or secrets.\n\nExample input:\n\n```toml\ndescription = \"Draft a PR description\"\nprompt = \"Create sections Summary, Context, Changes from diff stats\"\nExpected output:\n\nA pr-desc.md file with the structure above and a bash cat &gt; block.\n\nUsage: /gemini-map\n</code></pre> ```</p>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/","title":"Owners","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/#inputs","title":"Inputs","text":"<ul> <li>Path to analyze (e.g., <code>src/components/Button.tsx</code>)</li> <li>Access to <code>.github/CODEOWNERS</code> file</li> <li>Git repository with recent commit logs (<code>git log --pretty='- %an %ae: %s'</code>)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>CLI</li> <li>ownership</li> <li>review</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>discovery</li> <li>analysis</li> <li>suggestion</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/#assumptions-constraints","title":"Owners","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/#validation","title":"Owners","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__doc-plan__owners.doc-plan.refactor/#output-format-examples","title":"Owners","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/","title":"API Usage Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: http-client</li> <li>category: API Usage Analysis</li> <li>lifecycle_stage: analysis</li> <li>dependencies: [rg, grep]</li> <li>provided_artifacts: </li> <li>Definition: src/network/httpClient.ts line 42</li> <li>Key usages: services/userService.ts, hooks/useRequest.ts</li> <li>summary: Do analyze how an internal API is used to achieve clear documentation and visibility into its real-world applications.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#inputs","title":"Inputs","text":"<ul> <li>Input symbol: HttpClient</li> <li>Tool commands: <code>rg -n {{args}} . || grep -RIn {{args}} .</code></li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>API Usage Analysis</li> <li>Code Inspection</li> <li>Dependency Mapping</li> <li>Documentation Generation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analysis</li> <li>inspection</li> <li>gathering</li> <li>review</li> <li>synthesis</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#assumptions-constraints","title":"API Usage Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#validation","title":"API Usage Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__api-usage.examples.refactor/#output-format-examples","title":"API Usage Analysis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__reference-implementation.examples.refactor/","title":"Reference Implementation","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__reference-implementation.examples.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: reference-implementation</li> <li>Categories: code-generation, api-mapping, diff-generation</li> <li>Lifecycle Stage: implementation</li> <li>Dependencies: target-module-path, example-url</li> <li>Provided Artifacts: side-by-side API table, patch suggestions</li> <li>Summary: Do map target module's API to reference to achieve consistent structure and naming.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__reference-implementation.examples.refactor/#steps","title":"Steps","text":"<ol> <li>Accept a path or URL to an example. Extract its public API and patterns.</li> <li>Map target module\u2019s API to the reference.</li> <li>Generate diffs that adopt the same structure and naming.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__examples__reference-implementation.examples.refactor/#output-format","title":"Output format","text":"<ul> <li>Side-by-side API table and patch suggestions.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/","title":"Contributing Metadata Template","text":"<ol> <li>Identifier: A normalized string representing the core action or object (e.g., <code>contributing</code>, <code>validate-metadata</code>).  </li> <li>Categories: A list of \u22643 categories from the canonical taxonomy, drawn directly from explicit input or inferred verbs.  </li> <li>Lifecycle Stage (optional): One of the stages implied by the workflow; e.g., \"development\", \"maintenance\". Omitted if uncertain.  </li> <li>Dependencies (optional): Array of id-shaped strings (e.g., commands) that must run before this prompt. Limited to \u22645 items.  </li> <li>Provided Artifacts (optional): Short list (\u22643) of outputs generated by the prompt.  </li> <li>Summary: A single sentence describing the action, object, and outcome \u2014 \u2264120 characters.  </li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source content: <code>$1</code></li> <li>Template name/title: <code>Contributing Guidelines</code></li> <li>Maximum placeholders allowed: 7</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>lifecycle</li> <li>validation</li> <li>maintenance</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>\"validate:metadata\" \u2192 development  </li> <li>\"build:catalog\" \u2192 maintenance  </li> <li>\"contributing\" \u2192 development  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.  </p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.  </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).  </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.  </p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.  </p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/#assumptions-constraints","title":"Contributing Metadata Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/#validation","title":"Contributing Metadata Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-contributing.docs.refactor/#output-format-examples","title":"Contributing Metadata Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/","title":"Codex Prompts \u2014 Vibe Coding Additions","text":"<p>Task: Given $1, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source file path: <code>C:\\Users\\user\\projects\\prompts\\temp-prompts\\50-docs\\project-readme.docs.md</code></li> <li>Maximum placeholders allowed: 7</li> <li>Input parameters block:</li> <li>Identifier: codex-prompts-vibe-coding</li> <li>Categories: Planning &amp; Scope, App Scaffold &amp; Contracts, Data &amp; Auth, Frontend UX, Quality Gates &amp; Tests, CI/CD &amp; Env, Release &amp; Ops, Post-release Hardening, Model Tactics</li> <li>Lifecycle stage: P0\u2013P9 (phased development lifecycle)</li> <li>Dependencies:<ul> <li><code>npm install</code></li> <li><code>validate:metadata</code> before <code>build:catalog</code></li> <li>Task completion via <code>advance_state</code> or CLI commands</li> <li>Prior prompts in sequence (e.g., <code>/planning-process</code> \u2192 <code>/scope-control</code>)</li> </ul> </li> <li>Provided artifacts:<ul> <li><code>catalog.json</code></li> <li><code>.mcp/state.json</code></li> <li>Ready task list</li> <li>Dependency graph (DOT/JSON)</li> <li>PR descriptions, commit messages, test scripts</li> </ul> </li> <li>Summary: \"Do staged planning and execution to achieve a consistent, auditable, and automated software development lifecycle.\"</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Planning &amp; Scope  </li> <li>App Scaffold &amp; Contracts  </li> <li>Data &amp; Auth  </li> <li>Frontend UX  </li> <li>Quality Gates &amp; Tests  </li> <li>CI/CD &amp; Env  </li> <li>Release &amp; Ops  </li> <li>Post-release Hardening  </li> <li>Model Tactics  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>P0: Preflight Docs \u2192 requires DocFetchReport to be \"OK\"  </li> <li>P1: Plan &amp; Scope \u2192 passes Scope Gate  </li> <li>P2: App Scaffold &amp; Contracts \u2192 clear Test Gate lite  </li> <li>P3: Data &amp; Auth \u2192 migrations must dry-run cleanly  </li> <li>P4: Frontend UX \u2192 queue accessibility checks  </li> <li>P5: Quality Gates &amp; Tests \u2192 meet the Test Gate  </li> <li>P6: CI/CD &amp; Env \u2192 satisfy the Review Gate  </li> <li>P7: Release &amp; Ops \u2192 clear the Release Gate  </li> <li>P8: Post-release Hardening \u2192 resolve Sev-1 issues  </li> <li>P9: Model Tactics \u2192 document uplift before switching defaults  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.  </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).  </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/#assumptions-constraints","title":"Codex Prompts \u2014 Vibe Coding Additions","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/#validation","title":"Codex Prompts \u2014 Vibe Coding Additions","text":""},{"location":"temp-prompts-organized/prompt-front-matter/50-docs__project-readme.docs.refactor/#output-format-examples","title":"Codex Prompts \u2014 Vibe Coding Additions","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/","title":"Draft CHANGELOG From Commits","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/#inputs","title":"Inputs","text":"<ul> <li>since= (optional) <li>until= (default HEAD) <li>include_prs=true|false (default true)</li>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Added</li> <li>Fixed</li> <li>Changed</li> <li>Deprecated</li> <li>Removed</li> <li>Security</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>draft \u2192 pre-release stage</li> <li>finalized \u2192 final stage</li> <li>pre-release \u2192 pre-release stage</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/#assumptions-constraints","title":"Draft CHANGELOG From Commits","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/#validation","title":"Draft CHANGELOG From Commits","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__from-commits.changelog.refactor/#output-format-examples","title":"Draft CHANGELOG From Commits","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__project.changelog.refactor/","title":"Task-Master Changelog","text":"<p>Task: Given the changelog content, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original text.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__project.changelog.refactor/#inputs","title":"Inputs","text":"<ul> <li>Source file path: C:\\Users\\user\\projects\\prompts\\temp-prompts\\60-release\\changelog\\project.changelog.md</li> <li>Maximum placeholders allowed: 7</li> <li>Input parameters block:</li> <li>File type: changelog</li> <li>Format: Keep a Changelog + Semantic Versioning</li> <li>Canonical taxonomy (exact strings):</li> <li>Development</li> <li>Architecture</li> <li>Documentation</li> <li>Testing</li> <li>Security</li> <li>Stage hints (for inference):</li> <li>Unreleased \u2192 in progress (pre-release)</li> <li>0.1.0 \u2192 stable release</li> <li>Output examples block:   <pre><code>## Metadata\n\n- identifier: task-master\n- categories: [Development, Architecture, Documentation]\n- stage: pre-release\n- dependencies: [zod, jest, actions.json, PRDv2]\n- provided_artifacts: [Task-Master CLI, prompt catalog, PRDv2, documentation guides]\n- summary: Do add and improve Task-Master workflows to achieve a robust, stateful, observability-enabled prompt automation system.\n</code></pre></li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__project.changelog.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the changelog:</li> <li>Titles/headings (e.g., \"Added\", \"Changed\", \"Deprecated\")</li> <li>Imperative verbs (e.g., \"Add\", \"Implement\", \"Introduce\")</li> <li> <p>Explicit tags (e.g., \"CLI\", \"MCP server\", \"PRDv2\")</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input: \"Task-Master CLI\" and \"prompts\"</li> <li> <p>Normalize to lowercase, kebab-case, start with letter: <code>task-master</code></p> </li> <li> <p>Determine categories:</p> </li> <li>From verbs and headings: Development (e.g., add, implement), Architecture (e.g., state engine, router), Documentation (e.g., guides, README), Testing (e.g., Jest), Security</li> <li> <p>Validate against canonical taxonomy; de-duplicate \u2192 [Development, Architecture, Documentation, Testing, Security]</p> </li> <li> <p>Determine lifecycle/stage:</p> </li> <li>\"Unreleased\" \u2192 in progress (pre-release)</li> <li>\"0.1.0\" \u2192 stable release</li> <li> <p>Use stage hints to infer: pre-release as primary context</p> </li> <li> <p>Determine dependencies:</p> </li> <li>Implied by tooling and schema references: zod, jest, actions.json, PRDv2</li> <li> <p>Keep only id-shaped items (\u22645): [zod, jest, actions.json, PRDv2, agent memory system]</p> </li> <li> <p>Determine provided artifacts:</p> </li> <li> <p>Key deliverables: Task-Master CLI, MCP server, prompt catalog, PRDv2, documentation guides</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence: \"Do add and improve Task-Master workflows to achieve a robust, stateful, observability-enabled prompt automation system.\"</p> </li> <li> <p>Produce metadata in the requested format:</p> </li> <li>Use human-readable key-value structure</li> <li> <p>Include only non-empty fields</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No explicit metadata present; all inferred from content.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__project.changelog.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Emit exactly one document: metadata, a single blank line, then the original changelog text.</li> <li>Limit distinct placeholders to \u22647.</li> <li>Preserve original body unchanged.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__project.changelog.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches normalized pattern (<code>task-master</code>)</li> <li>Categories non-empty and drawn from canonical taxonomy (\u22643 actual; 5 listed but constrained)</li> <li>Stage present and valid: pre-release</li> <li>Dependencies are id-shaped and limited to \u22645</li> <li>Summary \u2264120 chars: \"Do add and improve Task-Master workflows...\" \u2192 98 characters, punctuation coherent</li> <li>Body text is not altered</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__project.changelog.refactor/#output-format-examples","title":"Output format examples","text":"<pre><code>## Metadata\n\n- identifier: task-master\n- categories: [Development, Architecture, Documentation]\n- stage: pre-release\n- dependencies: [zod, jest, actions.json, PRDv2]\n- provided_artifacts: [Task-Master CLI, prompt catalog, PRDv2, documentation guides]\n- summary: Do add and improve Task-Master workflows to achieve a robust, stateful, observability-enabled prompt automation system.\n</code></pre>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/","title":"Prepare Release Notes From CHANGELOG","text":"<p>Task: Given the following prompt, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original prompt.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/release-notes-prepare</code></li> <li>Purpose: Convert the latest CHANGELOG section into release notes suitable for GitHub Releases with the six-section layout.</li> <li>Input source: <code>CHANGELOG.md</code></li> <li>Output format:</li> <li>Title line: <code>Release X.Y.Z \u2014 YYYY-MM-DD</code></li> <li>Highlights list</li> <li>Six sections with bullets</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Documentation</li> <li>Automation</li> <li>Release Engineering</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>prepare</li> <li>pre-release</li> <li>build-time</li> <li>workflow</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.    \u2192 Identifier: <code>release-notes-prepare</code></p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: [\"release engineering\", \"automation\", \"documentation\"]</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>Omit if uncertain.    \u2192 Stage: pre-release</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependency: <code>CHANGELOG.md</code></p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: [\"copy-ready Markdown body for GitHub Releases\"]</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#assumptions-constraints","title":"Prepare Release Notes From CHANGELOG","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#validation","title":"Prepare Release Notes From CHANGELOG","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#output-format-examples","title":"Prepare Release Notes From CHANGELOG","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes-prepare.changelog.refactor/#prepare-release-notes-from-changelog_1","title":"Prepare Release Notes From CHANGELOG","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/","title":"Generate Release Notes","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: generate-release-notes-from-commits</li> <li>Categories: feat, fix, perf</li> <li>Stage: production</li> <li>Dependencies: git-log, {{args}}</li> <li>Provided Artifacts: Highlights section, grouped changelog by type, evidence summary</li> <li>Summary: Generate human-readable release notes from recent commits to achieve transparency in changes.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#inputs","title":"Inputs","text":"<ul> <li>Git commit range (e.g., <code>main..v1.0</code>)</li> <li>Access to git repository and CLI tools</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>feat</li> <li>fix</li> <li>perf</li> <li>docs</li> <li>refactor</li> <li>chore</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>production: one-time task executed during release cycle</li> <li>generation: output produced from input data via structured process</li> <li>analysis: involves parsing logs and categorizing changes</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.    \u2192 Identifier: generate-release-notes-from-commits</p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: feat, fix, perf (top three most relevant in changelog)</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>Omit if uncertain.    \u2192 Stage: production (inferred from release context)</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: git-log, {{args}}</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: Highlights section, grouped changelog by type, evidence summary</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cGenerate human-readable release notes from recent commits to achieve transparency in changes.\u201d</p> </li> <li> <p>Produce metadata in the requested format:</p> </li> <li> <p>Default to a human-readable serialization; honor any requested alternative.</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>Merge: explicit inputs &gt; existing &gt; inferred.</li> <li>Validate lists; move unknowns to an extension field if needed.</li> <li>Remove empty keys.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Emit exactly one document: metadata, a single blank line, then the original body unchanged.</li> <li>Limit distinct placeholders to \u22647.</li> <li>All categories must be drawn from canonical taxonomy (exact strings).</li> <li>Summary must be under 120 characters and grammatically coherent.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches normalized id pattern (lowercase kebab-case, starts with letter).</li> <li>Categories non-empty and drawn from canonical taxonomy (\u22643).</li> <li>Stage, if present, is one of the allowed stages implied by stage hints.</li> <li>Dependencies, if present, are id-shaped (\u22645).</li> <li>Summary \u2264120 chars; punctuation coherent.</li> <li>Body text remains unaltered.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Input: src/example.ts</li> <li>Expected Output:   ## Features</li> <li>Add SSO login flow (PR #42)</li> </ul> <p>## Fixes   - Resolve logout crash (PR #57)</p>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#release-notes","title":"Release Notes","text":"<p>Trigger: /release-notes  <p>Purpose: Generate human-readable release notes from recent commits.</p> <p>You are a CLI assistant focused on helping contributors with the task: Generate human\u2011readable release notes from recent commits.</p> <ol> <li>Gather context by running <code>git log --pretty='* %s (%h) \u2014 %an' --no-merges {{args}}</code> for the commit log (no merges).</li> <li>Produce release notes grouped by type (feat, fix, perf, docs, refactor, chore). Include a Highlights section and a full changelog list.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Generate human\u2011readable release notes from recent commits.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: src/example.ts</p> <p>Expected Output:</p>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#features","title":"Features","text":"<ul> <li>Add SSO login flow (PR #42)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__release-notes.changelog.refactor/#fixes","title":"Fixes","text":"<ul> <li>Resolve logout crash (PR #57)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/","title":"Update CHANGELOG Template","text":"<p>Task: Given $1, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/#inputs","title":"Inputs","text":"<ul> <li><code>since=tag</code> (optional): starting tag for change range (e.g., v1.4.2)</li> <li><code>notes=include-prs</code> (optional): include PR numbers in output</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>Added</li> <li>Changed</li> <li>Deprecated</li> <li>Removed</li> <li>Fixed</li> <li>Security</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>generate: triggered by user input, produces static output</li> <li>process: data flow from source to structured result</li> <li>action: performs a specific operation on repository state</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </li> <li> <p>Example: git describe, git log, merge commits.</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li>Short list (\u22643) of unlocked outputs.  </li> <li> <p>Examples: Markdown snippet, unified diff, link references block.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/#assumptions-constraints","title":"Update CHANGELOG Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/#validation","title":"Update CHANGELOG Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__update.changelog.refactor/#output-format-examples","title":"Update CHANGELOG Template","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/","title":"Verify CHANGELOG Completeness","text":"<p>Task: Given $1, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: $2  </li> <li>Purpose: $3  </li> <li>Steps: $4  </li> <li>Output format: $5  </li> <li>Examples: $6  </li> <li>Notes: $7  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>verification</li> <li>compliance</li> <li>change validation</li> <li>formatting</li> <li>static analysis</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>validation</li> <li>pre-release check</li> <li>policy enforcement</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/#assumptions-constraints","title":"Verify CHANGELOG Completeness","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/#validation","title":"Verify CHANGELOG Completeness","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__changelog__verify.changelog.refactor/#output-format-examples","title":"Verify CHANGELOG Completeness","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/","title":"Cleanup Branches","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: cleanup-branches  </li> <li>Categories: git, maintenance, cleanup  </li> <li>Stage: post-release  </li> <li>Dependencies: none  </li> <li>Provided Artifacts: structured report, summary, evidence list  </li> <li>Summary: Suggest safe local branch cleanup (merged/stale) to achieve maintainable repository state.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/cleanup-branches</code> </li> <li>Purpose: Recommend which local branches are safe to delete and which to keep.  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>git</li> <li>maintenance</li> <li>cleanup</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>post-release \u2192 \"post-release\"</li> <li>maintenance \u2192 \"maintenance\"</li> <li>cleanup \u2192 \"cleanup\"</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.  </p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.  </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).  </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.  </p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.  </p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#assumptions-constraints","title":"Cleanup Branches","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#validation","title":"Cleanup Branches","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#output-format-examples","title":"Cleanup Branches","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__cleanup-branches.post-release-checks.refactor/#cleanup-branches_1","title":"Cleanup Branches","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/","title":"Post-Release License Check","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: summarize-third-party-licenses  </li> <li>categories: </li> <li>license-analysis  </li> <li>risk-assessment  </li> <li>output-formatting  </li> <li>lifecycle_stage: post-release  </li> <li>dependencies: </li> <li>license-checker  </li> <li>package-json  </li> <li>provided_artifacts: </li> <li>license-inventory  </li> <li>risk-flag-summary  </li> <li>summary: Summarize third-party licenses and risk flags to achieve clear visibility into legal exposure and mitigation paths.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#inputs","title":"Inputs","text":"<ul> <li>CLI tool: <code>npx --yes license-checker</code></li> <li>Target file: <code>package.json</code></li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>license-analysis</li> <li>risk-assessment</li> <li>output-formatting</li> <li>compliance-reporting</li> <li>dependency-scanning</li> <li>security-auditing</li> <li>post-release-checks</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>pre-release \u2192 early development, dependency setup  </li> <li>post-release \u2192 validation, legal review, risk mitigation  </li> <li>production \u2192 ongoing monitoring  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#assumptions-constraints","title":"Post-Release License Check","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#validation","title":"Post-Release License Check","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__post-release-checks__license-report.post-release-checks.refactor/#output-format-examples","title":"Post-Release License Check","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/","title":"Version Proposal","text":""},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: version-proposal</li> <li>categories: </li> <li>semantic-versioning</li> <li>commit-history-analysis</li> <li>lifecycle-stage: proposal</li> <li>dependencies: </li> <li>git describe --tags --abbrev=0</li> <li>git log --pretty='%s' --no-merges ..HEAD <li>provided-artifacts: </li> <li>structured-report</li> <li>version-suggestion (major/minor/patch)</li> <li>rationale-for-version-choice</li> <li>summary: Propose next version (major/minor/patch) from commit history.</li>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/version-proposal</code></li> <li>Purpose: Propose the next semantic version based on commit history.</li> <li>User context: Contributor requesting version suggestion via CLI.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>semantic-versioning</li> <li>commit-history-analysis</li> <li>git-operation</li> <li>version-suggestion</li> <li>rationale-generation</li> <li>report-synthesis</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>proposal \u2192 initial analysis and output generation</li> <li>validation \u2192 after user feedback or review</li> <li>deployment \u2192 post-approval integration</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li>Titles/headings: \"Version Proposal\", \"Purpose\", \"Output\"</li> <li>Imperative verbs: \"Propose\", \"Gather\", \"Synthesize\", \"Document\"</li> <li> <p>Explicit tags: <code>/version-proposal</code>, \"semantic version\", \"commit history\"</p> </li> <li> <p>Determine primary identifier:</p> </li> <li>Prefer explicit input \u2192 \"/version-proposal\"</li> <li> <p>Normalize to kebab-case \u2192 <code>version-proposal</code></p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input \u2192 \"semantic versioning\", \"commit history analysis\"</li> <li>Validate against canonical taxonomy \u2192 match exact strings</li> <li> <p>De-duplicate and limit to \u22643</p> </li> <li> <p>Determine lifecycle stage:</p> </li> <li>Map from category: \"proposal\" (from intent of initiating a suggestion)</li> <li> <p>Use stage hint mapping: proposal \u2192 initial analysis</p> </li> <li> <p>Determine dependencies:</p> </li> <li>Parse command phrases: git describe, git log \u2014 extract as id-shaped strings</li> <li> <p>Keep only relevant and id-shaped entries</p> </li> <li> <p>Determine provided artifacts:</p> </li> <li> <p>From output structure: structured report, version suggestion, rationale</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence: \"Propose next version (major/minor/patch) from commit history.\"</p> </li> <li> <p>Produce metadata in human-readable format.</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No explicit metadata present; all inferred and derived from prompt structure.</li> <li>Final metadata reflects clean, validated output.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Output must contain exactly one document: metadata block, blank line, then original body unchanged.</li> <li>All identifiers normalized to lowercase kebab-case.</li> <li>Categories strictly drawn from canonical taxonomy (exact strings).</li> <li>Lifecycle stage inferred only when explicit input is missing.</li> <li>Dependencies limited to \u22645 and in id-shaped form.</li> <li>Summary must be \u2264120 characters.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier: <code>version-proposal</code> \u2192 matches kebab-case pattern, starts with letter</li> <li>Categories: non-empty, drawn from canonical list (\u22643)</li> <li>Stage: \"proposal\" is valid per stage hints</li> <li>Dependencies: all are git commands, id-shaped, \u22645</li> <li>Artifacts: \u22643 items, relevant to output</li> <li>Summary: 94 characters, coherent and concise</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Example Input:</li> <li> <p>(none \u2013 command runs without arguments)</p> </li> <li> <p>Expected Output:</p> </li> <li> <p>Structured report following the specified sections.</p> </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/60-release__versioning__version-proposal.versioning.refactor/#version-proposal_1","title":"Version Proposal","text":"<p>Trigger: /version-proposal</p> <p>Purpose: Propose the next semantic version based on commit history.</p> <p>You are a CLI assistant focused on helping contributors with the task: Propose next version (major/minor/patch) from commit history.</p> <ol> <li>Gather context by running <code>git describe --tags --abbrev=0</code> for the last tag; running <code>git log --pretty='%s' --no-merges $(git describe --tags --abbrev=0)..HEAD</code> for the commits since last tag (no merges).</li> <li>Given the Conventional Commit history since the last tag, propose the next SemVer and justify why.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Propose next version (major/minor/patch) from commit history.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/","title":"Rank Root Prompts Command","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: rank-root-prompts</li> <li>categories:</li> <li>prompt-ranking</li> <li>project-context-analysis</li> <li>relevance-scoring</li> <li>lifecycle_stage: execution</li> <li>dependencies:</li> <li>{{query}}</li> <li>{{project_path}}</li> <li>{{prompt_path}}</li> <li>{{threshold}}</li> <li>provided_artifacts:</li> <li>markdown table with columns: filename | description | match_score (sorted by score desc, filtered by threshold)</li> <li>fallback message when no prompts meet threshold</li> <li>summary: Do rank prompt files based on query and project context to achieve a filtered, scored list of relevant prompts.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#inputs","title":"Inputs","text":"<ul> <li>{{query}}: User inquiry to evaluate against available prompts.</li> <li>{{project_path}}: Path to the software project (defaults to current directory if missing).</li> <li>{{prompt_path}}: Directory containing candidate prompt files (defaults to ~/.codex/prompts if missing).</li> <li>{{threshold}}: Minimum relevance score required for inclusion in output.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>prompt-ranking</li> <li>project-context-analysis</li> <li>relevance-scoring</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>execution \u2192 workflow-driven, ends with output generation</li> <li>analysis \u2192 involves scanning and summarizing context or content</li> <li>evaluation \u2192 scoring based on alignment metrics</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the input text:</li> <li>Titles/headings: \"Command\", \"Usage\", \"Args\", \"Task\", \"Rules\"</li> <li>Imperative verbs: \"Analyze\", \"Scan\", \"Evaluate\", \"Rank\", \"Generate\"</li> <li>Explicit tags: <code>{{query}}</code>, <code>{{project_path}}</code>, etc.</li> <li> <p>Dependency phrasing: \"If missing, use...\", \"Only include if...\"</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Inferred from command name and context \u2192 \"rank-root-prompts\"</li> <li> <p>Normalized to lowercase kebab-case \u2192 \"rank-root-prompts\"</p> </li> <li> <p>Determine categories:</p> </li> <li>Explicitly listed in workflow: prompt-ranking, project-context-analysis, relevance-scoring</li> <li> <p>Validated against canonical taxonomy</p> </li> <li> <p>Determine lifecycle/stage:</p> </li> <li>Workflow is sequential and ends with output \u2192 \"execution\"</li> <li> <p>Matches stage hint from execution context</p> </li> <li> <p>Determine dependencies:</p> </li> <li>Extracted directly from input placeholders and default rules</li> <li> <p>All are id-shaped (strings) and \u2264 5</p> </li> <li> <p>Determine provided artifacts:</p> </li> <li>Primary: markdown table with filename, description, match_score</li> <li> <p>Secondary: fallback message when no matches exceed threshold</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence capturing action, object, outcome \u2192 \"Do rank prompt files based on query and project context to achieve a filtered, scored list of relevant prompts.\"</p> </li> <li> <p>Produce metadata in structured format:</p> </li> <li>Uses human-readable key-value pairs with consistent naming</li> <li> <p>All fields are derived from explicit or inferable signals</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No existing metadata found; all values inferred from content and structure</li> <li>Final metadata is fully validated against constraints</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Only one document output: metadata block, blank line, then original prompt body.</li> <li>Maximum of 7 placeholders used (only 4 distinct input variables are active).</li> <li>All categories drawn exactly from canonical taxonomy.</li> <li>Stage inferred and matches known stage hints.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier: \"rank-root-prompts\" \u2192 normalized kebab-case, starts with letter \u2192 valid</li> <li>Categories: non-empty, \u22643, all in canonical list \u2192 valid</li> <li>Lifecycle stage: \"execution\" \u2192 allowed by stage hints \u2192 valid</li> <li>Dependencies: 4 items, all id-shaped (strings), \u22645 \u2192 valid</li> <li>Provided artifacts: exactly two, both defined and referenced \u2192 valid</li> <li>Summary: \u2264120 characters, coherent punctuation \u2192 valid</li> <li>Body unchanged \u2192 preserved as-is</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__rank-root-prompts.shared.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li> <p>Preferred:  <pre><code>| filename | description | match_score |\n|----------|-------------|-------------|\n| debug-prompt.md | This prompt helps debug runtime errors in Python apps. | 0.92 |\n| refactor-suggestions.md | Suggests code refactoring for performance issues. | 0.85 |\n</code></pre></p> </li> <li> <p>Fallback: \" No prompt exceeds threshold 0.7 \u2014 recommend creating a new prompt.\" ```</p> </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__reset-strategy.shared.refactor/","title":"Reset Strategy","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__reset-strategy.shared.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: reset-strategy  </li> <li>category: workflow  </li> <li>stage: decision  </li> <li>dependencies: []  </li> <li>provided_artifacts: [\"decision note\", \"exact commands\"]  </li> <li>summary: Decide when to hard reset to avoid layered bad diffs.  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__reset-strategy.shared.refactor/#reset-strategy_1","title":"Reset Strategy","text":"<p>Trigger: /reset-strategy</p> <p>Purpose: Decide when to hard reset and start clean to avoid layered bad diffs.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__reset-strategy.shared.refactor/#steps","title":"Steps","text":"<ol> <li>Run: <code>git status -sb</code> and <code>git diff --stat</code> to assess churn.</li> <li>If many unrelated edits or failing builds, propose: <code>git reset --hard HEAD</code> to discard working tree.</li> <li>Save any valuable snippets to <code>scratch/</code> before reset.</li> <li>Re-implement the minimal correct fix from a clean state.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__reset-strategy.shared.refactor/#output-format","title":"Output format","text":"<ul> <li>A short decision note and exact commands. Never execute resets automatically.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__reset-strategy.shared.refactor/#examples","title":"Examples","text":"<ul> <li>Recommend reset after repeated failing refactors touching 15+ files.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__reset-strategy.shared.refactor/#notes","title":"Notes","text":"<ul> <li>Warn about destructive nature. Require user confirmation.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/","title":"Research Roll-up Summary","text":"<p>Task: Given the following prompt, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then the original body.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger phrase: <code>/roll-up</code></li> <li>Purpose: Summarize per-item statuses, enabled decisions, unresolved risks, and count sources by domain type.</li> <li>Steps:</li> <li>Aggregate Conversation State Updates from prior items.</li> <li>Produce per-item status lines and decisions.</li> <li>Tally sources by domain type: gov, org, docs, blog, news, academic.</li> <li>Output format:   <pre><code>## Roll-up Summary\n- Item {n}: {status} \u2014 decision enabled: {\u2026}; risks: {\u2026}\n- Sources by domain type: {gov:X, org:Y, docs:Z, blog:A, news:B, academic:C}\n</code></pre></li> <li>Examples:</li> <li>Input: <code>/roll-up from items 1\u20133</code></li> <li>Output: Summary block as above.</li> <li>Notes:</li> <li>Use counts derived from the Evidence Logs.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>gov, org, docs, blog, news, academic</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<p>processing \u2192 aggregation and summarization phase generation \u2192 output creation stage  </p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from input text:</li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input; otherwise infer from main action + object.</li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).</li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.</li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.</li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/#assumptions-constraints","title":"Research Roll-up Summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/#validation","title":"Research Roll-up Summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__roll-up.shared.refactor/#output-format-examples","title":"Research Roll-up Summary","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/","title":"Produce Readme-Level Summary of Repo","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/#inputs","title":"Inputs","text":"<ul> <li>Task: Generate a README-level summary of the repository.</li> <li>Context sources: <code>git ls-files | sed -n '1,400p'</code>, <code>README.md</code>, and <code>docs/</code> directory.</li> <li>Output format: structured report with clear sections (What, Why, How, Getting Started) and evidence documentation.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>gathering</li> <li>generating</li> <li>synthesizing</li> <li>documenting</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>input \u2192 analysis \u2192 output (generation)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li>Titles/headings: \"Produce a README-level summary\", \"Gather context\", \"Generate high-level summary\"</li> <li>Imperative verbs: produce, gather, generate, synthesize, document</li> <li> <p>Intent sentences: \"help contributors with the task\", \"synthesize insights into requested format\"</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Explicit input: \"Produce a README-level summary of the repo\"</li> <li> <p>Normalized to: <code>produce-readme-summary-of-repo</code></p> </li> <li> <p>Determine categories:</p> </li> <li>From verbs and headings: gathering, generating, synthesizing</li> <li> <p>Validated against canonical taxonomy; de-duplicated</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Inferred as \"generation\" via stage mapping from \"analysis \u2192 output\"</li> <li> <p>Stage: <code>generation</code></p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li>Implicit: access to Git files and README.md/docs</li> <li>Id-shaped items: <code>git-ls-files</code>, <code>readme-md</code>, <code>docs</code></li> <li> <p>Count \u2264 3; kept as minimal</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li>Structured report</li> <li>Evidence documentation</li> <li> <p>High-level summary with priorities and next steps</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>\"Do produce a README-level summary of the repo to achieve clear, maintainable documentation.\"</p> </li> <li> <p>Produce metadata in structured format:</p> </li> <li>Identifier: <code>produce-readme-summary-of-repo</code></li> <li>Categories: gathering, generating, synthesizing</li> <li>Stage: generation</li> <li>Dependencies: git-ls-files, readme-md, docs</li> <li>Artifacts: structured report, evidence documentation, high-level summary</li> <li> <p>Summary: Do produce a README-level summary of the repo to achieve clear, maintainable documentation.</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No existing metadata; all values inferred or explicit</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Output is exactly one document: metadata block + blank line + original body.</li> <li>Only 7 placeholders used (within limit).</li> <li>All fields validated against schema and constraints.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches normalized id pattern (<code>kebab-case</code>, starts with letter, lowercase)</li> <li>Categories non-empty and from canonical taxonomy (\u22643)</li> <li>Stage is one of: input, analysis, generation \u2192 valid via mapping rules</li> <li>Dependencies are id-shaped (\u22645), relevant to context sources</li> <li>Artifacts \u22643 and meaningful</li> <li>Summary \u2264120 characters; punctuation coherent</li> <li>Original body unchanged</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__summary.shared.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Identifier: <code>produce-readme-summary-of-repo</code></li> <li>Categories: gathering, generating, synthesizing</li> <li>Stage: generation</li> <li>Dependencies: git-ls-files, readme-md, docs</li> <li>Artifacts: structured report, evidence documentation, high-level summary</li> <li>Summary: Do produce a README-level summary of the repo to achieve clear, maintainable documentation.</li> </ul> <p>You are a CLI assistant focused on helping contributors with the task: Produce a README\u2011level summary of the repo.</p> <ol> <li>Gather context by running <code>git ls-files | sed -n '1,400p'</code> for the repo map (first 400 files); inspecting <code>README.md</code> for the key docs if present; inspecting <code>docs</code> for the key docs if present.</li> <li>Generate a high\u2011level summary (What, Why, How, Getting Started).</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Produce a README\u2011level summary of the repo.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>Structured report following the specified sections.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/","title":"Switch Model","text":"<p>Task: Given the following prompt, produce a structured metadata block and then emit the original body unchanged. The metadata must expose identifiers, categories, optional lifecycle/stage, optional dependencies, optional provided artifacts, and a concise summary. Output = metadata, blank line, then $1.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#inputs","title":"Inputs","text":"<ul> <li>Identifier: switch-model</li> <li>Category: model selection</li> <li>Category: evaluation</li> <li>Category: recommendation</li> <li>Lifecycle stage: evaluate</li> <li>Dependencies: none</li> <li>Provided artifacts: table of task \u2192 model \u2192 settings \u2192 win reason</li> <li>Summary: Do evaluate AI backend performance to achieve optimal model selection per task.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>model selection</li> <li>evaluation</li> <li>recommendation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>define task type \u2192 input/definition</li> <li>select candidate models \u2192 selection</li> <li>run tests and measure \u2192 evaluation</li> <li>recommend model \u2192 decision/recommendation</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs $5.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via $6.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#assumptions-constraints","title":"Switch Model","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#validation","title":"Switch Model","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#output-format-examples","title":"Switch Model","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#switch-model_1","title":"Switch Model","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#steps","title":"Switch Model","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__switch-model.shared.refactor/#output-format","title":"Switch Model","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/","title":"Advance Task(s)","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: <code>tm-42</code>, <code>tm-43</code></li> <li>Categories: Planning, Testing, Commit, Acceptance</li> <li>Lifecycle/Stage: plan-and-prepare</li> <li>Dependencies: [related dependencies from tasks.json]</li> <li>Provided Artifacts: Plan, Tests, Acceptance Criteria, Conventional Commits Message</li> <li>Summary: Do advance tasks by producing a work plan, tests, and commit message to move toward done.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li>Task IDs (e.g., <code>TM-42</code>, <code>TM-43</code>)</li> <li>Tasks.json file for reference (not mutated)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<p>Planning, Testing, Commit, Acceptance</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<p>advance \u2192 plan-and-prepare plan \u2192 planning test \u2192 testing commit \u2192 commit acceptance \u2192 acceptance  </p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#assumptions-constraints","title":"Advance Task(s)","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#validation","title":"Advance Task(s)","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__advance.tm.refactor/#output-format-examples","title":"Advance Task(s)","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/","title":"Blocker Diagnosis","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li>target_id (string): The unique identifier of the task to diagnose.</li> <li>tasks.json (file): JSON file containing task metadata and dependencies.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>dependency</li> <li>ambiguity</li> <li>environment</li> <li>CI</li> <li>external</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>diagnosis \u2192 assessment</li> <li>assessment \u2192 unblocking proposal</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the content:</li> <li>Titles/headings: \"Blocker Diagnosis\", \"Purpose\", \"Steps\", \"Output format\"</li> <li>Imperative verbs: \"Diagnose\", \"Enumerate\", \"Classify\", \"Propose\"</li> <li> <p>Explicit tags: \"dependency\", \"ambiguity\", \"environment\", \"CI\", \"external\"</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Prefer explicit input: <code>target_id</code></li> <li> <p>Normalize to kebab-case, lowercase, and length-capped (e.g., TM-17 \u2192 tm-17)</p> </li> <li> <p>Determine categories:</p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings.</li> <li>Final list: dependency, ambiguity, environment, CI, external</li> <li> <p>Validated and de-duplicated</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Map \"diagnosis\" to stage \"assessment\"</li> <li> <p>Omit if not explicitly stated</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li>Required inputs: tasks.json, target_id</li> <li> <p>Id-shaped items only (e.g., TM-17)</p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li>Two tables: blockers (type | item | evidence), actions (step | owner | effort | success_criteria)</li> <li> <p>A narrative under \"Findings\"</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>\"Diagnose why a task is blocked and propose minimal unblocking paths.\"</p> </li> <li> <p>Produce metadata in the requested format:</p> </li> <li>Identifier: tm-17</li> <li>Categories: dependency, ambiguity, environment, CI, external</li> <li>Stage: assessment</li> <li>Dependencies: tasks.json, target_id</li> <li>Artifacts: blockers table, actions table, findings narrative</li> <li> <p>Summary: Diagnose why a task is blocked and propose minimal unblocking paths.</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No explicit metadata present; all inferred from content.</li> <li>Final output uses only valid, canonical values.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Emit exactly one document: metadata block, blank line, then original body unchanged.</li> <li>Limit distinct placeholders to \u22647 (here: 6 used).</li> <li>All categories must be in the canonical list.</li> <li>Stage must map to a known stage via hints.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier matches kebab-case pattern (e.g., tm-17)</li> <li>Categories non-empty and drawn from canonical taxonomy (\u22645)</li> <li>Stage is \"assessment\" \u2014 valid per hint mapping</li> <li>Dependencies are id-shaped: tasks.json, target_id</li> <li>Artifacts: exactly two tables + narrative</li> <li>Summary \u2264120 chars; punctuation coherent</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Identifier: tm-17  </li> <li>Categories: dependency, ambiguity, environment, CI, external  </li> <li>Stage: assessment  </li> <li>Dependencies: tasks.json, target_id  </li> <li>Artifacts: blockers table, actions table, findings narrative  </li> <li>Summary: Diagnose why a task is blocked and propose minimal unblocking paths.  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__blockers.tm.refactor/#blocker-diagnosis_1","title":"Blocker Diagnosis","text":"<p>Trigger: /tm-blockers</p> <p>Purpose: Diagnose why a task is blocked and propose the shortest path to unblock it.</p> <p>Steps:</p> <ol> <li>Load tasks.json and the target id.</li> <li>Enumerate unmet dependencies and missing artifacts (tests, docs, approvals).</li> <li>Classify each blocker: dependency, ambiguity, environment, CI, external.</li> <li>Propose 1\u20133 minimal unblocking actions, each with owner, effort, and success check.</li> </ol> <p>Output format:</p> <ul> <li>\"# Blocker Report: \" <li>Tables: blockers (type | item | evidence), actions (step | owner | effort | success_criteria).</li> <p>Examples:</p> <ul> <li>Input: /tm-blockers TM-17</li> <li>Output: two tables and a short narrative under \"Findings\".</li> </ul> <p>Notes:</p> <ul> <li>If the task is not actually blocked, state why and redirect to /tm-advance.</li> </ul> <p>Respond with the corresponding output fields, starting with the field <code>[[ ## reasoning ## ]]</code>, then <code>[[ ## template_markdown ## ]]</code>, and then ending with the marker for <code>[[ ## completed ## ]]</code>.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/","title":"CI/Test Checklist from Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li>Identifier: /tm-ci  </li> <li>Dependencies: /tm-next  </li> <li>Output Format: </li> <li>\"# CI Plan\"</li> <li>Tables: jobs (name | trigger | commands | est_time) and tests (scope | command | expected_artifacts)</li> <li>\"## Risk Areas\" bullets and \"## Follow-ups\"</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>CI Plan</li> <li>Testing</li> <li>Risk Areas</li> <li>Follow-ups</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Planning: When deriving a near-term plan from task data.</li> <li>Execution: If actual jobs are triggered or run.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the input text  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.  </p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.    \u2192 Identifier: <code>/tm-ci</code> </p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).    \u2192 Categories: CI Plan, Testing, Risk Areas, Follow-ups  </p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.    \u2192 Stage: Planning  </p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).    \u2192 Dependencies: /tm-next  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.    \u2192 Artifacts: CI jobs table, test table, risk bullets, follow-up items  </p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#assumptions-constraints","title":"CI/Test Checklist from Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#validation","title":"CI/Test Checklist from Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#output-format-examples","title":"CI/Test Checklist from Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__ci.tm.refactor/#citest-checklist-from-tasks_1","title":"CI/Test Checklist from Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: prd-delta</li> <li>categories: </li> <li>delta</li> <li>task comparison</li> <li>prds</li> <li>lifecycle_stage: analyze</li> <li>dependencies: </li> <li>prd_content</li> <li>tasks_json</li> <li>provided_artifacts: </li> <li>delta_summary_table</li> <li>json_patch_operations</li> <li>assumptions_open_questions</li> <li>summary: Compare a PRD to tasks.json and propose add/update/remove operations.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li>PRD content (text or path like ./prd.txt)</li> <li>Existing tasks.json file path</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>delta</li> <li>task comparison</li> <li>prds</li> <li>analysis</li> <li>automation</li> <li>update</li> <li>generate</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>analyze \u2192 input parsing, objective extraction, mapping</li> <li>compare \u2192 fuzzy matching, gap detection</li> <li>propose \u2192 output generation: adds/updates/removals</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#assumptions-constraints","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#validation","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#output-format-examples","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#json-patch","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#assumptions","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#open-questions","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__delta.tm.refactor/#prd-tasks-delta_1","title":"PRD \u2192 Tasks Delta","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/","title":"Generate Status Docs","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: <code>/tm-docs</code></li> <li>Source: tasks.json</li> <li>Output format: Markdown document for README or STATUS.md</li> <li>Required fields: done, in_progress, blocked, ready_next</li> <li>Optional: changelog (if timestamps exist)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>documentation</li> <li>status reporting</li> <li>project tracking</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>Generation \u2192 primary stage</li> <li>Composition \u2192 sub-stage</li> <li>Output \u2192 final delivery</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from the prompt:</li> <li>Titles/headings: \"Generate Status Docs\", \"Purpose\", \"Steps\", \"Output format\"</li> <li>Imperative verbs: \"Parse\", \"Compose\", \"Produce\", \"Emit\"</li> <li>Explicit tags: <code>/tm-docs</code>, \"tasks.json\", \"STATUS.md\"</li> <li> <p>Dependency phrasing: \"from tasks.json\", \"per /tm-next logic\"</p> </li> <li> <p>Determine the primary identifier:</p> </li> <li>Preferred input: <code>/tm-docs</code></li> <li> <p>Normalized: <code>tm-docs</code></p> </li> <li> <p>Determine categories:</p> </li> <li>Explicit input: none</li> <li>Inferred from verbs and context: documentation, status reporting, project tracking</li> <li> <p>Validated against taxonomy; de-duplicated \u2192 3 entries</p> </li> <li> <p>Determine lifecycle/stage (optional):</p> </li> <li>Prefer explicit input \u2192 not provided</li> <li> <p>Map via stage hints \u2192 \"Generation\" (primary)</p> </li> <li> <p>Determine dependencies (optional):</p> </li> <li>\"Parse tasks.json\"</li> <li>\"/tm-next logic for state classification\"</li> <li> <p>Normalized to: <code>tasks.json</code>, <code>/tm-next</code></p> </li> <li> <p>Determine provided artifacts (optional):</p> </li> <li>A single Markdown document (STATUS.md)</li> <li>Status boards per status category (Ready Next, In Progress, Blocked, Done)</li> <li> <p>7-day changelog if timestamps exist; otherwise, recent done items</p> </li> <li> <p>Compose summary:</p> </li> <li> <p>\"Generate a project status document from tasks.json to report current focus, progress, and risks.\"</p> </li> <li> <p>Produce metadata in structured format:</p> </li> <li>Identifier: tm-docs</li> <li>Categories: documentation, status reporting, project tracking</li> <li>Stage: generation</li> <li>Dependencies: tasks.json, /tm-next</li> <li>Artifacts: STATUS.md, status boards, changelog (if available)</li> <li> <p>Summary: Generate a project status document from tasks.json to report current focus, progress, and risks.</p> </li> <li> <p>Reconcile if input already contains metadata:</p> </li> <li>No prior metadata present; all fields inferred and validated.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#assumptions-constraints","title":"Assumptions &amp; Constraints","text":"<ul> <li>Output is exactly one document: metadata block, blank line, then original body.</li> <li>All identifiers are normalized (lowercase, kebab-case).</li> <li>Categories strictly from canonical taxonomy (\u22643).</li> <li>Stage is one of the allowed stages in stage hints.</li> <li>Dependencies are id-shaped and \u22645.</li> <li>Summary \u2264120 characters; coherent punctuation.</li> <li>Original content ($1) remains unaltered.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#validation","title":"Validation","text":"<ul> <li>Identifier: <code>tm-docs</code> \u2192 matches normalized pattern</li> <li>Categories: non-empty, from taxonomy, \u22643</li> <li>Stage: \"generation\" \u2192 valid per stage hints</li> <li>Dependencies: <code>tasks.json</code>, <code>/tm-next</code> \u2192 id-shaped, \u22645</li> <li>Artifacts: 3 listed (document, boards, changelog)</li> <li>Summary: 108 characters; grammatically sound</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#output-format-examples","title":"Output format examples","text":"<ul> <li>Identifier: tm-docs  </li> <li>Categories: documentation, status reporting, project tracking  </li> <li>Stage: generation  </li> <li>Dependencies: tasks.json, /tm-next  </li> <li>Artifacts: STATUS.md, status boards, changelog (if available)  </li> <li>Summary: Generate a project status document from tasks.json to report current focus, progress, and risks.  </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__docs.tm.refactor/#generate-status-docs_1","title":"Generate Status Docs","text":"<p>Trigger: /tm-docs</p> <p>Purpose: Emit a project status document from tasks.json for README or STATUS.md.</p> <p>Steps:</p> <ol> <li>Parse tasks.json; collect done, in_progress, blocked, and ready_next (per /tm-next logic).</li> <li>Compose a concise narrative: current focus, recent wins, top risks.</li> <li>Produce status boards for each status with id, title, and owner if present.</li> <li>Add a 7-day changelog if timestamps exist; otherwise, summarize recent done items.</li> </ol> <p>Output format:</p> <ul> <li>\"# Project Status \u2014 \" <li>Sections: Summary, Ready Next, In Progress, Blocked, Done, Changelog.</li> <p>Examples:</p> <ul> <li>Input: /tm-docs</li> <li>Output: a single Markdown document suitable for commit as STATUS.md.</li> </ul> <p>Notes:</p> <ul> <li>Avoid leaking secrets. Do not invent owners; omit unknown fields.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/","title":"Next Ready Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: task-id</li> <li>category: task-management</li> <li>lifecycle-stage: ready-to-start</li> <li>dependencies: [dependency-id]</li> <li>provided-artifacts: table-of-ready-tasks, notes-on-tie-breaks</li> <li>summary: List tasks ready to start by checking status and dependencies.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li>Trigger: /tm-next</li> <li>Input format: command string or task list</li> <li>Output format: structured table with id, title, priority, why_ready, prereqs; includes \"No ready tasks\" if none exist</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>task-management</li> <li>workflow-automation</li> <li>dependency-tracking</li> <li>status-reporting</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>pending \u2192 waiting for dependencies</li> <li>blocked \u2192 requires unmet prerequisites</li> <li>ready-to-start \u2192 all dependencies met, status in {pending, blocked}</li> <li>execution \u2192 being worked on</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).</p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#assumptions-constraints","title":"Next Ready Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#validation","title":"Next Ready Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__next.tm.refactor/#output-format-examples","title":"Next Ready Tasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/","title":"TaskMaster Overview","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#metadata","title":"Metadata","text":"<ul> <li>identifier: tm-overview  </li> <li>category: summarization  </li> <li>lifecycle_stage: inspection  </li> <li>dependencies: tasks.json  </li> <li>provided_artifacts: overview bullets, totals table, top pending list, critical path list, issues list  </li> <li>summary: Summarize TaskMaster tasks.json by status, priority, and dependency health to orient work.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li><code>tasks.json</code> path (optional; defaults to repo root)</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>summarization</li> <li>analysis</li> <li>reporting</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>inspection \u2192 summarizing state, reading data</li> <li>analysis \u2192 detecting cycles, computing paths</li> <li>reporting \u2192 outputting tables and lists</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from $1  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).  </li> <li> <p>De-duplicate.</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.  </li> <li> <p>Omit if uncertain.</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#assumptions-constraints","title":"TaskMaster Overview","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#validation","title":"TaskMaster Overview","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#output-format-examples","title":"TaskMaster Overview","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#totals","title":"TaskMaster Overview","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__overview.tm.refactor/#taskmaster-overview_1","title":"TaskMaster Overview","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/","title":"Refine Task into Subtasks","text":"<p>Task: Given a task ID and description, expand it into actionable subtasks with clear acceptance criteria.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/#inputs","title":"Inputs","text":"<ul> <li><code>task_id</code>: A string identifier (e.g., TM-09) for the original task.</li> <li><code>description</code>: The full text of the original task to refine.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/#canonical-taxonomy-exact-strings","title":"Canonical taxonomy (exact strings)","text":"<ul> <li>task refinement</li> <li>planning</li> <li>subtask decomposition</li> <li>acceptance criteria</li> <li>dependency mapping</li> <li>output formatting</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/#stage-hints-for-inference","title":"Stage hints (for inference)","text":"<ul> <li>planning \u2192 when analyzing scope and breaking down tasks</li> <li>design \u2192 when defining structure or templates</li> <li>execution \u2192 when implementing actions directly</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/#algorithm","title":"Algorithm","text":"<ol> <li>Extract signals from input  </li> <li> <p>Titles/headings, imperative verbs, intent sentences, explicit tags, and dependency phrasing.*</p> </li> <li> <p>Determine the primary identifier  </p> </li> <li>Prefer explicit input; otherwise infer from main action + object.*  </li> <li>Normalize (lowercase, kebab-case, length-capped, starts with a letter).*  </li> <li> <p>De-duplicate.*</p> </li> <li> <p>Determine categories  </p> </li> <li>Prefer explicit input; otherwise infer from verbs/headings vs canonical taxonomy.*  </li> <li> <p>Validate, sort deterministically, and de-dupe (\u22643).*</p> </li> <li> <p>Determine lifecycle/stage (optional)  </p> </li> <li>Prefer explicit input; otherwise map categories via stage hints.*  </li> <li> <p>Omit if uncertain.*</p> </li> <li> <p>Determine dependencies (optional)  </p> </li> <li> <p>Parse phrases implying order or prerequisites; keep id-shaped items (\u22645).*  </p> </li> <li> <p>Determine provided artifacts (optional)  </p> </li> <li> <p>Short list (\u22643) of unlocked outputs.*</p> </li> <li> <p>Compose summary  </p> </li> <li> <p>One sentence (\u2264120 chars): \u201cDo"},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/#assumptions-constraints","title":"Refine Task into Subtasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/#validation","title":"Refine Task into Subtasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_shared__tm__refine.tm.refactor/#output-format-examples","title":"Refine Task into Subtasks","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_templates__instruction-file.templates.refactor/","title":"Instruction File","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_templates__instruction-file.templates.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: instruction-file</li> <li>Categories: context, coding standards, review rituals, testing, security, limits</li> <li>Stage: setup</li> <li>Dependencies: none</li> <li>Provided Artifacts: cursor.rules, windsurf.rules, claude.md</li> <li>Summary: Generate or update project-specific rule files to standardize team practices.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__instruction-file.templates.refactor/#steps","title":"Steps","text":"<ol> <li>Scan repo for existing instruction files.</li> <li>Compose sections: Context, Coding Standards, Review Rituals, Testing, Security, Limits.</li> <li>Include \"Reset and re-implement cleanly\" guidance and scope control.</li> <li>Write to chosen file and propose a commit message.</li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__instruction-file.templates.refactor/#output-format","title":"Output format","text":"<ul> <li>Markdown instruction file with stable headings.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__prompt-sequence-generator.templates.refactor/","title":"Prompt: Generate Prompt Execution Sequence","text":"<p>Purpose: Given a high-level goal and a set of available prompts, generate the logical execution sequence required to accomplish that goal by chaining the prompts together.</p>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__prompt-sequence-generator.templates.refactor/#inputs","title":"Inputs","text":"<ul> <li> <p>High-Level Goal: {{high_level_goal}}</p> <ul> <li>A clear, one-sentence description of the final outcome the user wants to achieve.</li> <li>Example: \"Create and document a pull request for the currently staged changes.\"</li> </ul> </li> <li> <p>Available Prompts: <pre><code>{{available_prompts}}\n</code></pre></p> <ul> <li>A list of candidate prompt names (e.g., from the output of <code>rank-root-prompts</code>).</li> <li>Example: ['pr-desc.md', 'commit-msg.md', 'changed-files.md', 'review.md', 'release-notes.md']</li> </ul> </li> <li> <p>Context (Optional): {{context}}</p> <ul> <li>Any additional context, such as the current state of the git repository or specific files of interest.</li> <li>Example: \"The user has already staged files using <code>git add</code>.\"</li> </ul> </li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__prompt-sequence-generator.templates.refactor/#instructions-for-the-ai","title":"Instructions for the AI","text":"<ol> <li> <p>Analyze the Goal: Deconstruct the <code>{{high_level_goal}}</code> into a series of logical steps required to get from the starting state to the final outcome.</p> </li> <li> <p>Map Prompts to Steps: For each logical step, identify the most suitable prompt from the <code>{{available_prompts}}</code> list that can perform that step.</p> <ul> <li>Consider the inputs and outputs of each prompt to determine dependencies. A prompt's input is often the output of a previous one.</li> </ul> </li> <li> <p>Establish Order: Arrange the selected prompts into a numbered sequence based on their dependencies. The sequence should represent a complete and logical workflow.</p> </li> <li> <p>Identify Gaps: If any necessary step in the workflow cannot be fulfilled by one of the available prompts, explicitly state what action or prompt is missing.</p> </li> </ol>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__prompt-sequence-generator.templates.refactor/#required-output-format","title":"Required Output Format","text":"<p>Execution Sequence:</p> <ol> <li><code>[prompt_name_1.md]</code>: [Brief justification for why this prompt is first and what it accomplishes.]</li> <li><code>[prompt_name_2.md]</code>: [Brief justification for why this prompt is second, and how it uses the output of the previous step.]</li> <li>...</li> </ol> <p>Identified Gaps (if any):</p> <ul> <li>[Description of a missing step or prompt needed to complete the workflow.]</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__system-level-instruction-editor.templates.refactor/","title":"System Instruction: Canonical Instruction File Editor","text":""},{"location":"temp-prompts-organized/prompt-front-matter/_templates__system-level-instruction-editor.templates.refactor/#metadata","title":"Metadata","text":"<ul> <li>Identifier: system-level-instruction-editor</li> <li>Categories: </li> <li>Instruction Editing</li> <li>System Operations</li> <li>Documentation Workflow</li> <li>Lifecycle/Stage: Operational</li> <li>Dependencies: </li> <li>logs/artifacts</li> <li>affected services/modules</li> <li>build/version/commit</li> <li>time window/region/tenant</li> <li>SLO/SLA impacted</li> <li>Provided Artifacts:</li> <li>Updated file in Canvas</li> <li>Variant files (GEMINI.md, CLAUDE.md)</li> <li>Full content in chat on size limit</li> <li>Summary: Do edit a canonical instruction file to achieve structured, validated, and deployable changes.</li> </ul>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__system-level-instruction-editor.templates.refactor/#inputs","title":"Inputs","text":"<ul> <li> <li> <li> <li> <li>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__system-level-instruction-editor.templates.refactor/#steps","title":"Steps","text":"<ol> <li>Collect relevant data (). <li>Group by symptom/pattern; for each group, list 2\u20133 plausible causes.</li> <li>Propose disambiguators (instrumentation, targeted inputs, experiments).</li> <li>Sketch minimal fixes (patches/config toggles/rollbacks) with risk notes.</li> <li>Validate fixes (tests to run, monitors to watch, acceptance criteria).</li> <li>Roll out &amp; verify (staged rollout plan, owners, ETA).</li> <li> <p>Capture follow-ups (refactors, docs, guardrails).</p> </li> <li> <p>Deconstruct the request: Identify the user\u2019s intent and the minimal set of sections that should be added or updated.</p> </li> <li>Locate insertion points: Use semantic matching on headings and content to find the best-fit sections for the user\u2019s request. If no clear section exists, create a new minimal section with a logically consistent title.</li> <li>Apply minimal coherent change: Insert or modify content to satisfy the request while preserving tone, structure, and cross-references. Keep unrelated sections unchanged.</li> <li> <p>Run invariants:</p> </li> <li> <p>The entire file must be present (no placeholders, no truncation).</p> </li> <li>Markdown structure and formatting must remain valid.</li> <li>Internal references and links stay accurate.</li> <li> <p>Render in Canvas:</p> </li> <li> <p>If editing an existing file: open in Canvas and replace the full contents with the updated version.</p> </li> <li>If creating a new file: create it in Canvas and display the entire file.</li> <li>Variants (optional or on request): Generate <code>GEMINI.md</code> and/or <code>CLAUDE.md</code> from the updated <code>AGENTS.md</code> using only the Platform Substitution Rules. Render each variant\u2019s entire file in Canvas (one file per Canvas operation).</li> <li> <p>Size-limit fallback: If a size cap prevents full-file rendering in Canvas, output the entire file in chat, then append:</p> </li> <li> <p>\u201cNote: Full content was output in chat due to a size limit preventing Canvas rendering.\u201d</p> </li>"},{"location":"temp-prompts-organized/prompt-front-matter/_templates__system-level-instruction-editor.templates.refactor/#output-format","title":"Output format","text":"<ul> <li>Table:  \u2192  \u2192  \u2192  \u2192 ."},{"location":"temp-prompts-organized/prompt-front-matter/_templates__system-level-instruction-editor.templates.refactor/#example-rows","title":"Example rows","text":"<ul> <li>\"\" \u2192  \u2192  \u2192  \u2192 ."},{"location":"temp-prompts-refactored/3-step-process-b4-refactoring/","title":"3-step process (pre-refactor)","text":"<p>Refactoring Pre-Refactor Process</p>"},{"location":"temp-prompts-refactored/3-step-process-b4-refactoring/#3-step-process-b4-refactoring","title":"3-step-process-b4-refactoring","text":""},{"location":"temp-prompts-refactored/3-step-process-b4-refactoring/#describe-the-task-and-call-the-plan-tool","title":"describe the task and call the plan tool","text":"<ol> <li>$1. Draft a plan (don't code)</li> </ol>"},{"location":"temp-prompts-refactored/3-step-process-b4-refactoring/#identify-target-files-for-modification","title":"identify target files for modification","text":"<ol> <li>Conduct code analysis to determine files requiring modification: $2</li> </ol>"},{"location":"temp-prompts-refactored/3-step-process-b4-refactoring/#provide-sample-refactor-implementation","title":"provide sample refactor implementation","text":"<ol> <li>Provide a sample refactor for $3</li> </ol>"},{"location":"temp-prompts-refactored/Prompt-Optimizer/","title":"Prompt Optimizer","text":"<p>Prompt Optimization Template</p> <p>You are $2 \u2014 Prompt Optimization Specialist. Transform any raw user prompt into up to 4 concise, high-leverage variants that preserve intent while improving clarity, constraints, and outcome specificity.</p> <p>Your job</p> <ul> <li>Keep the user\u2019s original goal intact. Remove fluff, tighten verbs, and make deliverables and success criteria explicit.</li> <li>Resolve ambiguity with neutral defaults or clearly marked placeholders like <code>{context}</code>, <code>{inputs}</code>, <code>{constraints}</code>, <code>{acceptance_criteria}</code>, <code>{format}</code>, <code>{deadline}</code>.</li> <li>Add structure (steps, bullets, numbered requirements) only when it improves execution.</li> <li>Match or gently improve the tone implied by the user (directive/spec-like, polite, collaborative). Never over-polish into marketing-speak.</li> <li>Do not introduce tools, external data, or scope changes unless the user asked for them.</li> <li>Prefer active voice, testable requirements, and measurable outputs.</li> </ul> <p>Output rules</p> <ul> <li>Return only the variants, each in its own fenced code block. No commentary, no preamble, no trailing notes.</li> <li>Produce 1\u20134 variants (default 3). Stop at 4 unless the user explicitly requests more.</li> <li>For each block, begin with a short bracketed style tag (e.g., <code>[Directive]</code>, <code>[Spec]</code>, <code>[Polite]</code>, <code>[QA-Ready]</code>) on the first line, then the optimized prompt on subsequent lines.</li> </ul> <p>Optimization checklist (apply silently)</p> <ul> <li>Clarify objective and end artifact</li> <li>Specify audience/user/environment if implied</li> <li>Pin input sources and constraints</li> <li>Define acceptance criteria and non-goals</li> <li>State format/structure and length limits</li> <li>Include edge cases or examples if hinted</li> <li>Keep placeholders where user must decide</li> <li>Common pitfalls: Ambiguous constraints, vague success metrics, over-engineering</li> <li>Expected output quality: Clear deliverables, testable criteria, minimal fluff</li> </ul> <p>Now optimize the next input. User prompt: $1</p>"},{"location":"temp-prompts-refactored/action-diagram/","title":"Action Diagram","text":""},{"location":"temp-prompts-refactored/action-diagram/#nodes","title":"Nodes","text":"<ul> <li>$1</li> <li>$2</li> </ul>"},{"location":"temp-prompts-refactored/action-diagram/#edges","title":"Edges","text":"<ul> <li>$3 -&gt; $4</li> </ul>"},{"location":"temp-prompts-refactored/adr-new/","title":"ADR \u2013 new","text":"<p>Architecture Decision Record Drafting Prompt</p> <p>You are a CLI assistant to draft an Architecture Decision Record with pros/cons using the following inputs:</p> <ol> <li>Analyze project context from $1.</li> <li>Generate a concise ADR with Context, Decision, Status, Consequences. Title: $3.</li> <li>Synthesize insights into the output format with clear priorities and next steps.</li> </ol> <p>Output Requirements: - Provide a summary restating the goal. - Highlight $4, $5, and $6. - Document $7 to ensure maintainability.</p> <p>Example Input: $2</p> <p>Expected Output: Actionable summary aligned with output requirements.</p>"},{"location":"temp-prompts-refactored/adr-new.refactor/","title":"ADR \u2013 new (refactor)","text":"<p>{$2 or Inferred Name}</p> <p>You are a CLI assistant to draft an Architecture Decision Record with pros/cons using the following inputs:</p> <ol> <li>Analyze project context from $1.</li> <li>Generate a concise ADR with Context, Decision, Status, Consequences. Title: $3.</li> <li>Synthesize insights into the output format with clear priorities and next steps.</li> </ol> <p>Output Requirements: - Provide a summary restating the goal. - Highlight $4, $5, and $6. - Document $7 to ensure maintainability.</p> <p>Example Input: $2</p> <p>Expected Output: Actionable summary aligned with output requirements.</p>"},{"location":"temp-prompts-refactored/api-contract/","title":"API contract","text":""},{"location":"temp-prompts-refactored/api-contract/#api-contract-generator","title":"API Contract Generator","text":"<p>Trigger: $1</p> <p>Purpose: Author an initial $3 contract from requirements.</p> <p>Steps:</p> <ol> <li>Parse inputs and existing docs. If REST, prefer $3; if GraphQL, produce $3.</li> <li>Define resources, operations, request/response schemas, error model, auth, and rate limit headers.</li> <li>Add examples for each endpoint or type. Include pagination and filtering conventions.</li> <li>Save to $5.</li> <li>Emit changelog entry $6 with rationale and breaking-change flags.</li> </ol> <p>Affected files: - $5 - $6</p> <p>Output format: - <code>Contract Path</code>: $4 - <code>Design Notes</code>: $7 - Fenced code block with spec body</p> <p>Examples: - <code>$1</code> \u2192 $5</p> <p>Notes: - Follow $7 style for REST unless specified.</p>"},{"location":"temp-prompts-refactored/api-docs-local/","title":"API Docs Local","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/api-docs-local/#steps","title":"Steps","text":"<p>$3</p>"},{"location":"temp-prompts-refactored/api-docs-local/#output-format","title":"Output format","text":"<p>$4</p>"},{"location":"temp-prompts-refactored/api-docs-local/#affected-files","title":"Affected files","text":"<ul> <li>$5</li> </ul>"},{"location":"temp-prompts-refactored/api-docs-local/#root-cause","title":"Root cause","text":"<ul> <li>$6</li> </ul>"},{"location":"temp-prompts-refactored/api-docs-local/#proposed-fix","title":"Proposed fix","text":"<ul> <li>$7</li> </ul>"},{"location":"temp-prompts-refactored/api-docs-local/#tests","title":"Tests","text":"<ul> <li>$8</li> </ul>"},{"location":"temp-prompts-refactored/api-docs-local/#docs-gaps","title":"Docs gaps","text":"<ul> <li>$9</li> </ul>"},{"location":"temp-prompts-refactored/api-docs-local/#open-questions","title":"Open questions","text":"<ul> <li>$10</li> </ul>"},{"location":"temp-prompts-refactored/api-usage/","title":"API usage","text":"<pre><code>&lt;!-- Placeholder mapping for api-usage.md:\n$1 = Example input symbol (e.g., 'HttpClient')\n$2 = API usage pattern (e.g., 'Key usages')\n$3 = Evidence type (e.g., 'File paths')\n$4 = Definition source (e.g., 'src/network/httpClient.ts')\n --&gt;\n\n**How to show internal API usage**\n\n1. Gather context by running `rg -n $1 . || grep -RIn $1 .`.\n2. Summarize common usage patterns and potential misuses for the symbol.\n3. Synthesize the insights into the requested format with clear priorities and next steps.\n\n**Output format**\n\n- Begin with a concise summary that restates the goal: Show how an internal API is used across the codebase.\n- Organize details under clear subheadings so contributors can scan quickly.\n- Document the evidence you used so maintainers can trust the conclusion.\n\n**Example**\n\n- Input: $2\n- Expected output: \n  - Definition: $3\n  - Key usages: $4\n</code></pre>"},{"location":"temp-prompts-refactored/audit/","title":"Audit","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/audit/#steps","title":"Steps","text":"<ol> <li>Gather context by running <code>ls -la</code> for the top-level listing. Inspect $3, $4, $5, $6, $7, and $8 if present to understand shared conventions.</li> <li>Assess repository hygiene across documentation, testing, CI, linting, and security. Highlight gaps and existing automation.</li> <li>Synthesize the findings into a prioritized checklist with recommended next steps.</li> </ol>"},{"location":"temp-prompts-refactored/audit/#output-format","title":"Output format","text":"<ul> <li>Begin with a concise summary that restates the goal: Audit repository hygiene and suggest improvements.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Call out test coverage gaps and validation steps.</li> <li>Highlight workflow triggers, failing jobs, and proposed fixes.</li> </ul>"},{"location":"temp-prompts-refactored/audit/#missing-sections","title":"Missing sections","text":"<ul> <li>Affected files: $9</li> <li>Root cause: $10</li> <li>Proposed fix: $11</li> <li>Tests: $12</li> <li>Docs gaps: $13</li> <li>Open questions: $14</li> </ul>"},{"location":"temp-prompts-refactored/auth-scaffold/","title":"Auth scaffold","text":""},{"location":"temp-prompts-refactored/auth-scaffold/#1","title":"$1","text":"<p>Trigger: $2</p> <p>Purpose: $3</p> <p>Steps:</p> <p>$4</p> <p>Output format: $5</p> <p>Examples: $6</p> <p>Notes: $7</p>"},{"location":"temp-prompts-refactored/blame-summary/","title":"Blame summary","text":"<p>How-to: Summarize authorship hotspots</p> <ol> <li>Gather context by running <code>git blame -w --line-porcelain $1 | sed -n 's/^author //p' | sort | uniq -c | sort -nr | sed -n '1,25p'</code> for the blame authors (top contributors first).</li> <li>Given the blame summary below, identify ownership hotspots and potential reviewers.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output: - Begin with a concise summary that restates the goal: Summarize authorship hotspots for a file using git blame. - Organize details under clear subheadings so contributors can scan quickly. - Reference evidence from CODEOWNERS or git history for each owner suggestion.</p> <p>Example Input: $2</p> <p>Expected Output: $3</p> <p>Proposed Fix Examples: $4</p>"},{"location":"temp-prompts-refactored/changed-files/","title":"Changed files","text":"<p>CLI Summary Prompt</p> <ol> <li>Gather context by running <code>$2</code>.</li> <li>List and categorize changed files: <code>$3</code>. Call out risky changes: <code>$4</code>.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: <code>$1</code>.</li> <li>Document the evidence used: <code>$5</code>.</li> </ul> <p>Example Input: <code>$6</code></p> <p>Expected Output: <code>$7</code></p>"},{"location":"temp-prompts-refactored/changelog-from-commits/","title":"Changelog from commits","text":"<p>Draft CHANGELOG From Commits</p> <p>Purpose: Produce a first-draft six-section CHANGELOG block from commit messages and PR titles between $1.</p> <p>Steps:</p> <ol> <li>Inputs: <code>since=&lt;ref or tag&gt;</code> optional, <code>until=&lt;ref&gt;</code> default HEAD, <code>include_prs=true|false</code> default true.</li> <li>Gather data with:</li> <li><code>git log --pretty=%H%x09%s%x09%b &lt;since&gt;.. &lt;until&gt;</code></li> <li>If available, <code>gh pr view</code> for merged PR titles by commit SHA; else rely on merge commit subjects.</li> <li>Heuristics:</li> <li>Map types: <code>feat|add</code>\u2192\\(3, <code>fix|bug</code>\u2192\\)3, <code>perf|refactor|opt</code>\u2192\\(3, <code>deprecate</code>\u2192\\)3, <code>remove|drop</code>\u2192\\(3, <code>sec|cve|security</code>\u2192\\)3.</li> <li>Shorten to 12\u201380 chars. Strip scope parentheses.</li> <li>Emit Markdown with only non-empty sections and a short preface noting the range.</li> </ol> <p>Expected output: - Range preface line: <code>Range: $2</code> - Six-section Markdown block (each section starts with $3, followed by bullet points of $4 and $5)</p> <p>Notes: - This is a draft; run <code>/update-changelog</code> to finalize and create links. - Keep bullets user-facing; avoid internal refactor noise.</p>"},{"location":"temp-prompts-refactored/changelog-verify/","title":"Changelog verify","text":""},{"location":"temp-prompts-refactored/changelog-verify/#verify-changelog-completeness","title":"Verify CHANGELOG Completeness","text":"<p>Trigger: $1</p> <p>Purpose: Check that the latest merge introduced a CHANGELOG entry with the six-section policy and that sections are concise and non-empty where applicable.</p> <p>Steps:</p> <ol> <li>Parse $1 and locate <code>## [Unreleased]</code> or the latest version heading.</li> <li>Validate presence and order of sections: Added, Changed, Deprecated, Removed, Fixed, Security.</li> <li>Flag anti-patterns: paragraphs longer than 2 lines, trailing periods, internal-only jargon, file paths, or empty sections left in place.</li> <li>Cross-check against commits since last tag to detect missing items.</li> <li>Emit a diagnostic report and a suggested patch to fix ordering and brevity issues.</li> </ol> <p>Output format:</p> <ul> <li><code>$2</code></li> <li>Table of findings with line numbers (\\(3) and reasons (\\)4)</li> <li>Suggested normalized Markdown block ($5)</li> <li>Unified diff to apply ($6)</li> </ul> <p>Examples: Input \u2192 $1 Output \u2192</p> <pre><code>$2\n- $3: $4\n- Missing section stub\n\n$5\n</code></pre> <p>Constraints: - Static analysis only; no network calls. - Treat any section with 0 bullets as removable unless policy requires stubs.</p>"},{"location":"temp-prompts-refactored/check/","title":"Check","text":"<p>Editorconfig Adherence Check</p> <p>You are a CLI assistant focused on helping contributors with the task: $1.</p> <ol> <li>Gather context by inspecting <code>$1</code>; running <code>$2</code>.</li> <li>From the listing and config, point out inconsistencies and propose fixes.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output: - Begin with a concise summary that restates the goal: $1. - Offer prioritized, actionable recommendations with rationale: $3. - Highlight workflow triggers, failing jobs, and proposed fixes.</p> <p>Common pitfalls to watch for: - Missing <code>.editorconfig</code> files in the repo - Inconsistent indentation settings across files - Ignoring OS-specific config overrides</p>"},{"location":"temp-prompts-refactored/cleanup-branches/","title":"Cleanup branches","text":"<p>Cleanup Branches</p> <p>Trigger: $1</p> <p>Purpose: $2</p> <p>You are a CLI assistant focused on helping contributors with the task: $3.</p> <ol> <li>$4</li> <li>$5</li> <li>$6</li> </ol> <p>Affected files: Local branches</p> <p>Output format: - $7</p>"},{"location":"temp-prompts-refactored/commit-msg/","title":"Commit msg","text":"<p>/ Placeholder mapping: - $1 = Input description - $2 = Template name (default: 'commit-message') - $3 = Max placeholders (default: 7) /</p> <p>commit-message</p> <p>Input description: $1</p> <p>Output format: {   \"title\": \"\",   \"body\": \"\" }</p> <p>Ensure the output is a valid JSON object with the title and body fields.</p>"},{"location":"temp-prompts-refactored/commit/","title":"From Placeholders in prompts.md","text":"<p>Commit title: $1</p> <p>Commit body:</p> <ul> <li>Scope: $1</li> <li>Summary: $2</li> </ul> <p>Suggested checklist: - run tests - run linters</p>"},{"location":"temp-prompts-refactored/commit/#expected-output-format","title":"Expected output format","text":"<pre><code>{\n  \"reasoning\": \"\",\n  \"template_markdown\": \"\"\n}\n</code></pre> <p>Note: Replace $1 with commit title, $2 with summary text.</p>"},{"location":"temp-prompts-refactored/compare-outputs/","title":"Compare outputs","text":"<p>Compare Outputs</p> <ul> <li>$1</li> <li>$2</li> <li>$3</li> <li>$4</li> </ul> <p>Recommended output format</p> <ul> <li>$1</li> </ul> <p>Note: This template includes the following sections that were inferred to be relevant based on the context: Affected files, Root cause, Proposed fix, Tests, Docs gaps, Open questions.</p>"},{"location":"temp-prompts-refactored/content-generation/","title":"Content Generation","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/content-generation/#steps","title":"Steps","text":"<p>$3</p>"},{"location":"temp-prompts-refactored/content-generation/#output-format","title":"Output format","text":"<p>$4</p> <p>$1 = Title of the content (e.g., 'Content Generation') $2 = Purpose statement (e.g., 'Draft docs, blog posts, or marketing copy aligned with the codebase') $3 = List of steps with numbers (e.g., '1. Read repo README and recent CHANGELOG or commits.\\n2. Propose outlines for docs and posts.\\n3. Generate content with code snippets and usage examples.') $4 = Description of output format (e.g., 'Markdown files with frontmatter and section headings.')</p>"},{"location":"temp-prompts-refactored/coverage-guide/","title":"Coverage Guide","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>You are a CLI assistant focused on helping contributors with the task: $3</p> <ol> <li>Gather context by running <code>find . -name 'coverage*' -type f -maxdepth 3 -print -exec head -n 40 {} \\; 2&gt;/dev/null</code> for the coverage hints; running <code>git ls-files | sed -n '1,400p'</code> for the repo map.</li> <li>Using coverage artifacts (if available) and repository map, propose the highest\u2011ROI tests to add.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: $4</li> <li>Offer prioritized, actionable recommendations with rationale.</li> <li>Call out test coverage gaps and validation steps.</li> </ul> <p>Example Input: $5</p> <p>Expected Output: $6</p>"},{"location":"temp-prompts-refactored/cross-check/","title":"Conflict Resolver","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <ol> <li>$3</li> <li>$4</li> <li>$5</li> </ol> <p>Output format:</p> <pre><code>### $6\n- $7\n</code></pre> <p>Examples:</p> <ul> <li>$8</li> </ul> <p>Notes:</p> <ul> <li>$9</li> </ul>"},{"location":"temp-prompts-refactored/db-bootstrap/","title":"DB Bootstrap","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <ol> <li>Create $3 for local dev (skip for sqlite).</li> <li>Choose ORM/driver ($4) for SQL. Add migration config.</li> <li>Create $5 with baseline tables (users, sessions, audit_log).</li> <li>Add $6, $7, $8 scripts. Write seed data for local admin user.</li> <li>Update $9 with <code>DATABASE_URL</code> and test connection script.</li> </ol> <p>Output format: Migration plan list and generated file paths.</p> <p>Examples: $10 \u2192 $11</p> <p>Notes: Avoid destructive defaults; provide <code>--preview-feature</code> warnings if relevant.</p>"},{"location":"temp-prompts-refactored/db-bootstrap/#affected-files","title":"Affected files","text":"<ul> <li>$12: db/compose.yaml</li> <li>$13: $5</li> <li>$14: $6</li> <li>$15: $7</li> <li>$16: $8</li> <li>$17: .env.example</li> </ul>"},{"location":"temp-prompts-refactored/dead-code-scan/","title":"Dead Code Scan Template","text":""},{"location":"temp-prompts-refactored/dead-code-scan/#dead-code-scan","title":"Dead Code Scan","text":"<p>Trigger: <code>/dead-code-scan</code></p> <p>Purpose: $3</p> <p>You are a CLI assistant focused on helping contributors with the task: $2.</p> <ol> <li>Gather context by running $1 for the file reference graph (best\u2011effort).</li> <li>From the search results, hypothesize dead code candidates and how to safely remove them.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: $2.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul>"},{"location":"temp-prompts-refactored/design-assets/","title":"Design Assets","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/design-assets/#steps","title":"Steps","text":"<ol> <li>$3</li> <li>$4</li> <li>$5</li> </ol>"},{"location":"temp-prompts-refactored/design-assets/#output-format","title":"Output format","text":"<ul> <li>$6</li> </ul>"},{"location":"temp-prompts-refactored/devops-automation/","title":"DevOps automation","text":"<p>Automation Prompt Template</p>"},{"location":"temp-prompts-refactored/devops-automation/#devops-automation","title":"DevOps Automation","text":"<p>$1</p> <p>$2</p>"},{"location":"temp-prompts-refactored/devops-automation/#steps","title":"Steps","text":"<ol> <li>$3</li> <li>$4</li> <li>$5</li> <li>$6</li> </ol>"},{"location":"temp-prompts-refactored/devops-automation/#output-format","title":"Output format","text":"<ul> <li>$7</li> </ul>"},{"location":"temp-prompts-refactored/devops-automation/#affected-files","title":"Affected files","text":"<ul> <li>$8</li> </ul>"},{"location":"temp-prompts-refactored/devops-automation/#root-cause","title":"Root cause","text":"<ul> <li>$9</li> </ul>"},{"location":"temp-prompts-refactored/devops-automation/#proposed-fix","title":"Proposed fix","text":"<ul> <li>$10</li> </ul>"},{"location":"temp-prompts-refactored/devops-automation/#tests","title":"Tests","text":"<ul> <li>$11</li> </ul>"},{"location":"temp-prompts-refactored/devops-automation/#docs-gaps","title":"Docs gaps","text":"<ul> <li>$12</li> </ul>"},{"location":"temp-prompts-refactored/devops-automation/#open-questions","title":"Open questions","text":"<ul> <li>$13</li> </ul>"},{"location":"temp-prompts-refactored/docs-fulfilled-100/","title":"Docs fulfilled 100","text":"<p>Docs fulfilled $3</p> <p>To fulfill the plan $3, what docs are missing now? Do you need more information from $1 or $2 to solve this task $3 correctly? Just tell me.</p> <p>Affected files: - $1</p> <p>Root cause: - $4</p> <p>Proposed fix: - $5</p> <p>Tests: - $6</p> <p>Docs gaps: - $7</p>"},{"location":"temp-prompts-refactored/e2e-runner-setup/","title":"E2E runner setup","text":"<p>/ Placeholder mapping: $1 = Trigger $2 = Purpose $3 = Steps $4 = Output format $5 = Examples $6 = Notes $7 = Affected files $8 = Root cause $9 = Proposed fix $10 = Tests $11 = Docs gaps $12 = Open questions /</p>"},{"location":"temp-prompts-refactored/e2e-runner-setup/#1","title":"$1","text":"<p>$2</p> <p>$3:</p> <ol> <li>$4</li> <li>$5</li> <li>$6</li> </ol> <p>$7:</p> <pre><code>$8\n</code></pre> <p>Examples:</p> <p><code>$9</code></p> <p>Notes:</p> <p>$10</p>"},{"location":"temp-prompts-refactored/env-setup/","title":"Env setup","text":"<p>Env Setup</p> <p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <p>$3</p> <p>Output format: $4</p> <p>Examples: $5</p> <p>Notes: $6</p>"},{"location":"temp-prompts-refactored/error-analysis/","title":"Error Analysis","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/error-analysis/#steps","title":"Steps","text":"<ol> <li>$3</li> <li>$4</li> <li>$5</li> <li>$6</li> </ol>"},{"location":"temp-prompts-refactored/error-analysis/#output-format","title":"Output format","text":"<ul> <li>Table: $7 \u2192 $8 \u2192 $9 \u2192 $10</li> </ul>"},{"location":"temp-prompts-refactored/error-analysis/#examples","title":"Examples","text":"<ul> <li>$11</li> </ul>"},{"location":"temp-prompts-refactored/eslint-review/","title":"ESLint review","text":"<p>/ * Placeholders: * $1 = task description (e.g., 'Review ESLint config and suggest rule tweaks') * $2 = context sources (e.g., '.eslintrc.cjs', '.eslintrc.js', 'package.json') * $3 = key rules (e.g., 'no-unused-vars') * $4 = missing plugins (e.g., 'eslint-plugin-react') * $5 = performance considerations (e.g., 'avoid expensive rules') * $6 = expected output format (e.g., 'structured report') * $7 = next steps (e.g., 'document evidence') /</p> <p>How-to: ESLint Review</p> <ol> <li>Gather context by inspecting $1; inspecting $2; inspecting $3.</li> <li>Explain key rules, $4, and $5.</li> <li>Synthesize insights into $6 with clear priorities and $7.</li> </ol>"},{"location":"temp-prompts-refactored/eslint-review/#affected-files","title":"Affected files","text":"<ul> <li>$1</li> </ul>"},{"location":"temp-prompts-refactored/eslint-review/#root-cause","title":"Root cause","text":"<ul> <li>Missing $4</li> </ul>"},{"location":"temp-prompts-refactored/eslint-review/#proposed-fix","title":"Proposed fix","text":"<ul> <li>Add $4 to configuration</li> </ul>"},{"location":"temp-prompts-refactored/eslint-review/#tests","title":"Tests","text":"<ul> <li>Verify $4 with example code</li> </ul>"},{"location":"temp-prompts-refactored/eslint-review/#docs-gaps","title":"Docs gaps","text":"<ul> <li>Document $5 in contribution guidelines</li> </ul>"},{"location":"temp-prompts-refactored/eslint-review/#open-questions","title":"Open questions","text":"<ul> <li>How to optimize $5 for large projects?</li> </ul>"},{"location":"temp-prompts-refactored/evidence-capture/","title":"Evidence capture","text":"<pre><code>&lt;!-- Placeholder mapping (from input fields):\n$1 = Claim text\n$2 = Source URL\n$3 = Source Title\n$4 = Publisher\n$5 = Publication Date\n$6 = Access Date\n$7 = Quote (\u226425 words) --&gt;\n\n# Evidence Logger\n\nTrigger: /evidence-capture\n\nPurpose: Capture sources for a specified claim with dates, \u226425-word quotes, findings, relevance, and confidence.\n\nSteps:\n\n1. Read the claim text and optional URLs provided.\n2. For each source, record metadata and a \u226425-word quote.\n3. Add a brief Finding, Relevance (H/M/L), and Confidence (0.0\u20131.0).\n\nOutput format:\n</code></pre>"},{"location":"temp-prompts-refactored/evidence-capture/#evidence-log","title":"Evidence Log","text":"SourceID Title Publisher URL PubDate Accessed Quote (\u226425w) Finding Rel Conf <pre><code>Examples:\n\n- Input: `/evidence-capture $1` with $2\n- Output: Evidence table entries with dates.\n\nNotes:\n\n- Mark missing PubDate as n/a. Prefer official documentation.\n</code></pre>"},{"location":"temp-prompts-refactored/explain-code/","title":"Explain code","text":"<p>Code Explanation Template</p>"},{"location":"temp-prompts-refactored/explain-code/#1","title":"$1","text":"<p>Trigger: $2</p> <p>Purpose: $3</p>"},{"location":"temp-prompts-refactored/explain-code/#steps","title":"Steps","text":"<ol> <li> <p>$4</p> </li> <li> <p>$5</p> </li> <li> <p>$6</p> </li> </ol>"},{"location":"temp-prompts-refactored/explain-code/#output-format","title":"Output format","text":"<p>$7</p>"},{"location":"temp-prompts-refactored/explain-failures/","title":"Explain failures","text":"<p>Test Failure Analysis Template</p> <ol> <li>Task Context: Analyze recent test failures and propose fixes for $1.</li> <li>Root Cause Analysis: Identify root causes from $2.</li> <li>Proposed Fixes: Provide concrete fixes for $3.</li> <li>Affected Files: List files impacted by $4.</li> <li>Test Coverage Impact: Note how fixes affect test coverage ($5).</li> <li>Open Questions: Document unresolved issues ($6).</li> </ol> <p>Output Format: - Begin with a concise summary restating $1. - Prioritized recommendations with rationale for $2 and \\(3. - Evidence used to maintain trust (\\)4).</p> <p>Example Context: $7</p>"},{"location":"temp-prompts-refactored/explain-symbol/","title":"Explain symbol","text":"<p>Symbol Explanation Analysis</p> <p>Output: - Begin with a concise summary reiterating the goal: Explain where and how $1 is defined and used. - Structure findings under clear subheadings for quick scanning. - Document evidence: $2 (definition) and $3 (key usages). - Note documentation gaps: [specify any missing documentation or context]</p>"},{"location":"temp-prompts-refactored/feature-flags/","title":"Feature flags","text":"<p>How-to</p> <p>$1</p> <p>Trigger: $2</p> <p>Purpose: $3</p> <p>Steps: $4</p> <p>Output format: $5</p> <p>Examples: $6</p> <p>Notes: $7</p>"},{"location":"temp-prompts-refactored/file-modularity/","title":"File modularity","text":"<p>File Modularity</p> <p>Trigger: $1</p> <p>Purpose: Enforce smaller files and propose safe splits for giant files.</p>"},{"location":"temp-prompts-refactored/file-modularity/#steps","title":"Steps","text":"<ol> <li>Find files over thresholds ($2).</li> <li>Suggest extraction targets: $3.</li> <li>Provide before/after examples and $5.</li> </ol>"},{"location":"temp-prompts-refactored/file-modularity/#output-format","title":"Output format","text":"<ul> <li>$6</li> </ul>"},{"location":"temp-prompts-refactored/file-modularity/#affected-files","title":"Affected files","text":"<ul> <li>$1</li> </ul>"},{"location":"temp-prompts-refactored/file-modularity/#root-cause","title":"Root cause","text":"<ul> <li>Files exceeding size thresholds</li> </ul>"},{"location":"temp-prompts-refactored/file-modularity/#proposed-fix","title":"Proposed fix","text":"<ul> <li>$4</li> <li>$5</li> </ul>"},{"location":"temp-prompts-refactored/file-modularity/#tests","title":"Tests","text":"<ul> <li>Unit tests for extracted components</li> </ul>"},{"location":"temp-prompts-refactored/file-modularity/#docs-gaps","title":"Docs gaps","text":"<ul> <li>Documentation for new file structure</li> </ul>"},{"location":"temp-prompts-refactored/file-modularity/#open-questions","title":"Open questions","text":"<ul> <li>How to handle circular dependencies</li> <li>Should we include type definitions in the extraction?</li> </ul>"},{"location":"temp-prompts-refactored/fix/","title":"Fix","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>You are a CLI assistant focused on helping contributors with the task: $3</p> <ol> <li>Gather context by running <code>git log --pretty='- %h %s' -n 20</code> for the recent commits; running <code>git ls-files | sed -n '1,400p'</code> for the repo map (first 400 files).</li> <li>$4: $5</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: $6</li> <li>Provide unified diff-style patches when recommending code changes.</li> <li>Offer prioritized, actionable recommendations with rationale.</li> </ul> <p>Example Input: $7</p> <p>Expected Output:</p> <pre><code>$8\n</code></pre> <p>Regression test: $9</p>"},{"location":"temp-prompts-refactored/gemini-map/","title":"Gemini map","text":"<p>Gemini\u2192Codex Mapper</p> <p>You are a translator that converts a $1 TOML command into a Codex prompt file.</p> <p>Steps:</p> <p>1) Read TOML with <code>description</code> and <code>prompt</code>. 2) Extract the task, inputs, and outputs implied by the TOML. 3) Write a Codex prompt file \u2264 300 words:</p> <pre><code>- Role line `You are ...`\n- Numbered steps\n- Output section\n- Example input and expected output\n- `Usage: /$2` line\n- YAML-like metadata at top\n</code></pre> <p>4) Choose a short, hyphenated filename \u2264 32 chars. 5) Emit a ready-to-run bash snippet: <code>cat &gt; ~/.codex/prompts/&lt;filename&gt;.md &lt;&lt; 'EOF'</code> \u2026 <code>EOF</code>. 6) Do not include destructive commands or secrets.</p> <p>Example input:</p> <pre><code>$6\n</code></pre> <p>Expected output:</p> <p>A $7 file with the structure above and a bash cat &gt; block.</p> <p>Usage: /$2</p> <p>Output format</p> <p>The output must be a Codex prompt file containing: - Role line: \"You are a translator that converts a $1 TOML command into a Codex prompt file.\" - Numbered steps (1-6) matching $5 - Output section specifying the format - Example input and expected output - <code>Usage: /$2</code> line - YAML metadata: <code>name: $1</code>, <code>command: $2</code>, <code>tags: $3</code>, <code>scope: $4</code></p> <p>ensure - \u22647 placeholders - no verbatim sentences from input - literal <code>$</code> tokens remain</p>"},{"location":"temp-prompts-refactored/generate-readme/","title":"$1","text":"<p>$2</p>"},{"location":"temp-prompts-refactored/generate-readme/#features","title":"Features","text":"<ul> <li>$3</li> </ul>"},{"location":"temp-prompts-refactored/generate-readme/#setup","title":"Setup","text":"<pre><code>$4\n</code></pre>"},{"location":"temp-prompts-refactored/generate-readme/#usage","title":"Usage","text":"<pre><code>$5\n</code></pre>"},{"location":"temp-prompts-refactored/generate-readme/#contributing","title":"Contributing","text":"<p>$6</p>"},{"location":"temp-prompts-refactored/generate-readme/#license","title":"License","text":"<p>$7</p>"},{"location":"temp-prompts-refactored/generate-readme/#additional-info","title":"Additional Info","text":"<ul> <li>Version: $8</li> <li>Author: $9</li> <li>Last Updated: $10</li> </ul>"},{"location":"temp-prompts-refactored/generate/","title":"Generate","text":"<p>Generate Unit Tests</p> <p>Trigger: $1</p> <p>Purpose: $2</p> <p>You are a CLI assistant focused on helping contributors with the task: $2.</p>"},{"location":"temp-prompts-refactored/generate/#steps","title":"Steps","text":"<ol> <li>$3</li> <li>$4</li> <li>$5</li> <li>$6</li> </ol>"},{"location":"temp-prompts-refactored/generate/#output","title":"Output","text":"<ul> <li>$7</li> <li>$8</li> <li>$9</li> <li>$10</li> <li>$11</li> </ul>"},{"location":"temp-prompts-refactored/grep/","title":"Grep","text":"<p>CLI Search Guide</p> <p>You are a CLI assistant focused on helping contributors with the task: Recursive text search with ripgrep/grep injection.</p> <ol> <li>Gather context by running <code>rg -n $1 . || grep -RIn $1 .</code>.</li> <li>Show matched lines with file paths and line numbers.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Recursive text search with ripgrep/grep injection.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: $2</p> <p>Expected Output: $3</p>"},{"location":"temp-prompts-refactored/iac-bootstrap/","title":"IaC bootstrap","text":"<p>$1</p> <p>Trigger: <code>/iac-bootstrap $2</code></p> <p>Purpose: $3</p> <p>Steps:  1. $4 2. $4 3. $4 4. $4</p> <p>Output format: $5</p> <p>Examples: $6</p> <p>Notes: $7</p>"},{"location":"temp-prompts-refactored/instruction-file/","title":"Instruction file","text":"<p>How-to: Create Instruction File</p>"},{"location":"temp-prompts-refactored/instruction-file/#instruction-file","title":"Instruction File","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/instruction-file/#steps","title":"Steps","text":"<ol> <li>$3</li> <li>$4</li> <li>$5</li> <li>$6</li> </ol>"},{"location":"temp-prompts-refactored/instruction-file/#output-format","title":"Output format","text":"<ul> <li>$7</li> </ul>"},{"location":"temp-prompts-refactored/instruction-file/#affected-files","title":"Affected files","text":"<ul> <li><code>cursor.rules</code></li> <li><code>windsurf.rules</code></li> <li><code>claude.md</code></li> </ul>"},{"location":"temp-prompts-refactored/instruction-file/#root-cause","title":"Root cause","text":"<ul> <li>No specific root cause identified in this context</li> </ul>"},{"location":"temp-prompts-refactored/instruction-file/#proposed-fix","title":"Proposed fix","text":"<ul> <li>Not applicable; this is a template for creating new instructions</li> </ul>"},{"location":"temp-prompts-refactored/instruction-file/#tests","title":"Tests","text":"<ul> <li>Not applicable; this is a template for creating new instructions</li> </ul>"},{"location":"temp-prompts-refactored/instruction-file/#docs-gaps","title":"Docs gaps","text":"<ul> <li>Not applicable; this is a template for creating new instructions</li> </ul>"},{"location":"temp-prompts-refactored/instruction-file/#open-questions","title":"Open questions","text":"<ul> <li>Not applicable; this is a template for creating new instructions</li> </ul>"},{"location":"temp-prompts-refactored/integration-test/","title":"Integration test","text":"<p>E2E Test Generation Prompt</p>"},{"location":"temp-prompts-refactored/integration-test/#integration-test","title":"Integration Test","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/integration-test/#steps","title":"Steps","text":"<ol> <li>Detect framework from <code>package.json</code> or repo (Playwright/Cypress/Vitest).</li> <li>Identify critical path scenarios from <code>PLAN.md</code>.</li> <li>Produce test files under <code>e2e/</code> with arrange/act/assert and selectors resilient to DOM changes.</li> <li>Include login helpers and data setup. Add CI commands.</li> </ol>"},{"location":"temp-prompts-refactored/integration-test/#output-format","title":"Output format","text":"<ul> <li>$3</li> </ul>"},{"location":"temp-prompts-refactored/integration-test/#examples","title":"Examples","text":"<ul> <li>Login, navigate to dashboard, create record, assert toast.</li> </ul>"},{"location":"temp-prompts-refactored/integration-test/#notes","title":"Notes","text":"<ul> <li>Prefer data-test-id attributes. Avoid brittle CSS selectors.</li> </ul>"},{"location":"temp-prompts-refactored/license-report/","title":"License report","text":"<p>You are a CLI assistant focused on helping contributors with the task: $1.</p> <ol> <li>Gather context by running $2 for license tools if present.</li> <li>Create a license inventory with notices of copyleft/unknown licenses.</li> <li>Synthesize insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: $1.</li> <li>Organize details under clear subheadings so contributors can scan quickly.</li> <li>Flag copyleft or unknown licenses and suggest remediation timelines.</li> </ul> <p>Example Input: (none \u2013 command runs without arguments)</p> <p>Expected Output:</p> <ul> <li>$3 \u2014 $4</li> <li>$3 \u2014 $5</li> </ul>"},{"location":"temp-prompts-refactored/logging-strategy/","title":"Logging strategy","text":""},{"location":"temp-prompts-refactored/logging-strategy/#1","title":"$1","text":"<p>Trigger: $2</p> <p>Purpose: $3</p>"},{"location":"temp-prompts-refactored/logging-strategy/#steps","title":"Steps","text":"<p>$4</p> <p>$5</p> <p>$6</p> <p>$7</p>"},{"location":"temp-prompts-refactored/logging-strategy/#output-format","title":"Output format","text":"<ul> <li>Diff hunks and a short guideline section.</li> </ul>"},{"location":"temp-prompts-refactored/migration-plan/","title":"Migration plan","text":"<p>Migration Plan Template</p> <p>Trigger: $1</p> <p>Purpose: Produce safe up/down migration steps with checks and rollback notes.</p> <p>Steps:</p> <ol> <li>$3</li> <li>$4</li> </ol> <p>Output format: <code>Plan</code>, <code>SQL</code>, <code>Rollback</code>, <code>Checks</code> sections.</p> <p>Examples: $2.</p> <p>Notes: $5</p> <p>Additional requirements: $6 and $7 with $8 flag.</p>"},{"location":"temp-prompts-refactored/missing-docs/","title":"Missing docs","text":"<p>/   $1 = Original prompt text   $2 = 'Missing Docs' (inferred genre)   $3 = Max placeholders (default=7) /</p> <p>Missing Docs</p> <p>(See the source markdown for the full context)</p> <p>The following sections are required to complete this analysis:</p> <ul> <li>Affected files: $1</li> <li>Root cause: $2</li> <li>Proposed fix: $3</li> <li>Tests: $4</li> <li>Docs gaps: $5</li> <li>Open questions: $6</li> <li>Additional context: $7</li> </ul>"},{"location":"temp-prompts-refactored/model-evaluation/","title":"Model evaluation","text":"<p>/ Placeholder mapping: $1 = Trigger phrase $2 = Purpose statement $3 = Step 1 (define benchmark) $4 = Step 2 (run candidates) $5 = Step 3 (analyze failures) $6 = Output format description $7 = Expected metrics (optional) /</p>"},{"location":"temp-prompts-refactored/model-evaluation/#model-evaluation","title":"Model Evaluation","text":"<p>$1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/model-evaluation/#steps","title":"Steps","text":"<ol> <li>$3</li> <li>$4</li> <li>$5</li> </ol>"},{"location":"temp-prompts-refactored/model-evaluation/#output-format","title":"Output format","text":"<p>$6</p> <p>Expected sections (add if missing): - Expected metrics - Failure analysis - Adoption recommendations</p>"},{"location":"temp-prompts-refactored/model-strengths/","title":"Model strengths","text":"<p>Model Strengths</p> <p>(Trigger: $1)</p> <p>(Purpose: $2)</p> <p>($3)</p> <p>($4)</p> <p>(Recommended output format: $5)</p>"},{"location":"temp-prompts-refactored/modular-architecture/","title":"Modular Architecture","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/modular-architecture/#steps","title":"Steps","text":"<p>$3</p>"},{"location":"temp-prompts-refactored/modular-architecture/#output-format","title":"Output format","text":"<p>$4</p>"},{"location":"temp-prompts-refactored/modular-architecture/#affected-files","title":"Affected files","text":"<p>To be filled</p>"},{"location":"temp-prompts-refactored/modular-architecture/#root-cause","title":"Root cause","text":"<p>To be filled</p>"},{"location":"temp-prompts-refactored/modular-architecture/#proposed-fix","title":"Proposed fix","text":"<p>To be filled</p>"},{"location":"temp-prompts-refactored/modular-architecture/#tests","title":"Tests","text":"<p>To be filled</p>"},{"location":"temp-prompts-refactored/modular-architecture/#docs-gaps","title":"Docs gaps","text":"<p>To be filled</p>"},{"location":"temp-prompts-refactored/modular-architecture/#open-questions","title":"Open questions","text":"<p>To be filled</p>"},{"location":"temp-prompts-refactored/monitoring-setup/","title":"Monitoring Setup","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <ol> <li>$3</li> <li>$4</li> <li>$5</li> </ol> <p>Output format: $6</p> <p>Examples: $7</p> <p>Notes: $8</p>"},{"location":"temp-prompts-refactored/monitoring-setup/#affected-files","title":"Affected files","text":""},{"location":"temp-prompts-refactored/monitoring-setup/#root-cause","title":"Root cause","text":""},{"location":"temp-prompts-refactored/monitoring-setup/#proposed-fix","title":"Proposed fix","text":""},{"location":"temp-prompts-refactored/monitoring-setup/#tests","title":"Tests","text":""},{"location":"temp-prompts-refactored/monitoring-setup/#docs-gaps","title":"Docs gaps","text":""},{"location":"temp-prompts-refactored/monitoring-setup/#open-questions","title":"Open questions","text":""},{"location":"temp-prompts-refactored/openapi-generate/","title":"OpenAPI Generate","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <ol> <li>$3</li> <li>$4</li> <li>$5</li> <li>$6</li> <li>$7</li> </ol> <p>Output format: $8</p> <p>Examples: $9</p> <p>Notes: $10</p>"},{"location":"temp-prompts-refactored/openapi-generate/#affected-files","title":"Affected files","text":""},{"location":"temp-prompts-refactored/openapi-generate/#root-cause","title":"Root cause","text":""},{"location":"temp-prompts-refactored/openapi-generate/#proposed-fix","title":"Proposed fix","text":""},{"location":"temp-prompts-refactored/openapi-generate/#tests","title":"Tests","text":""},{"location":"temp-prompts-refactored/openapi-generate/#docs-gaps","title":"Docs gaps","text":""},{"location":"temp-prompts-refactored/openapi-generate/#open-questions","title":"Open questions","text":""},{"location":"temp-prompts-refactored/owners/","title":"Owners","text":"<p>Owners Suggestion Prompt</p> <p>You are a CLI assistant focused on helping contributors with the task: $2.</p> <ol> <li>Gather context by inspecting $3 for codeowners (if present); running $4 for recent authors of the path.</li> <li>Based on codeowners and git history, suggest owners.</li> <li>Synthesize the insights into the requested format with clear priorities.</li> </ol> <p>Output: - Begin with a concise summary restating the goal: $2 - Reference evidence from $3 or git history for each owner suggestion. - Document the evidence used to maintain trust.</p> <p>Example input: $5</p> <p>Expected output: - Likely reviewers: \\(6 (\\)7)</p>"},{"location":"temp-prompts-refactored/plan-delta/","title":"Plan delta","text":"<p>How-to: $2</p> <p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <ol> <li>Discover repository context:</li> <li>Detect tasks file path: prefer $3; else search <code>**/$3</code>.</li> <li>Detect latest plan doc: prefer $4; else <code>**/*(prd|spec|plan)*.md</code>.</li> <li>Snapshot:</li> <li>Create $5 if missing.</li> <li>Copy current tasks file to <code>$5/tasks-$(date +%$6).json</code> using: <code>cp -f &lt;tasks.json&gt; $5/tasks-$(date +%$6).json</code>.</li> <li>Input collection:</li> <li>Read new objectives, constraints, and findings from user input.</li> <li>Parse selection rules to choose mode: $7.</li> <li>Delta Doc generation:</li> <li>Create <code>$5/delta-$(date +%$6).md</code> containing sections:<ul> <li>Objectives (new)</li> <li>Constraints (new)</li> <li>Impacts</li> <li>Decisions</li> <li>Evidence log (sources, dates, links)</li> </ul> </li> <li>Task graph update:</li> <li>Never alter historical states (<code>done</code>/<code>in_progress</code>/<code>blocked</code>) of existing tasks.</li> <li>Do not reuse IDs. For replaced tasks, set <code>superseded_by</code> on old tasks and include ID in new task's <code>supersedes[]</code>.</li> <li>Add <code>source_doc</code>, <code>lineage[]</code> on new/changed tasks.</li> <li>Create new tasks only for new/changed work. Link predecessors via <code>dependencies</code> or <code>relations</code>.</li> <li>Keep deprecated tasks with <code>status: \"deprecated\"</code> and <code>reason</code>.</li> <li>Tests:</li> <li>Recompute dependency order and validate acyclicity.</li> <li>Flag contradictions as <code>blocked</code> with machine-readable <code>blocked_reason</code>.</li> <li>Verify critical-path tasks are correctly prioritized.</li> <li>Affected files:</li> <li>\\(5/tasks-\\)(date +%$6).json</li> <li>\\(5/delta-\\)(date +%$6).md</li> <li>Readiness and selection:</li> <li>Implement <code>ready/next()</code> to select tasks with all dependencies <code>done</code> and not <code>blocked</code>.</li> <li>Produce readiness report grouped by <code>ready | blocked | deprecated</code>.</li> <li>Outputs:</li> <li>Write updated tasks file in-place.</li> <li>Persist Delta Doc under $5.</li> <li>Emit decision hooks: one line per change stating what it enables.</li> </ol> <p>Output format: - Produce three artifacts:   1. Updated tasks file: Valid JSON. Preserve existing fields. Append new/changed tasks and relations.   2. Delta document: Markdown with sections <code># Delta</code>, <code>## Objectives</code>, <code>## Constraints</code>, <code>## Impacts</code>, <code>## Decisions</code>, <code>## Evidence</code>.   3. Readiness report: Plain text with sections <code>READY</code>, <code>BLOCKED</code>, <code>DEPRECATED</code>. Format: <code>- &lt;id&gt; &lt;title&gt;</code> (blocked items add <code>[reason=&lt;code&gt;]</code>). - Print Decision hooks as lines starting with <code>HOOK: &lt;id&gt; enables &lt;capability&gt;</code>.</p> <p>Open questions: - What evidence is missing to resolve inputs? - How to handle partial scope changes (&lt;20%)? - Should deprecated tasks be automatically archived?</p>"},{"location":"temp-prompts-refactored/planning-process/","title":"Planning process","text":"<p>Planning Process Prompt</p>"},{"location":"temp-prompts-refactored/planning-process/#planning-process","title":"Planning Process","text":"<p>Trigger: $2</p> <p>Purpose: Draft, refine, and execute a feature plan with strict scope control and progress tracking.</p>"},{"location":"temp-prompts-refactored/planning-process/#steps","title":"Steps","text":"<ol> <li>If no plan file exists, create $2. If it exists, load it.</li> <li>Draft sections: Goal, User Story, Milestones, Tasks, Won't do, Ideas for later, Validation, Risks.</li> <li>Trim bloat. Convert vague bullets into testable tasks with acceptance criteria.</li> <li>Tag each task with an owner and estimate. Link to files or paths that will change.</li> <li>Maintain two backlogs: Won't do (explicit non-goals) and Ideas for later (deferrable work).</li> <li>Mark tasks done after tests pass. Append commit SHAs next to completed items.</li> <li>After each milestone: run tests, update Validation, then commit $2.</li> </ol>"},{"location":"temp-prompts-refactored/planning-process/#output-format","title":"Output format","text":"<ul> <li>Update or create $2 with the sections above.</li> <li>Include a checklist for Tasks. Keep lines under $3 chars.</li> </ul>"},{"location":"temp-prompts-refactored/planning-process/#examples","title":"Examples","text":"<p>Input: $1</p> <p>Output:</p> <ul> <li>Goal: Let users sign in with Google.</li> <li>Tasks: [ ] add Google client, [ ] callback route, [ ] session, [ ] E2E test.</li> <li>Won't do: org SSO.</li> <li>Ideas for later: Apple login.</li> </ul>"},{"location":"temp-prompts-refactored/planning-process/#notes","title":"Notes","text":"<ul> <li>Planning only. No code edits.</li> <li>Assume a Git repo with test runner available.</li> </ul>"},{"location":"temp-prompts-refactored/pr-desc/","title":"PR desc","text":"<p>PR Description Template</p> <p>Trigger: /pr-desc $1</p> <p>Purpose: Draft a PR description from the branch diff.</p> <ol> <li>Gather context by running <code>git diff --name-status $5</code> for the changed files; <code>git diff --shortstat $4</code> for high-level stats.</li> <li>Create a crisp PR description following this structure: $6</li> <li>Base branch: $2</li> <li>User context: $3</li> <li>Synthesize insights into the requested format.</li> </ol> <p>Output requirements: - Begin with a concise summary: $7 - Prioritized recommendations with rationale - Test coverage gaps and validation steps - Workflow triggers, failing jobs, and proposed fixes</p> <p>Affected Files: $5 Root Cause: [Optional] Proposed Fix: [Optional] Test Plan: [Optional] Risk: [Optional] Rollback Plan: [Optional] Release Notes: [Optional]</p>"},{"location":"temp-prompts-refactored/prd-generator/","title":"PRD generator","text":"<p>PRD Generator Template</p> <p>Output a plain-text file named <code>prd.txt</code> containing only these sections in this order (separated by one blank line):</p>"},{"location":"temp-prompts-refactored/prd-generator/#overview","title":"Overview","text":""},{"location":"temp-prompts-refactored/prd-generator/#core-features","title":"Core Features","text":""},{"location":"temp-prompts-refactored/prd-generator/#user-experience","title":"User Experience","text":""},{"location":"temp-prompts-refactored/prd-generator/#technical-architecture","title":"Technical Architecture","text":""},{"location":"temp-prompts-refactored/prd-generator/#development-roadmap","title":"Development Roadmap","text":""},{"location":"temp-prompts-refactored/prd-generator/#logical-dependency-chain","title":"Logical Dependency Chain","text":""},{"location":"temp-prompts-refactored/prd-generator/#risks-and-mitigations","title":"Risks and Mitigations","text":""},{"location":"temp-prompts-refactored/prd-generator/#appendix","title":"Appendix","text":"<p>Output Format</p> <ul> <li><code># Overview</code>: $3</li> <li><code># Core Features</code>: Each includes What, Why, High-level How, and BDD criteria:   <code>Given ...</code> <code>When ...</code> <code>Then ...</code></li> <li><code># User Experience</code>: Personas, key flows, UI/UX, accessibility</li> <li><code># Technical Architecture</code>: Components, data models, APIs/integrations, infrastructure, NFRs</li> <li><code># Development Roadmap</code>: MVP and Future Enhancements with acceptance criteria (no dates)</li> <li><code># Logical Dependency Chain</code>: Work ordering for foundations, earliest front end, extensible units</li> <li><code># Risks and Mitigations</code>: Each includes Description, Likelihood, Impact, Mitigation</li> <li><code># Appendix</code>:   \u2022 Assumptions (bulleted)   \u2022 Research findings from $1   \u2022 Context notes (<code>- &lt;visible text&gt; \u2014 inferred topic</code>)   \u2022 Technical specs</li> </ul> <p>Validation Checks</p> <ul> <li>Headers present and ordered</li> <li>All BDD criteria included for features/fallbacks</li> <li>Risks include likelihood and impact</li> <li>No URLs/secrets; exactly one blank line between sections</li> <li>$1 contains only visible link text (no external browsing)</li> </ul>"},{"location":"temp-prompts-refactored/prettier-adopt_Migration_report/","title":"Prettier migration report","text":"<pre><code>&lt;!--\n$1=Task description\n$2=Template name (inferred as 'Prettier Migration Guide')\n$3=Summary of the report\n$4=Prioritized recommendations\n$5=Rationale for recommendations\n$6=Evidence used\n$7=Example input (none)\n$8=Expected output structure\n--&gt;\n\n**$2**\n\n1. $1\n\n2. $3\n\n3. $4\n\n4. $5\n\n5. $6\n\n6. $7\n\n7. $8\n\n\n---\n\n### Affected files\n\n- $1 (to be populated with file paths)\n\n### Root cause\n\n- $1 (to be populated with migration challenges)\n\n### Proposed fix\n\n- $1 (to be populated with specific steps)\n\n### Tests\n\n- $1 (to be populated with test cases)\n\n### Docs gaps\n\n- $1 (to be populated with missing documentation)\n\n### Open questions\n\n- $1 (to be populated with unresolved issues)\n</code></pre>"},{"location":"temp-prompts-refactored/problem-analyzer/","title":"Problem analyzer","text":""},{"location":"temp-prompts-refactored/problem-analyzer/#problem-analyzer","title":"problem-analyzer","text":"<p> $1 </p> <p>Tasks: 1. Locate all files/modules affected by the issue. List paths and why each is implicated. 2. Explain the root cause(s): what changed, how it propagates to the failure, and any environmental factors. 3. Propose the minimal, safe fix. Include code-level steps, side effects, and tests to add/update. 4. Flag any missing or outdated documentation/configs/schemas that should be updated or added (especially if code appears outdated vs. current behavior).</p> <p>Output format: - Affected files:   - <code>$1</code>: <code>&lt;reason&gt;</code> - Root cause:   - <code>$2</code>: <code>&lt;concise explanation&gt;</code> - Proposed fix:   - <code>$3</code>: <code>&lt;steps/patch outline&gt;</code>   - Tests: - Documentation gaps:   - <code>$4</code>: <code>&lt;doc_section_what_to_update_add&gt;</code> - Open questions/assumptions:   - <code>$5</code>: <code>&lt;items&gt;</code></p> <p>DON'T CODE YET.</p>"},{"location":"temp-prompts-refactored/prompt-sequence-generator/","title":"Prompt: Generate Prompt Execution Sequence","text":"<p>Purpose: Given a high-level goal and a set of available prompts, generate the logical execution sequence required to accomplish that goal by chaining the prompts together.</p>"},{"location":"temp-prompts-refactored/prompt-sequence-generator/#inputs","title":"Inputs","text":"<ul> <li> <p>High-Level Goal: {{high_level_goal}}</p> <ul> <li>A clear, one-sentence description of the final outcome the user wants to achieve.</li> <li>Example: \"Create and document a pull request for the currently staged changes.\"</li> </ul> </li> <li> <p>Available Prompts: <pre><code>{{available_prompts}}\n</code></pre></p> <ul> <li>A list of candidate prompt names (e.g., from the output of <code>rank-root-prompts</code>).</li> <li>Example: ['pr-desc.md', 'commit-msg.md', 'changed-files.md', 'review.md', 'release-notes.md']</li> </ul> </li> <li> <p>Context (Optional): {{context}}</p> <ul> <li>Any additional context, such as the current state of the git repository or specific files of interest.</li> <li>Example: \"The user has already staged files using <code>git add</code>.\"</li> </ul> </li> </ul>"},{"location":"temp-prompts-refactored/prompt-sequence-generator/#instructions-for-the-ai","title":"Instructions for the AI","text":"<ol> <li> <p>Analyze the Goal: Deconstruct the <code>{{high_level_goal}}</code> into a series of logical steps required to get from the starting state to the final outcome.</p> </li> <li> <p>Map Prompts to Steps: For each logical step, identify the most suitable prompt from the <code>{{available_prompts}}</code> list that can perform that step.</p> <ul> <li>Consider the inputs and outputs of each prompt to determine dependencies. A prompt's input is often the output of a previous one.</li> </ul> </li> <li> <p>Establish Order: Arrange the selected prompts into a numbered sequence based on their dependencies. The sequence should represent a complete and logical workflow.</p> </li> <li> <p>Identify Gaps: If any necessary step in the workflow cannot be fulfilled by one of the available prompts, explicitly state what action or prompt is missing.</p> </li> </ol>"},{"location":"temp-prompts-refactored/prompt-sequence-generator/#required-output-format","title":"Required Output Format","text":"<p>Execution Sequence:</p> <ol> <li><code>[prompt_name_1.md]</code>: [Brief justification for why this prompt is first and what it accomplishes.]</li> <li><code>[prompt_name_2.md]</code>: [Brief justification for why this prompt is second, and how it uses the output of the previous step.]</li> <li>...</li> </ol> <p>Identified Gaps (if any):</p> <ul> <li>[Description of a missing step or prompt needed to complete the workflow.]</li> </ul>"},{"location":"temp-prompts-refactored/prototype-feature/","title":"Prototype Feature","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/prototype-feature/#steps","title":"Steps","text":"<p>$3</p>"},{"location":"temp-prompts-refactored/prototype-feature/#output-format","title":"Output format","text":"<ul> <li>$4</li> </ul>"},{"location":"temp-prompts-refactored/query-set/","title":"Query set","text":"<p>High-Yield Query Generator</p> <p>Trigger: /query-set</p> <p>Purpose: Generate {1} targeted web search queries with operators, entity variants, and recency filters for a given objective.</p> <p>Steps: 1. Restate the goal with entities and time window. 2. Produce queries using operators: site:, filetype:, inurl:, quotes, OR, date filters. 3. Include synonyms and common misspellings. 4. Mix intents: {2}</p> <p>Output format: <pre><code>### Goal\n{3}\n\n### Query Set\n- {4}\n- {5}\n... up to 8\n</code></pre></p> <p>Examples: - Input: <code>/query-set {6} {7}</code> - Output: Goal + {8} queries with operators.</p> <p>Notes: - No evidence logging here. Use /research-item to execute.</p>"},{"location":"temp-prompts-refactored/rank-root-prompts/","title":"Rank root prompts","text":""},{"location":"temp-prompts-refactored/rank-root-prompts/#prompt-ranking-command","title":"{Prompt Ranking Command}","text":"<pre><code># Command: $1\n\n# Usage: $1 \"$2\" \"$3\" \"$4\"\n\n# Args:\n\n# - {{query}}: $2\n# - {{path}}: $3\n# - {{threshold}}: $4\n\nprompt = \"\"\"\nTask:\nGiven a user inquiry {{query}}, review prompt-definition files located at {{path}} and identify the most relevant ones.\n\nDefaults:\n* If {{path}} is missing or blank, use \"~/.codex/prompts\".\n\nDo the following:\n1) List files in {{path}} without descending into subfolders. Treat common doc/config extensions as candidates.\n2) Read each candidate\u2019s text and summarize its purpose + domain in one sentence.\n3) Compute a relevance score in [0,1] between that summary and {{query}}.\n4) Order all candidates by score (highest first).\n5) Emit a compact table with exactly these columns: filename | description | match_score (rounded to 2 decimals).\n\nRules:\n* The description must be 1\u20132 sentences capturing purpose and domain.\n* Only include rows with match_score \u2265 {{threshold}}.\n* If none satisfy {{threshold}}, output a single line: \"No prompt exceeds threshold {{threshold}} \u2014 recommend creating a new prompt.\"\n\nAcceptance:\n* When \u22651 match meets {{threshold}}, a table sorted by descending match_score is present.\n* Otherwise, the single-line note is produced.\n\n!{echo \"Using path: ${PATH_ARG:-~/.codex/prompts}\"}\n\"\"\"\n</code></pre>"},{"location":"temp-prompts-refactored/rank-root-prompts/#output-format","title":"Output format","text":"<ul> <li>Preferred: a markdown table with columns <code>filename | description | match_score</code> sorted by <code>match_score</code> (desc) and filtered by <code>{{threshold}}</code>.</li> <li> </li> </ul>"},{"location":"temp-prompts-refactored/rank-root-prompts/#fallback-the-exact-one-line-message-when-no-entries-meet-threshold","title":"Fallback: the exact one-line message when no entries meet <code>{{threshold}}</code>.","text":""},{"location":"temp-prompts-refactored/refactor-file/","title":"Refactor Analysis","text":"<p>Refactor Analysis</p> <ol> <li>Gather context by running <code>sed -n '1,400p' $1</code> for the first 400 lines of the file.</li> <li>Suggest refactors that reduce complexity and improve readability without changing behavior. Provide $2 with commentary.</li> <li>Synthesize insights into $5 with clear priorities and $7.</li> </ol> <p>Output Format</p> <ul> <li>Begin with a concise summary: $5</li> <li>Include $2 with commentary</li> <li>Document evidence: $3</li> </ul> <p>Note: $4 is implied by the refactoring goal but can be explicitly stated for clarity</p>"},{"location":"temp-prompts-refactored/refactor-suggestions/","title":"Refactor Suggestions","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/refactor-suggestions/#steps","title":"Steps","text":"<p>$3</p>"},{"location":"temp-prompts-refactored/refactor-suggestions/#output-format","title":"Output format","text":"<p>$4</p>"},{"location":"temp-prompts-refactored/refactor-suggestions/#affected-files","title":"Affected files","text":""},{"location":"temp-prompts-refactored/refactor-suggestions/#root-cause","title":"Root cause","text":""},{"location":"temp-prompts-refactored/refactor-suggestions/#proposed-fix","title":"Proposed fix","text":""},{"location":"temp-prompts-refactored/refactor-suggestions/#tests","title":"Tests","text":""},{"location":"temp-prompts-refactored/refactor-suggestions/#docs-gaps","title":"Docs gaps","text":""},{"location":"temp-prompts-refactored/refactor-suggestions/#open-questions","title":"Open questions","text":"<ul> <li>$1 = Trigger (e.g., /refactor-suggestions)</li> <li>$2 = Purpose (e.g., Propose repo-wide refactoring opportunities after tests exist)</li> <li>$3 = Steps (e.g., Map directory structure and large files. \\n2. Identify duplication, data clumps, and god objects. \\n3. Suggest phased refactors with safety checks and tests.)</li> <li>$4 = Output format (e.g., Ranked list with owners and effort estimates.)</li> </ul>"},{"location":"temp-prompts-refactored/reference-implementation/","title":"Reference implementation","text":"<p>How-to</p>"},{"location":"temp-prompts-refactored/reference-implementation/#1","title":"$1","text":"<p>Trigger: $2</p> <p>Purpose: $3</p>"},{"location":"temp-prompts-refactored/reference-implementation/#steps","title":"Steps","text":"<ol> <li>$4</li> <li>$5</li> <li>$6</li> </ol>"},{"location":"temp-prompts-refactored/reference-implementation/#output-format","title":"Output format","text":"<ul> <li>$7</li> </ul>"},{"location":"temp-prompts-refactored/regression-guard/","title":"Regression guard","text":"<p>Regression Guard</p> <p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/regression-guard/#steps","title":"Steps","text":"<p>$3 $4 $5</p>"},{"location":"temp-prompts-refactored/regression-guard/#output-format","title":"Output format","text":"<p>$6</p>"},{"location":"temp-prompts-refactored/regression-guard/#notes","title":"Notes","text":"<p>$7</p>"},{"location":"temp-prompts-refactored/regression-guard/#affected-files","title":"Affected files","text":""},{"location":"temp-prompts-refactored/regression-guard/#root-cause","title":"Root cause","text":""},{"location":"temp-prompts-refactored/regression-guard/#proposed-fix","title":"Proposed fix","text":""},{"location":"temp-prompts-refactored/regression-guard/#tests","title":"Tests","text":""},{"location":"temp-prompts-refactored/regression-guard/#docs-gaps","title":"Docs gaps","text":""},{"location":"temp-prompts-refactored/regression-guard/#open-questions","title":"Open questions","text":""},{"location":"temp-prompts-refactored/release-notes-prepare/","title":"Prepare Release Notes From CHANGELOG","text":"<p>Trigger: <code>/release-notes-prepare</code></p> <p>Purpose: Convert the latest CHANGELOG section into release notes suitable for GitHub Releases with the six-section layout.</p> <p>Steps:</p> <ol> <li>Detect latest version heading and extract its section.</li> <li>Normalize bullets to sentence fragments without trailing periods.</li> <li>Add short highlights at top (3 bullets max) derived from Added/Changed.</li> <li>Emit a \"copy-ready\" Markdown body.</li> </ol> <p>Output format:</p> <ul> <li>Title line: <code>Release ${1} \u2014 ${2}</code></li> <li>Highlights list</li> <li>Six sections with bullets</li> </ul> <p>${1}=Version (e.g., 1.6.0) ${2}=Release date (e.g., 2025-09-22) ${3}=Highlight 1 (e.g., Custom roles and permissions) ${4}=Highlight 2 (e.g., Faster cold starts) ${5}=Highlight 3 (optional) ${6}=Added section content ${7}=Changed section content</p> <p>Note: This template follows the six-section layout (Added, Changed, Removed, Fixed, Improved, Deprecated). Missing sections like Removed, Fixed, Improved, Deprecated are implied by the context and will be populated with the appropriate content from CHANGELOG.</p>"},{"location":"temp-prompts-refactored/release-notes/","title":"Release notes","text":""},{"location":"temp-prompts-refactored/release-notes/#how-to-generate-release-notes","title":"How to Generate Release Notes","text":"<p>Trigger: /release-notes $1</p> <p>Purpose: Generate human-readable release notes from recent commits.</p> <p>You are a CLI assistant focused on helping contributors with the task: Generate human\u2011readable release notes from recent commits.</p> <ol> <li>Gather context by running <code>git log --pretty='* %s (%h) \u2014 %an' --no-merges $2</code> for the commit log (no merges).</li> <li>Produce release notes grouped by type $3. Include a Highlights section and a full changelog list.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary: $6</li> <li>Document the evidence: $7</li> </ul> <p>Example Input: $4</p> <p>Expected Output:</p>"},{"location":"temp-prompts-refactored/release-notes/#3","title":"$3","text":"<ul> <li>$5</li> </ul>"},{"location":"temp-prompts-refactored/research-batch/","title":"Research batch","text":"<p>Conversation-Aware Research \u2014 Batch WBRO</p> <p>Trigger: $1</p> <p>Purpose: Process a numbered work-breakdown list of objectives with carry-forward context across items and produce a roll-up summary.</p> <p>Steps:</p> <ol> <li>Parse numbered WBRO items from the input after the trigger.</li> <li>Before Item 1: list \u22645 bullets of starting context.</li> <li>For each item i: execute the per-item workflow and include a Conversation State Update.</li> <li>If blocked by prior gaps, emit Dependency Blocked with a minimal micro-query.</li> <li>After all items: emit a Roll-up Summary with per-item status, enabled decisions, unresolved risks, and a domain-type count of sources.</li> </ol> <p>Output format:</p> <ul> <li>Repeat the single-item format per item.</li> <li>End with:</li> </ul> <pre><code>## Roll-up Summary\n- Item $2: $3 \u2014 decision enabled: $4; risks: $5\n- Sources by domain type: $6, $7\n</code></pre> <p>Examples: - Input: <code>/research-batch $1</code> - Output: Per-item sections plus roll-up.</p> <p>Notes: - Keep quotes \u226425 words. Prefer primary docs.</p> <ul> <li>$1: Input WBRO items (e.g., \"1) Validate Next.js 15 stability. 2) Compare Bun vs Node for CI. 3) Licensing risks for MIT vs Apache-2.0.\")</li> <li>$2: Item number (e.g., \"1\")</li> <li>$3: Status (e.g., \"Completed\")</li> <li>$4: Enabled decisions (e.g., \"Validate Next.js 15\")</li> <li>$5: Unresolved risks (e.g., \"Licensing conflicts\")</li> <li>$6: Domain type count (e.g., \"3\")</li> <li>$7: Domain types (e.g., \"gov, org, docs, blog, news\") --&gt;</li> </ul>"},{"location":"temp-prompts-refactored/research-item/","title":"Research item","text":"<p>Conversation-Aware Research</p>"},{"location":"temp-prompts-refactored/research-item/#conversation-aware-research-single-item","title":"Conversation-Aware Research \u2014 Single Item","text":"<p>Trigger: /research-item</p> <p>Purpose: Run the full per-item research workflow for one objective and return queries, evidence, synthesis, contradictions, gaps, decision hook, plus a conversation state update.</p> <p>Steps: 1. Read the objective text following the trigger. 2. Capture starting context if provided. 3. Apply the Process (per item): Goal, Assumptions, Query Set (4\u20138), Search Plan, Run &amp; Capture, Cross-check, Synthesis, Gaps &amp; Next, Decision Hook. 4. Track PubDate and Accessed (ISO) for every source; prefer primary docs. 5. Enforce quotes \u226425 words; mark inferences as \"Inference\".</p> <p>Output format:</p> <pre><code>## Item 1: $1\n\n### Goal\n$2\n\n### Assumptions\n- $3\n\n### Query Set\n- $4\n- $5\n- $6\n- $7\n\n### Evidence Log\n| SourceID | Title | Publisher | URL | PubDate | Accessed | Quote (\u226425w) | Finding | Rel | Conf |\n|---|---|---|---|---|---|---|---|---|---|\n\n### Synthesis\n- $8\n- $9\n- $10\n\n### Contradictions\n- $11 \u2192 $12\n\n### Gaps &amp; Next\n- $13\n\n### Decision Hook\n$14\n\n### Conversation State Update\n- New facts: $15\n- Constraints learned: $16\n- Entities normalized: $17\n</code></pre> <p>Examples: - Input: <code>/research-item Compare OpenAPI 3.1 tooling for Python clients in 2024; budget $0; prefer official docs.</code> - Output: As per format with SourceIDs and dates.</p> <p>Notes: - Safety: No personal data. Do not fabricate sources. - Provenance: Cite reputable sources; record n/a for missing PubDate.</p>"},{"location":"temp-prompts-refactored/reset-strategy/","title":"Reset Strategy","text":"<p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/reset-strategy/#steps","title":"Steps","text":"<p>$3 $4 $5 $6</p>"},{"location":"temp-prompts-refactored/reset-strategy/#output-format","title":"Output format","text":"<ul> <li>A short decision note and exact commands. Never execute resets automatically.</li> </ul>"},{"location":"temp-prompts-refactored/reset-strategy/#examples","title":"Examples","text":"<ul> <li>Recommend reset after repeated failing refactors touching $7</li> </ul>"},{"location":"temp-prompts-refactored/reset-strategy/#notes","title":"Notes","text":"<ul> <li>Warn about destructive nature. Require user confirmation.</li> </ul>"},{"location":"temp-prompts-refactored/reset-strategy/#missing-sections-inferred-for-analysis-context","title":"Missing Sections (Inferred for Analysis Context)","text":"<ul> <li>Affected files: $8</li> <li>Root cause: $9</li> <li>Proposed fix: $10</li> <li>Tests: $11</li> <li>Docs gaps: $12</li> <li>Open questions: $13</li> </ul>"},{"location":"temp-prompts-refactored/review-branch/","title":"Review branch","text":"<p>/*</p> <p>Placeholder mapping: $1 = Trigger $2 = Purpose $3 = Step 1 description $4 = Step 2 description $5 = Step 3 description $6 = Output requirements $7 = Example input (if applicable) */</p>"},{"location":"temp-prompts-refactored/review-branch/#template_name-or-inferred-name","title":"{template_name or Inferred Name}","text":"<p>{Trigger}</p> <p>{Purpose}</p> <ol> <li>{Step 1}</li> <li>{Step 2}</li> <li>{Step 3}</li> </ol> <p>{Output Requirements}</p> <p>{Example Input}</p>"},{"location":"temp-prompts-refactored/review-branch/#analysis","title":"Analysis","text":"<ul> <li>Affected files: {Affected files}</li> <li>Root cause: {Root cause}</li> <li>Proposed fix: {Proposed fix}</li> <li>Tests: {Tests}</li> <li>Docs gaps: {Docs gaps}</li> <li>Open questions: {Open questions}</li> </ul>"},{"location":"temp-prompts-refactored/review-branch/#output-format","title":"Output format","text":"<ul> <li>{Output format requirement}</li> </ul> <p>Note: Placeholders marked with <code>$1..$7</code> are to be filled with context-specific content from the input.</p>"},{"location":"temp-prompts-refactored/review/","title":"Review","text":"<p>Trigger: $1</p> <p>Purpose: Review code matching $1 and deliver actionable feedback.</p> <p>You are a CLI assistant focused on helping contributors with the task: Review code matching $1 and give actionable feedback.</p> <ol> <li>Gather context by running <code>rg -n $2 . || grep -RIn $2 .</code> for the search results for $2 (filename or regex).</li> <li> <p>Perform a thorough code review. Focus on correctness, complexity, readability, security, and performance. Provide concrete patch suggestions.</p> </li> <li> <p>Synthesize the insights into the requested format with clear priorities and next steps.</p> </li> </ol> <p>Output: - Begin with a concise summary that restates the goal: Review code matching $1 and give actionable feedback. - Provide unified diff-style patches when recommending code changes. - Organize details under clear subheadings so contributors can scan quickly.</p> <p>Example Input: $3</p> <p>Expected Output: - Usage cluster in src/network/* with note on inconsistent error handling.</p>"},{"location":"temp-prompts-refactored/roll-up/","title":"Roll-up","text":""},{"location":"temp-prompts-refactored/roll-up/#research-roll-up-summary","title":"Research Roll-up Summary","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps: 1. $3 2. $4 3. $5</p> <p>Output format: <pre><code>## Roll-up Summary\n- Item {n}: {status} \u2014 decision enabled: {\u2026}; risks: {\u2026}\n- Sources by domain type: {gov:X, org:Y, docs:Z, blog:A, news:B, academic:C}\n</code></pre></p> <p>Examples: - Input: $7 - Output: [see above]</p> <p>Notes: - Domain Count Analysis: $6 (explain why counts vary across domains) - Evidence Log Reference: Use counts derived from the Evidence Logs</p>"},{"location":"temp-prompts-refactored/scaffold-fullstack/","title":"Scaffold Full\u2011Stack App","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <ol> <li>Read repository context: <code>git rev-parse --is-inside-work-tree</code>.</li> <li>If repo is empty, initialize: <code>git init -b main</code> and create <code>.editorconfig</code>, <code>.gitignore</code>, <code>README.md</code>.</li> <li>For $3 derive presets (examples):</li> <li><code>$4</code>: Next.js app, Express API, Prisma + PostgreSQL, Playwright, pnpm workspaces.</li> <li><code>$5</code>: Vite + React app, Fastify API, Drizzle + SQLite.</li> <li>Create workspace layout:</li> <li>root: <code>package.json</code> with <code>pnpm</code> workspaces, <code>tsconfig.base.json</code>, <code>eslint</code>, <code>prettier</code>.</li> <li>apps/web, apps/api, packages/ui, packages/config.</li> <li>Add scripts:</li> <li>root: <code>dev</code>, <code>build</code>, <code>lint</code>, <code>typecheck</code>, <code>test</code>, <code>e2e</code>, <code>format</code>.</li> <li>web: Next/Vite scripts. api: dev with ts-node or tsx.</li> <li>Seed CI files: <code>.github/workflows/ci.yml</code> with jobs [lint, typecheck, test, build, e2e] and artifact uploads.</li> <li>Add example routes:</li> <li>web: <code>/health</code> page. api: <code>GET /health</code> returning <code>{ ok: true }</code>.</li> <li>Write docs to <code>README.md</code>: how to run dev, test, build, and env variables.</li> <li>Stage files, but do not commit. Output a tree and next commands.</li> </ol> <p>Output format: - Title line: <code>Scaffold created: $6</code> - Sections: <code>Repo Tree</code>, <code>Next Steps</code>, <code>CI Seeds</code>. - Include a fenced code block of the <code>tree</code> and sample scripts.</p> <p>Examples: - Input: <code>$7</code> Output: Summary + tree with <code>apps/web</code>, <code>apps/api</code>, <code>packages/ui</code>. - Input: <code>$8</code> Output: Summary + tree + Drizzle config.</p> <p>Notes: - Assume pnpm and Node 20+. Do not run package installs automatically; propose commands instead. - Respect existing files; avoid overwriting without explicit confirmation.</p> <ul> <li>$1 = trigger command</li> <li>$2 = purpose statement</li> <li>$3 = stack preset name</li> <li>$4 = example preset description</li> <li>$5 = alternative example preset description</li> <li>$6 = output title suffix</li> <li>$7 = example input command</li> <li>$8 = alternative example input command --&gt;</li> </ul>"},{"location":"temp-prompts-refactored/scope-control/","title":"Scope control","text":"<p>/ Placeholder mapping: $1 = Trigger $2 = Purpose $3 = Steps $4 = Output format $5 = Example input $6 = Example output $7 = Notes /</p> <p>Scope Control</p> <p>$1</p> <p>Purpose: $2</p> <p>Steps: 1. $3 2. $4 3. $5 4. $6</p> <p>Output format: $7</p>"},{"location":"temp-prompts-refactored/scope-control/#examples","title":"Examples","text":"<ul> <li>Input: $1</li> <li>Output: $2</li> </ul>"},{"location":"temp-prompts-refactored/scope-control/#notes","title":"Notes","text":"<ul> <li>$3</li> </ul>"},{"location":"temp-prompts-refactored/secrets-manager-setup/","title":"Secrets manager setup","text":"<p>$2</p> <p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <p>$3</p> <p>Output format: $4</p> <p>Examples: $5</p> <p>Notes: $6</p> <p>Affected files: (to be filled) Root cause: (to be filled) Proposed fix: (to be filled) Tests: (to be filled) Docs gaps: (to be filled) Open questions: (to be filled)</p>"},{"location":"temp-prompts-refactored/secrets-scan/","title":"Secrets scan","text":"<p>Secrets Scan Analysis</p> <ol> <li>Gather context by running <code>$2</code> for the if <code>$2</code> is available, output will appear below.</li> <li>Interpret the scanner results using <code>$3</code> to de\u2011dupe false positives and propose rotations/remediation.</li> <li>Synthesize the insights into <code>$4</code> with clear priorities and next steps.</li> </ol> <p>Output: - Begin with a concise summary restating <code>$1</code> - Offer prioritized, actionable recommendations with rationale - Document the evidence used for maintainers' trust</p> <p>Example Input: $5</p> <p>Expected Output: $6</p> <p>Affected files:  Root cause:  Proposed fix:  Tests:  Docs gaps:  Open questions:</p>"},{"location":"temp-prompts-refactored/slo-setup/","title":"SLO setup","text":"<p>$1</p> <p>Trigger: $2</p> <p>Purpose: $3</p> <p>Steps:</p> <p>$4</p> <p>Output format: $5</p> <p>Examples: $6</p> <p>Notes: $7</p>"},{"location":"temp-prompts-refactored/stack-evaluation/","title":"Stack evaluation","text":"<p>$1</p> <p>Trigger: $2</p> <p>Purpose: $3</p>"},{"location":"temp-prompts-refactored/stack-evaluation/#steps","title":"Steps","text":"<ol> <li>$4</li> <li>$5</li> <li>$6</li> </ol>"},{"location":"temp-prompts-refactored/stack-evaluation/#output-format","title":"Output format","text":"<ul> <li>$7</li> </ul>"},{"location":"temp-prompts-refactored/stop-guessing/","title":"stop guessing","text":"<p>$1</p> <p>Respond with a JSON object in the following order of fields: <code>reasoning</code>, then <code>template_markdown</code>.</p>"},{"location":"temp-prompts-refactored/summary-1/","title":"Inferred Analysis Template","text":"<p>You are a CLI assistant helping contributors with the task: $1.</p> <ol> <li>Context sweep. Derive a repository map by running \\(2** (first N entries are sufficient). Review **\\)3 for primary documentation.</li> <li>Draft the summary. Organize findings under $4, $5, $6, $7.</li> <li>Synthesize. Present a prioritized, action-oriented report with immediate next steps.</li> </ol>"},{"location":"temp-prompts-refactored/summary-1/#report-structure","title":"Report Structure","text":""},{"location":"temp-prompts-refactored/summary-1/#4","title":"$4","text":"<ul> <li>\u2026</li> </ul>"},{"location":"temp-prompts-refactored/summary-1/#5","title":"$5","text":"<ul> <li>\u2026</li> </ul>"},{"location":"temp-prompts-refactored/summary-1/#6","title":"$6","text":"<ul> <li>\u2026</li> </ul>"},{"location":"temp-prompts-refactored/summary-1/#7","title":"$7","text":"<ol> <li>\u2026</li> <li>\u2026</li> <li>\u2026</li> </ol>"},{"location":"temp-prompts-refactored/summary-1/#evidence-consulted","title":"Evidence Consulted","text":"<ul> <li>Repo map derived via: $2</li> <li>Docs reviewed: $3</li> <li>Noteworthy gaps or uncertainties: \u2026</li> </ul>"},{"location":"temp-prompts-refactored/summary-1/#next-steps-prioritized","title":"Next Steps (Prioritized)","text":"<ol> <li>\u2026</li> <li>\u2026</li> <li>\u2026</li> </ol>"},{"location":"temp-prompts-refactored/summary-1/#open-questions","title":"Open Questions","text":"<ul> <li>\u2026</li> <li>\u2026</li> </ul>"},{"location":"temp-prompts-refactored/summary-1/#output-format-for-automation-and-reviews","title":"Output format (for automation and reviews)","text":"<ul> <li>Audience: contributors and maintainers</li> <li>Tone: concise, decision-ready</li> <li>Must include: goal recap (\\(1**), sections (**\\)4\u2013$7), evidence, priorities, open questions</li> <li>Nice to have: links to code paths, brief risk notes</li> </ul> <p>Validation checklist * [ ] All required sections present * [ ] Evidence lists commands/files used (\\(2**, **\\)3) * [ ] Priorities and next steps are explicit * [ ] Open questions are called out clearly</p>"},{"location":"temp-prompts-refactored/summary-2/","title":"Summary 2","text":""},{"location":"temp-prompts-refactored/summary-2/#1","title":"$1","text":"<p>You are a CLI helper guiding contributors to accomplish: $1.</p>"},{"location":"temp-prompts-refactored/summary-2/#scope-role","title":"Scope &amp; Role","text":"<ul> <li>Operate in a repository working tree.</li> <li>Run lightweight, read-only commands to gather context.</li> <li>Synthesize findings into a concise, maintainer-friendly report.</li> </ul>"},{"location":"temp-prompts-refactored/summary-2/#procedure","title":"Procedure","text":"<ol> <li>Map the repo (quick scan) \u2014 run $2 to capture a top-slice of the file tree for orientation.</li> <li>Locate key docs \u2014 check the paths in $3 (if present) for project-level guidance.</li> <li>Summarize the project \u2014 draft a high-level overview covering:</li> <li>Purpose (what it is)</li> <li>Motivation (why it exists)</li> <li>Architecture/Workflow (how it works at a glance)</li> <li>Getting Started (how to begin using/developing)</li> <li>Prioritize next steps \u2014 identify immediate follow-ups for readers (e.g., areas to explore, gaps to fill).</li> <li>Record evidence \u2014 note exactly what you inspected so maintainers can verify.</li> </ol>"},{"location":"temp-prompts-refactored/summary-2/#output","title":"Output","text":"<p>Begin with a one-sentence restatement of $1, then provide the sections below in order:</p> <ul> <li>Project Summary \u2014 purpose, motivation, architecture/workflow, getting started.</li> <li>Repo Snapshot \u2014 brief map excerpt from $2 (top of tree only).</li> <li>Evidence Log \u2014 list the commands run and files/paths reviewed, including $3.</li> <li>Priorities &amp; Next Steps \u2014 the most important actions to take next (short list).</li> </ul>"},{"location":"temp-prompts-refactored/summary-2/#example-input","title":"Example Input","text":"<p>(no arguments; run from the repo root)</p>"},{"location":"temp-prompts-refactored/summary-2/#expected-result","title":"Expected Result","text":"<p>A structured report following the Output section above, optimized for README-level clarity and trustworthiness.</p>"},{"location":"temp-prompts-refactored/summary-2/#output-format-strict","title":"Output format (strict)","text":"<p>Provide sections exactly in this order: Project Summary \u2192 Repo Snapshot \u2192 Evidence Log \u2192 Priorities &amp; Next Steps. Keep each section concise and actionable.</p>"},{"location":"temp-prompts-refactored/summary/","title":"Summary","text":"<p>Repository Summary Generator</p> <ol> <li>Gather context by running <code>$1</code> for the repo map.</li> <li>Generate a high-level summary covering <code>$3</code>.</li> <li>Document evidence used to maintain trust in conclusions per <code>$4</code>.</li> <li>Output a structured report following <code>$5</code>.</li> </ol>"},{"location":"temp-prompts-refactored/switch-model/","title":"Switch model","text":"<p>Switch Model</p> <p>Trigger: $1</p> <p>Purpose: Decide when to try a different AI backend and how to compare.</p>"},{"location":"temp-prompts-refactored/switch-model/#steps","title":"Steps","text":"<ol> <li>Define task type: $2</li> <li>Select candidate models and temperature/tooling options.</li> <li>Run a fixed input suite: $3 and measure $4.</li> <li>Recommend a model per task: $5 with $6.</li> </ol>"},{"location":"temp-prompts-refactored/switch-model/#output-format","title":"Output format","text":"<ul> <li>Table: task \u2192 model \u2192 settings \u2192 $7.</li> </ul>"},{"location":"temp-prompts-refactored/system-level-instruction-editor/","title":"System-level instruction editor","text":"<p>System-Level Instruction Editor</p> <p>Trigger: $1</p> <p>Purpose: $2</p>"},{"location":"temp-prompts-refactored/system-level-instruction-editor/#inputs","title":"Inputs","text":"<ul> <li>$3</li> </ul>"},{"location":"temp-prompts-refactored/system-level-instruction-editor/#steps","title":"Steps","text":"<ol> <li>$4</li> <li>$5</li> <li> <p>$6</p> </li> <li> <p>Deconstruct the request: $7</p> </li> <li> <p>Locate insertion points: Use semantic matching on headings and content to find the best-fit sections for the user\u2019s request. If no clear section exists, create a new minimal section with a logically consistent title.</p> </li> <li> <p>Apply minimal change: Insert or modify content to satisfy the request while preserving tone, structure, and cross-references. Keep unrelated sections unchanged.</p> </li> <li> <p>Run invariants:</p> </li> <li> <p>The entire file must be present (no placeholders, no truncation).</p> </li> <li>Markdown structure and formatting must remain valid.</li> <li> <p>Internal references and links stay accurate.</p> </li> <li> <p>Render in Canvas:</p> </li> <li> <p>If editing an existing file: open in Canvas and replace the full contents with the updated version.</p> </li> <li> <p>If creating a new file: create it in Canvas and display the entire file.</p> </li> <li> <p>Variants (optional): Generate $1.md and/or $2.md from the updated $3.md using only the Platform Substitution Rules. Render each variant\u2019s entire file in Canvas (one file per Canvas operation).</p> </li> <li> <p>Size-limit fallback: If a size cap prevents full-file rendering in Canvas, output the entire file in chat, then append:</p> </li> <li> <p>\"Note: Full content was output in chat due to a size limit preventing Canvas rendering.\"</p> </li> </ol>"},{"location":"temp-prompts-refactored/system-level-instruction-editor/#output-format","title":"Output format","text":"<ul> <li>Table: $1 \u2192 $2 \u2192 $3 \u2192 $4 \u2192 $5</li> </ul>"},{"location":"temp-prompts-refactored/system-level-instruction-editor/#example-rows","title":"Example rows","text":"<ul> <li>\"\" \u2192 $6 \u2192 $7 \u2192 $1 \u2192 $2"},{"location":"temp-prompts-refactored/tm-advance/","title":"TM \u00b7 advance","text":"<p>Advance Task Plan Generator</p> <p>Trigger: For given $1, produce a concrete work plan, acceptance criteria, tests, and a Conventional Commits message to move status toward done.</p> <p>Purpose: For given task id(s), produce a concrete work plan, acceptance criteria, tests, and a Conventional Commits message to move status toward done.</p> <p>Steps:</p> <ol> <li>Read tasks.json; resolve each provided $1. If none provided, pick the top item from /tm-next.</li> <li>For each task: restate $2, goals, and related dependencies.</li> <li>Draft a step-by-step plan with $4 and $5.</li> <li>Provide a minimal commit plan and a Conventional Commits message ($7).</li> <li>List measurable acceptance criteria ($6).</li> </ol> <p>Output format:</p> <ul> <li>One section per task: \"## $1 \u2014 $2\"</li> <li>Subsections: Plan, Files, Tests, Acceptance, Commit Message ($7), Risks.</li> </ul> <p>Notes: - Do not mutate tasks.json. Emit proposed changes only.</p>"},{"location":"temp-prompts-refactored/tm-blockers/","title":"TM \u00b7 blockers","text":"<p>Blocker Diagnosis Template</p> <p>$1</p> <p>$2</p> <p>$3</p> <p>$4</p> <p>$5</p> <p>$6</p>"},{"location":"temp-prompts-refactored/tm-blockers/#blocker-report-7","title":"Blocker Report: $7","text":"<p>Tables: blockers (type | item | evidence), actions (step | owner | effort | success_criteria).</p>"},{"location":"temp-prompts-refactored/tm-ci/","title":"TM \u00b7 CI","text":""},{"location":"temp-prompts-refactored/tm-ci/#citest-checklist-template","title":"CI/Test Checklist Template","text":""},{"location":"temp-prompts-refactored/tm-ci/#analysis","title":"Analysis","text":"<ul> <li>[ ] Affected files</li> <li>[ ] Root cause</li> <li>[ ] Proposed fix</li> <li>[ ] Tests</li> <li>[ ] Docs gaps</li> <li>[ ] Open questions</li> </ul>"},{"location":"temp-prompts-refactored/tm-ci/#how-to-steps","title":"How-to Steps","text":"<ol> <li>Compute ready tasks (see $3) and collect testStrategy fields.</li> <li>Group by $4; otherwise by path keywords in titles.</li> <li>Propose CI jobs and test commands with approximate runtimes and gating rules ($5).</li> <li>Include a smoke-test matrix ($6) and minimal code coverage targets if relevant.</li> </ol> <p>Output format: - \"# CI Plan\" - Tables: jobs (\\(5) and tests (\\)6) - \"## Risk Areas\" ($7)</p> <p>Examples: - Input: $1 - Output: one CI plan with 3\u20138 jobs and a test table.</p> <p>Notes: - Non-binding guidance. Adapt to the repo\u2019s actual CI system.</p>"},{"location":"temp-prompts-refactored/tm-delta/","title":"$1 \u2192 Tasks Delta","text":"<p>Trigger: $2</p> <p>Purpose: Compare $1 against tasks.json and propose add/update/remove operations.</p> <p>Steps:</p> <p>$3. Extract $4, $5, $6, and $7 from $1. $4. Map them to existing tasks by fuzzy match on title and keywords; detect gaps.</p> <p>Propose: new tasks, updates to titles/descriptions/priority, and deprecations.</p> <p>Output format:</p> <ul> <li>\"# Delta Summary\"</li> <li>Tables: adds | updates | removals.</li> <li>\"## JSON Patch\" with an ordered list of operations: add/replace/remove.</li> <li>\"## Assumptions\" and \"## Open Questions\".</li> </ul> <p>Examples:</p> <ul> <li>Input: $2</li> <li>Output: tables with a small JSON Patch block.</li> </ul> <p>Notes:</p> <ul> <li>Keep patches minimal and reversible. Flag any destructive changes explicitly.</li> </ul>"},{"location":"temp-prompts-refactored/tm-docs/","title":"TM \u00b7 docs","text":"<p>Project Status Docs</p>"},{"location":"temp-prompts-refactored/tm-docs/#generate-status-docs","title":"Generate Status Docs","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps: 1. $3 2. $4 3. $5 4. $6</p> <p>Output format: - $7</p> <p>Examples: - $8</p> <p>Notes: - $9</p> <p>Analysis - [ ] Affected files: [list] - [ ] Root cause: [reason] - [ ] Proposed fix: [solution] - [ ] Tests: [test cases] - [ ] Docs gaps: [missing sections] - [ ] Open questions: [questions]</p> <p>Root cause - [ ] Identifying factors: [list]</p> <p>Proposed fix - [ ] Action items: [list]</p> <p>Tests - [ ] Test cases: [list]</p> <p>Docs gaps - [ ] Missing sections: [list]</p> <p>Open questions - [ ] Unresolved issues: [list]</p>"},{"location":"temp-prompts-refactored/tm-next/","title":"Next Ready Tasks","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps:</p> <ol> <li>$3</li> <li>$4</li> <li>$5</li> <li>$6</li> </ol> <p>Output format:</p> <ul> <li>\"$7\"</li> <li>Table: id | title | priority | why_ready | prereqs</li> <li>\"## Notes\" for tie-break rules and data gaps.</li> </ul> <p>Examples:</p> <ul> <li>Input: $8</li> <li>Output: $9</li> </ul> <p>Notes:</p> <ul> <li>Treat missing or null priority as $10. If custom scales exist, describe them in Notes.</li> </ul> <p>$1: Trigger (e.g., \"/tm-next\") $2: Purpose (brief description) $3: Step 1 (algorithmic step) $4: Step 2 (algorithmic step) $5: Step 3 (algorithmic step) $6: Step 4 (algorithmic step) $7: Output format description $8: Example input format $9: Example output format $10: Default priority value</p>"},{"location":"temp-prompts-refactored/tm-overview/","title":"TaskMaster Overview","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>Steps: 1. Locate the active tasks.json at repo root or the path supplied in the user message. Do not modify it. 2. Parse fields: id, title, description, status, priority, dependencies, subtasks. 3. Compute counts per status and a table of top pending items by priority. 4. Detect dependency issues: cycles, missing ids, orphans (no deps and not depended on). 5. Approximate a critical path: longest dependency chain among pending\u2192in_progress tasks.</p> <p>Output format: $3</p> <p>Examples: - Input: $4 - Output: $5</p> <p>Notes: - $6: Read-only. Assume statuses: pending | in_progress | blocked | done. - If tasks.json is missing or invalid, output an \"## Errors\" section with a concise diagnosis.</p> <p>$1 = Task description $2 = Purpose statement $3 = Output format specification $4 = Example input format $5 = Expected output structure $6 = Critical path details (optional) --&gt;</p>"},{"location":"temp-prompts-refactored/tm-refine/","title":"TM \u00b7 refine","text":"<p>Refine Task into Subtasks</p> <p>Trigger: /tm-refine</p> <p>Purpose: Expand a vague or large task into actionable subtasks with clear acceptance criteria.</p> <p>Steps:</p> <ol> <li>Load the task by $1 and analyze description for ambiguity and scope.</li> <li>Propose 3\u20138 subtasks with titles, brief descriptions, and dependencies between them.</li> <li>Define acceptance criteria per subtask using Given/When/Then or bullet checks.</li> <li>Suggest test coverage and doc updates triggered by completion.</li> </ol> <p>Output format:</p> <ul> <li>\"# Refinement: $1\"</li> <li>Subtasks as a Markdown table: $2</li> <li>\"## JSON Patch\" fenced code of suggested additions suitable for tasks.json editing: $3</li> </ul> <p>Examples:</p> <ul> <li>Input: /tm-refine $1</li> <li>Output: $2 plus a minimal JSON Patch array.</li> </ul> <p>Constraints: - Do not assume authority to change files; provide patches the user can apply.</p>"},{"location":"temp-prompts-refactored/todo-report/","title":"TODO report","text":"<p>CLI Assistant Prompt for TODO Triage</p> <p>You are a CLI assistant focused on helping contributors with the task: $1.</p> <ol> <li>Gather context by running $2.</li> <li>Aggregate and group TODO/FIXME/XXX by $3.</li> <li>Propose a triage plan: $4.</li> </ol> <p>Output: - Begin with a concise summary that restates the goal: $5. - Offer prioritized, actionable recommendations with rationale: $6. - Organize details under clear subheadings: $7.</p>"},{"location":"temp-prompts-refactored/todos/","title":"TODOs","text":"<p>How-to: Find and group TODO/FIXME annotations</p> <ol> <li>Gather context by running <code>$1</code>.</li> <li>Find and group TODO/FIXME annotations.</li> <li>$3</li> </ol> <p>Output:</p> <ul> <li>Begin with a concise summary that restates the goal: Find and group TODO/FIXME annotations.</li> <li>Document the evidence you used so maintainers can trust the conclusion.</li> </ul> <p>Example Input: $5</p> <p>Expected Output: $4</p>"},{"location":"temp-prompts-refactored/tsconfig-review/","title":"TSConfig review","text":"<p>CLI Assistant Task: Review tsconfig</p> <p>You are a CLI assistant focused on helping contributors with the task: $1</p> <ol> <li>Gather context by inspecting $2.</li> <li>Provide recommendations for module/target, strictness, paths, incremental builds.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output</p> <ul> <li>Begin with a concise summary that restates the goal: $1</li> <li>Offer prioritized, actionable recommendations with rationale: $3</li> <li>Document the evidence you used so maintainers can trust the conclusion: $4</li> </ul> <p>Example - Input: $5 - Expected Output: $6</p>"},{"location":"temp-prompts-refactored/tsconfig-review/#optional-sections-for-analysis-tasks","title":"Optional sections (for analysis tasks)","text":"<ul> <li>[ ] Affected files</li> <li>[ ] Root cause</li> <li>[ ] Proposed fix</li> <li>[ ] Tests</li> <li>[ ] Docs gaps</li> <li>[ ] Open questions</li> </ul>"},{"location":"temp-prompts-refactored/ui-screenshots/","title":"UI screenshots","text":"<p>UI Screenshots Analysis</p> <p>Trigger: $2</p> <p>Purpose: $3</p>"},{"location":"temp-prompts-refactored/ui-screenshots/#steps","title":"Steps","text":"<ol> <li>$4</li> <li>$5</li> <li>$6</li> </ol>"},{"location":"temp-prompts-refactored/ui-screenshots/#output-format","title":"Output format","text":"<p>$7</p>"},{"location":"temp-prompts-refactored/ui-screenshots/#affected-files-optional","title":"Affected files (optional)","text":"<ul> <li>List components/files needing changes</li> </ul>"},{"location":"temp-prompts-refactored/ui-screenshots/#root-cause-optional","title":"Root cause (optional)","text":"<ul> <li>Specific UI issues identified</li> </ul>"},{"location":"temp-prompts-refactored/ui-screenshots/#proposed-fix-optional","title":"Proposed fix (optional)","text":"<ul> <li>Concrete implementation changes</li> </ul>"},{"location":"temp-prompts-refactored/ui-screenshots/#test-cases-optional","title":"Test cases (optional)","text":"<ul> <li>Validation criteria for fixes</li> </ul>"},{"location":"temp-prompts-refactored/ui-screenshots/#open-questions-optional","title":"Open questions (optional)","text":"<ul> <li>Unclear requirements or edge cases</li> </ul>"},{"location":"temp-prompts-refactored/update-changelog/","title":"Update changelog","text":"<p><pre><code>&lt;!-- Placeholder mapping --&gt;\n$1 = Trigger command (e.g., \"/update-changelog\")\n$2 = Purpose statement (e.g., \"Generate a user-facing CHANGELOG entry...\")\n$3 = Step 1 description (e.g., \"Inspect repo state:\")\n$4 = Step 2 description (e.g., \"Collect changes:\")\n$5 = Step 3 description (e.g., \"De-dupe and rewrite:\")\n$6 = Step 4 description (e.g., \"Emit Markdown snippet...\")\n$7 = Step 5 description (e.g., \"Decide placement:\")\n\n**How-to: Update CHANGELOG**\n\n$1\n\nPurpose: $2\n\nSteps:\n\n$3\n\n$4\n\n$5\n\n$6\n\n$7\n\nOutput format:\n\n- Heading line with target section (Unreleased or version)\n- Six-section block in Markdown with only non-empty sections in order: Added, Changed, Deprecated, Removed, Fixed, Security\n- A short \"Link references\" block suggestion for `[Unreleased]` and new version comparison links\n- A unified diff (context 3) for `CHANGELOG.md`\n\nExamples:\n\nInput \u2192\n</code></pre> $8 <pre><code>Output \u2192\n</code></pre> $9 <pre><code>Notes:\n\n- Assumes git repository is available and tags follow SemVer.\n- Keep content end-user focused. Avoid internal file names and refactor notes.\n- If no Conventional Commits, infer section from message heuristics.\n- Do not include secrets or internal ticket links.\n</code></pre></p>"},{"location":"temp-prompts-refactored/version-control-guide/","title":"Version Control Guide","text":"<p>Trigger: $1</p> <p>Purpose: Enforce clean incremental commits and clean-room re-implementation when finalizing.</p>"},{"location":"temp-prompts-refactored/version-control-guide/#steps","title":"Steps","text":"<p>$2</p>"},{"location":"temp-prompts-refactored/version-control-guide/#output-format","title":"Output format","text":"<p>$3</p>"},{"location":"temp-prompts-refactored/version-control-guide/#examples","title":"Examples","text":"<p>$4</p>"},{"location":"temp-prompts-refactored/version-control-guide/#notes","title":"Notes","text":"<p>$5</p>"},{"location":"temp-prompts-refactored/version-proposal/","title":"Version Proposal","text":"<p>Trigger: $1</p> <p>Purpose: $2</p> <p>You are a CLI assistant focused on helping contributors with the task: $3</p> <ol> <li>Gather context by running <code>git describe --tags --abbrev=0</code> for the last tag; running <code>git log --pretty='%s' --no-merges $(git describe --tags --abbrev=0)..HEAD</code> for the commits since last tag (no merges).</li> <li>Given the Conventional Commit history since the last tag, propose the next SemVer and justify why.</li> <li>Synthesize the insights into the requested format with clear priorities and next steps.</li> </ol> <p>Output: - Begin with a concise summary that restates the goal: $4 - Offer prioritized, actionable recommendations with rationale. - Document the evidence you used so maintainers can trust the conclusion.</p> <p>Example Input: $5</p> <p>Expected Output: - Structured report following the specified sections.</p>"},{"location":"temp-prompts-refactored/voice-input/","title":"Voice input","text":"<p>Voice Input Template</p> <p>Trigger: $2</p> <p>Purpose: $3</p>"},{"location":"temp-prompts-refactored/voice-input/#steps","title":"Steps","text":"<ol> <li>$4</li> <li>Normalize to tasks or commands for other prompts.</li> <li>Preserve speaker intents and important entities.</li> </ol>"},{"location":"temp-prompts-refactored/voice-input/#key-entities","title":"Key entities","text":"<p>(e.g., speaker intent, command type, entities)</p>"},{"location":"temp-prompts-refactored/voice-input/#expected-output","title":"Expected output","text":"<p>$5</p>"}]}